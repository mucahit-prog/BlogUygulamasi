{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertTableCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const schema = model.schema;\n    const validParent = getInsertTableParent(selection.getFirstPosition());\n    this.isEnabled = schema.checkChild(validParent, 'table');\n  }\n  /**\n   * Executes the command.\n   *\n   * Inserts a table with the given number of rows and columns into the editor.\n   *\n   * @param {Object} options\n   * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n   * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const rows = parseInt(options.rows) || 2;\n    const columns = parseInt(options.columns) || 2;\n    const insertPosition = findOptimalInsertionPosition(selection, model);\n    model.change(writer => {\n      const table = tableUtils.createTable(writer, rows, columns);\n      model.insertContent(table, insertPosition);\n      writer.setSelection(writer.createPositionAt(table.getNodeByPath([0, 0, 0]), 0));\n    });\n  }\n\n} // Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\n\nfunction getInsertTableParent(position) {\n  const parent = position.parent;\n  return parent === parent.root ? parent : parent.parent;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js"],"names":["Command","findOptimalInsertionPosition","InsertTableCommand","refresh","model","editor","selection","document","schema","validParent","getInsertTableParent","getFirstPosition","isEnabled","checkChild","execute","options","tableUtils","plugins","get","rows","parseInt","columns","insertPosition","change","writer","table","createTable","insertContent","setSelection","createPositionAt","getNodeByPath","position","parent","root"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AACA,SAASC,4BAAT,QAA6C,sCAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCF,OAAjC,CAAyC;AACvD;AACD;AACA;AACCG,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAME,MAAM,GAAGJ,KAAK,CAACI,MAArB;AAEA,UAAMC,WAAW,GAAGC,oBAAoB,CAAEJ,SAAS,CAACK,gBAAV,EAAF,CAAxC;AAEA,SAAKC,SAAL,GAAiBJ,MAAM,CAACK,UAAP,CAAmBJ,WAAnB,EAAgC,OAAhC,CAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCK,EAAAA,OAAO,CAAEC,OAAO,GAAG,EAAZ,EAAiB;AACvB,UAAMX,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,SAAS,GAAGF,KAAK,CAACG,QAAN,CAAeD,SAAjC;AACA,UAAMU,UAAU,GAAG,KAAKX,MAAL,CAAYY,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AAEA,UAAMC,IAAI,GAAGC,QAAQ,CAAEL,OAAO,CAACI,IAAV,CAAR,IAA4B,CAAzC;AACA,UAAME,OAAO,GAAGD,QAAQ,CAAEL,OAAO,CAACM,OAAV,CAAR,IAA+B,CAA/C;AAEA,UAAMC,cAAc,GAAGrB,4BAA4B,CAAEK,SAAF,EAAaF,KAAb,CAAnD;AAEAA,IAAAA,KAAK,CAACmB,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,KAAK,GAAGT,UAAU,CAACU,WAAX,CAAwBF,MAAxB,EAAgCL,IAAhC,EAAsCE,OAAtC,CAAd;AAEAjB,MAAAA,KAAK,CAACuB,aAAN,CAAqBF,KAArB,EAA4BH,cAA5B;AAEAE,MAAAA,MAAM,CAACI,YAAP,CAAqBJ,MAAM,CAACK,gBAAP,CAAyBJ,KAAK,CAACK,aAAN,CAAqB,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAArB,CAAzB,EAA6D,CAA7D,CAArB;AACA,KAND;AAOA;;AAzCsD,C,CA4CxD;AACA;AACA;;AACA,SAASpB,oBAAT,CAA+BqB,QAA/B,EAA0C;AACzC,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AAEA,SAAOA,MAAM,KAAKA,MAAM,CAACC,IAAlB,GAAyBD,MAAzB,GAAkCA,MAAM,CAACA,MAAhD;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\nexport default class InsertTableCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst schema = model.schema;\n\n\t\tconst validParent = getInsertTableParent( selection.getFirstPosition() );\n\n\t\tthis.isEnabled = schema.checkChild( validParent, 'table' );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * Inserts a table with the given number of rows and columns into the editor.\n\t *\n\t * @param {Object} options\n\t * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n\t * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n\t * @fires execute\n\t */\n\texecute( options = {} ) {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst rows = parseInt( options.rows ) || 2;\n\t\tconst columns = parseInt( options.columns ) || 2;\n\n\t\tconst insertPosition = findOptimalInsertionPosition( selection, model );\n\n\t\tmodel.change( writer => {\n\t\t\tconst table = tableUtils.createTable( writer, rows, columns );\n\n\t\t\tmodel.insertContent( table, insertPosition );\n\n\t\t\twriter.setSelection( writer.createPositionAt( table.getNodeByPath( [ 0, 0, 0 ] ), 0 ) );\n\t\t} );\n\t}\n}\n\n// Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\nfunction getInsertTableParent( position ) {\n\tconst parent = position.parent;\n\n\treturn parent === parent.root ? parent : parent.parent;\n}\n"]},"metadata":{},"sourceType":"module"}