{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/findlinkrange\n */\n\n/**\n * Returns a range containing the entire link in which the given `position` is placed.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange(position, value, model) {\n  return model.createRange(_findBound(position, value, true, model), _findBound(position, value, false, model));\n} // Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\n\nfunction _findBound(position, value, lookBack, model) {\n  // Get node before or after position (depends on `lookBack` flag).\n  // When position is inside text node then start searching from text node.\n  let node = position.textNode || (lookBack ? position.nodeBefore : position.nodeAfter);\n  let lastNode = null;\n\n  while (node && node.getAttribute('linkHref') == value) {\n    lastNode = node;\n    node = lookBack ? node.previousSibling : node.nextSibling;\n  }\n\n  return lastNode ? model.createPositionAt(lastNode, lookBack ? 'before' : 'after') : position;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-link/src/findlinkrange.js"],"names":["findLinkRange","position","value","model","createRange","_findBound","lookBack","node","textNode","nodeBefore","nodeAfter","lastNode","getAttribute","previousSibling","nextSibling","createPositionAt"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAT,CAAwBC,QAAxB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAiD;AAC/D,SAAOA,KAAK,CAACC,WAAN,CAAmBC,UAAU,CAAEJ,QAAF,EAAYC,KAAZ,EAAmB,IAAnB,EAAyBC,KAAzB,CAA7B,EAA+DE,UAAU,CAAEJ,QAAF,EAAYC,KAAZ,EAAmB,KAAnB,EAA0BC,KAA1B,CAAzE,CAAP;AACA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,UAAT,CAAqBJ,QAArB,EAA+BC,KAA/B,EAAsCI,QAAtC,EAAgDH,KAAhD,EAAwD;AACvD;AACA;AACA,MAAII,IAAI,GAAGN,QAAQ,CAACO,QAAT,KAAuBF,QAAQ,GAAGL,QAAQ,CAACQ,UAAZ,GAAyBR,QAAQ,CAACS,SAAjE,CAAX;AAEA,MAAIC,QAAQ,GAAG,IAAf;;AAEA,SAAQJ,IAAI,IAAIA,IAAI,CAACK,YAAL,CAAmB,UAAnB,KAAmCV,KAAnD,EAA2D;AAC1DS,IAAAA,QAAQ,GAAGJ,IAAX;AACAA,IAAAA,IAAI,GAAGD,QAAQ,GAAGC,IAAI,CAACM,eAAR,GAA0BN,IAAI,CAACO,WAA9C;AACA;;AAED,SAAOH,QAAQ,GAAGR,KAAK,CAACY,gBAAN,CAAwBJ,QAAxB,EAAkCL,QAAQ,GAAG,QAAH,GAAc,OAAxD,CAAH,GAAuEL,QAAtF;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/findlinkrange\n */\n\n/**\n * Returns a range containing the entire link in which the given `position` is placed.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange( position, value, model ) {\n\treturn model.createRange( _findBound( position, value, true, model ), _findBound( position, value, false, model ) );\n}\n\n// Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\nfunction _findBound( position, value, lookBack, model ) {\n\t// Get node before or after position (depends on `lookBack` flag).\n\t// When position is inside text node then start searching from text node.\n\tlet node = position.textNode || ( lookBack ? position.nodeBefore : position.nodeAfter );\n\n\tlet lastNode = null;\n\n\twhile ( node && node.getAttribute( 'linkHref' ) == value ) {\n\t\tlastNode = node;\n\t\tnode = lookBack ? node.previousSibling : node.nextSibling;\n\t}\n\n\treturn lastNode ? model.createPositionAt( lastNode, lookBack ? 'before' : 'after' ) : position;\n}\n"]},"metadata":{},"sourceType":"module"}