{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Autoformat extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Autoformat';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    this._addListAutoformats();\n\n    this._addBasicStylesAutoformats();\n\n    this._addHeadingAutoformats();\n\n    this._addBlockQuoteAutoformats();\n  }\n  /**\n   * Adds autoformatting related to the {@link module:list/list~List}.\n   *\n   * When typed:\n   * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n   * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n   *\n   * @private\n   */\n\n\n  _addListAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bulletedList')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^[*-]\\s$/, 'bulletedList');\n    }\n\n    if (commands.get('numberedList')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^1[.|)]\\s$/, 'numberedList');\n    }\n  }\n  /**\n   * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n   * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n   *\n   * When typed:\n   * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n   * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n   * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n   * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n   * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n   *\n   * @private\n   */\n\n\n  _addBasicStylesAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bold')) {\n      /* eslint-disable no-new */\n      const boldCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'bold');\n      new InlineAutoformatEditing(this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback);\n      new InlineAutoformatEditing(this.editor, /(__)([^_]+)(__)$/g, boldCallback);\n      /* eslint-enable no-new */\n    }\n\n    if (commands.get('italic')) {\n      /* eslint-disable no-new */\n      const italicCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'italic'); // The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n      // text before the pattern (e.g. `(?:^|[^\\*])`).\n\n      new InlineAutoformatEditing(this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback);\n      new InlineAutoformatEditing(this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback);\n      /* eslint-enable no-new */\n    }\n\n    if (commands.get('code')) {\n      /* eslint-disable no-new */\n      const codeCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'code');\n      new InlineAutoformatEditing(this.editor, /(`)([^`]+)(`)$/g, codeCallback);\n      /* eslint-enable no-new */\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:heading/heading~Heading}.\n   *\n   * It is using a number at the end of the command name to associate it with the proper trigger:\n   *\n   * * `heading` with value `heading1` will be executed when typing `#`,\n   * * `heading` with value `heading2` will be executed when typing `##`,\n   * * ... up to `heading6` and `######`.\n   *\n   * @private\n   */\n\n\n  _addHeadingAutoformats() {\n    const command = this.editor.commands.get('heading');\n\n    if (command) {\n      command.modelElements.filter(name => name.match(/^heading[1-6]$/)).forEach(commandValue => {\n        const level = commandValue[7];\n        const pattern = new RegExp(`^(#{${level}})\\\\s$`); // eslint-disable-next-line no-new\n\n        new BlockAutoformatEditing(this.editor, pattern, () => {\n          if (!command.isEnabled) {\n            return false;\n          }\n\n          this.editor.execute('heading', {\n            value: commandValue\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n   *\n   * When typed:\n   * * `> ` &ndash; A paragraph will be changed to a block quote.\n   *\n   * @private\n   */\n\n\n  _addBlockQuoteAutoformats() {\n    if (this.editor.commands.get('blockQuote')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^>\\s$/, 'blockQuote');\n    }\n  }\n\n} // Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\n\nfunction getCallbackFunctionForInlineAutoformat(editor, attributeKey) {\n  return (writer, rangesToFormat) => {\n    const command = editor.commands.get(attributeKey);\n\n    if (!command.isEnabled) {\n      return false;\n    }\n\n    const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n\n    for (const range of validRanges) {\n      writer.setAttribute(attributeKey, true, range);\n    } // After applying attribute to the text, remove given attribute from the selection.\n    // This way user is able to type a text without attribute used by auto formatter.\n\n\n    writer.removeSelectionAttribute(attributeKey);\n  };\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js"],"names":["BlockAutoformatEditing","InlineAutoformatEditing","Plugin","Autoformat","pluginName","afterInit","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","commands","editor","get","boldCallback","getCallbackFunctionForInlineAutoformat","italicCallback","codeCallback","command","modelElements","filter","name","match","forEach","commandValue","level","pattern","RegExp","isEnabled","execute","value","attributeKey","writer","rangesToFormat","validRanges","model","schema","getValidRanges","range","setAttribute","removeSelectionAttribute"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\n\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class Autoformat extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'Autoformat';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tafterInit() {\n\t\tthis._addListAutoformats();\n\t\tthis._addBasicStylesAutoformats();\n\t\tthis._addHeadingAutoformats();\n\t\tthis._addBlockQuoteAutoformats();\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n\t *\n\t * @private\n\t */\n\t_addListAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bulletedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^[*-]\\s$/, 'bulletedList' );\n\t\t}\n\n\t\tif ( commands.get( 'numberedList' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^1[.|)]\\s$/, 'numberedList' );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n\t *\n\t * @private\n\t */\n\t_addBasicStylesAutoformats() {\n\t\tconst commands = this.editor.commands;\n\n\t\tif ( commands.get( 'bold' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst boldCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'bold' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(__)([^_]+)(__)$/g, boldCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'italic' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst italicCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'italic' );\n\n\t\t\t// The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n\t\t\t// text before the pattern (e.g. `(?:^|[^\\*])`).\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback );\n\t\t\tnew InlineAutoformatEditing( this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\n\t\tif ( commands.get( 'code' ) ) {\n\t\t\t/* eslint-disable no-new */\n\t\t\tconst codeCallback = getCallbackFunctionForInlineAutoformat( this.editor, 'code' );\n\n\t\t\tnew InlineAutoformatEditing( this.editor, /(`)([^`]+)(`)$/g, codeCallback );\n\t\t\t/* eslint-enable no-new */\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with value `heading1` will be executed when typing `#`,\n\t * * `heading` with value `heading2` will be executed when typing `##`,\n\t * * ... up to `heading6` and `######`.\n\t *\n\t * @private\n\t */\n\t_addHeadingAutoformats() {\n\t\tconst command = this.editor.commands.get( 'heading' );\n\n\t\tif ( command ) {\n\t\t\tcommand.modelElements\n\t\t\t\t.filter( name => name.match( /^heading[1-6]$/ ) )\n\t\t\t\t.forEach( commandValue => {\n\t\t\t\t\tconst level = commandValue[ 7 ];\n\t\t\t\t\tconst pattern = new RegExp( `^(#{${ level }})\\\\s$` );\n\n\t\t\t\t\t// eslint-disable-next-line no-new\n\t\t\t\t\tnew BlockAutoformatEditing( this.editor, pattern, () => {\n\t\t\t\t\t\tif ( !command.isEnabled ) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.editor.execute( 'heading', { value: commandValue } );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t *\n\t * @private\n\t */\n\t_addBlockQuoteAutoformats() {\n\t\tif ( this.editor.commands.get( 'blockQuote' ) ) {\n\t\t\t// eslint-disable-next-line no-new\n\t\t\tnew BlockAutoformatEditing( this.editor, /^>\\s$/, 'blockQuote' );\n\t\t}\n\t}\n}\n\n// Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\nfunction getCallbackFunctionForInlineAutoformat( editor, attributeKey ) {\n\treturn ( writer, rangesToFormat ) => {\n\t\tconst command = editor.commands.get( attributeKey );\n\n\t\tif ( !command.isEnabled ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, attributeKey );\n\n\t\tfor ( const range of validRanges ) {\n\t\t\twriter.setAttribute( attributeKey, true, range );\n\t\t}\n\n\t\t// After applying attribute to the text, remove given attribute from the selection.\n\t\t// This way user is able to type a text without attribute used by auto formatter.\n\t\twriter.removeSelectionAttribute( attributeKey );\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}