{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\nimport '../../theme/components/toolbar/toolbar.css';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\n\nexport default class ToolbarView extends View {\n  /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const t = this.t;\n    /**\n     * Label used by assistive technologies to describe this toolbar element.\n     *\n     * @default 'Editor toolbar'\n     * @member {String} #ariaLabel\n     */\n\n    this.set('ariaLabel', t('Editor toolbar'));\n    /**\n     * Collection of the toolbar items (like buttons).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about DOM focus in the list.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Controls the orientation of toolbar items.\n     *\n     * @observable\n     * @member {Boolean} #isVertical\n     */\n\n    this.set('isVertical', false);\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * Helps cycling over focusable {@link #items} in the toolbar.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate toolbar items backwards using the arrow[left,up] keys.\n        focusPrevious: ['arrowleft', 'arrowup'],\n        // Navigate toolbar items forwards using the arrow[right,down] keys.\n        focusNext: ['arrowright', 'arrowdown']\n      }\n    });\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-toolbar', bind.if('isVertical', 'ck-toolbar_vertical'), bind.to('class')],\n        role: 'toolbar',\n        'aria-label': bind.to('ariaLabel')\n      },\n      children: this.items,\n      on: {\n        // https://github.com/ckeditor/ckeditor5-ui/issues/206\n        mousedown: preventDefault(this)\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * Focuses the first focusable in {@link #items}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable in {@link #items}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n  /**\n   * A utility which expands a plain toolbar configuration into\n   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n   *\n   * @param {Array.<String>} config The toolbar items config.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   */\n\n\n  fillFromConfig(config, factory) {\n    config.map(name => {\n      if (name == '|') {\n        this.items.add(new ToolbarSeparatorView());\n      } else if (factory.has(name)) {\n        this.items.add(factory.create(name));\n      } else {\n        /**\n         * There was a problem processing the configuration of the toolbar. The item with the given\n         * name does not exist so it was omitted when rendering the toolbar.\n         *\n         * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n         * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n         *\n         * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n         * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n         *\n         * You can use the following snippet to retrieve all available toolbar items:\n         *\n         *\t\tArray.from( editor.ui.componentFactory.names() );\n         *\n         * @error toolbarview-item-unavailable\n         * @param {String} name The name of the component.\n         */\n        console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), {\n          name\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js"],"names":["View","FocusTracker","FocusCycler","KeystrokeHandler","ToolbarSeparatorView","preventDefault","attachLinkToDocumentation","ToolbarView","constructor","locale","bind","bindTemplate","t","set","items","createCollection","focusTracker","keystrokes","_focusCycler","focusables","keystrokeHandler","actions","focusPrevious","focusNext","setTemplate","tag","attributes","class","if","to","role","children","on","mousedown","render","item","add","element","evt","remove","listenTo","focus","focusFirst","focusLast","fillFromConfig","config","factory","map","name","has","create","console","warn"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarview\n */\n\n/* globals console */\n\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport preventDefault from '../bindings/preventdefault.js';\n\nimport '../../theme/components/toolbar/toolbar.css';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n\t/**\n\t * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n\t *\n\t * Also see {@link #render}.\n\t *\n\t * @param {module:utils/locale~Locale} locale The localization services instance.\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst t = this.t;\n\n\t\t/**\n\t\t * Label used by assistive technologies to describe this toolbar element.\n\t\t *\n\t\t * @default 'Editor toolbar'\n\t\t * @member {String} #ariaLabel\n\t\t */\n\t\tthis.set( 'ariaLabel', t( 'Editor toolbar' ) );\n\n\t\t/**\n\t\t * Collection of the toolbar items (like buttons).\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.items = this.createCollection();\n\n\t\t/**\n\t\t * Tracks information about DOM focus in the list.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/focustracker~FocusTracker}\n\t\t */\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t/**\n\t\t * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:utils/keystrokehandler~KeystrokeHandler}\n\t\t */\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t/**\n\t\t * Controls the orientation of toolbar items.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isVertical\n\t\t */\n\t\tthis.set( 'isVertical', false );\n\n\t\t/**\n\t\t * An additional CSS class added to the {@link #element}.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #class\n\t\t */\n\t\tthis.set( 'class' );\n\n\t\t/**\n\t\t * Helps cycling over focusable {@link #items} in the toolbar.\n\t\t *\n\t\t * @readonly\n\t\t * @protected\n\t\t * @member {module:ui/focuscycler~FocusCycler}\n\t\t */\n\t\tthis._focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate toolbar items backwards using the arrow[left,up] keys.\n\t\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n\n\t\t\t\t// Navigate toolbar items forwards using the arrow[right,down] keys.\n\t\t\t\tfocusNext: [ 'arrowright', 'arrowdown' ]\n\t\t\t}\n\t\t} );\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-toolbar',\n\t\t\t\t\tbind.if( 'isVertical', 'ck-toolbar_vertical' ),\n\t\t\t\t\tbind.to( 'class' )\n\t\t\t\t],\n\t\t\t\trole: 'toolbar',\n\t\t\t\t'aria-label': bind.to( 'ariaLabel' )\n\t\t\t},\n\n\t\t\tchildren: this.items,\n\n\t\t\ton: {\n\t\t\t\t// https://github.com/ckeditor/ckeditor5-ui/issues/206\n\t\t\t\tmousedown: preventDefault( this )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\t/**\n\t * Focuses the first focusable in {@link #items}.\n\t */\n\tfocus() {\n\t\tthis._focusCycler.focusFirst();\n\t}\n\n\t/**\n\t * Focuses the last focusable in {@link #items}.\n\t */\n\tfocusLast() {\n\t\tthis._focusCycler.focusLast();\n\t}\n\n\t/**\n\t * A utility which expands a plain toolbar configuration into\n\t * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n\t *\n\t * @param {Array.<String>} config The toolbar items config.\n\t * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n\t */\n\tfillFromConfig( config, factory ) {\n\t\tconfig.map( name => {\n\t\t\tif ( name == '|' ) {\n\t\t\t\tthis.items.add( new ToolbarSeparatorView() );\n\t\t\t} else if ( factory.has( name ) ) {\n\t\t\t\tthis.items.add( factory.create( name ) );\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * There was a problem processing the configuration of the toolbar. The item with the given\n\t\t\t\t * name does not exist so it was omitted when rendering the toolbar.\n\t\t\t\t *\n\t\t\t\t * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n\t\t\t\t * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n\t\t\t\t *\n\t\t\t\t * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n\t\t\t\t * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n\t\t\t\t *\n\t\t\t\t * You can use the following snippet to retrieve all available toolbar items:\n\t\t\t\t *\n\t\t\t\t *\t\tArray.from( editor.ui.componentFactory.names() );\n\t\t\t\t *\n\t\t\t\t * @error toolbarview-item-unavailable\n\t\t\t\t * @param {String} name The name of the component.\n\t\t\t\t */\n\t\t\t\tconsole.warn( attachLinkToDocumentation(\n\t\t\t\t\t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}