{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\n\nexport function viewFigureToModel() {\n  return dispatcher => {\n    dispatcher.on('element:figure', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    // Do not convert if this is not an \"image figure\".\n    if (!conversionApi.consumable.test(data.viewItem, {\n      name: true,\n      classes: 'image'\n    })) {\n      return;\n    } // Find an image element inside the figure element.\n\n\n    const viewImage = Array.from(data.viewItem.getChildren()).find(viewChild => viewChild.is('img')); // Do not convert if image element is absent, is missing src attribute or was already converted.\n\n    if (!viewImage || !viewImage.hasAttribute('src') || !conversionApi.consumable.test(viewImage, {\n      name: true\n    })) {\n      return;\n    } // Convert view image to model image.\n\n\n    const conversionResult = conversionApi.convertItem(viewImage, data.modelCursor); // Get image element from conversion result.\n\n    const modelImage = first(conversionResult.modelRange.getItems()); // When image wasn't successfully converted then finish conversion.\n\n    if (!modelImage) {\n      return;\n    } // Convert rest of the figure element's children as an image children.\n\n\n    conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelImage, 0)); // Set image range as conversion result.\n\n    data.modelRange = conversionResult.modelRange; // Continue conversion where image conversion ends.\n\n    data.modelCursor = conversionResult.modelCursor;\n  }\n}\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @returns {Function}\n */\n\nexport function srcsetAttributeConverter() {\n  return dispatcher => {\n    dispatcher.on('attribute:srcset:image', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const writer = conversionApi.writer;\n    const figure = conversionApi.mapper.toViewElement(data.item);\n    const img = figure.getChild(0);\n\n    if (data.attributeNewValue === null) {\n      const srcset = data.attributeOldValue;\n\n      if (srcset.data) {\n        writer.removeAttribute('srcset', img);\n        writer.removeAttribute('sizes', img);\n\n        if (srcset.width) {\n          writer.removeAttribute('width', img);\n        }\n      }\n    } else {\n      const srcset = data.attributeNewValue;\n\n      if (srcset.data) {\n        writer.setAttribute('srcset', srcset.data, img); // Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\n        writer.setAttribute('sizes', '100vw', img);\n\n        if (srcset.width) {\n          writer.setAttribute('width', srcset.width, img);\n        }\n      }\n    }\n  }\n}\nexport function modelToViewAttributeConverter(attributeKey) {\n  return dispatcher => {\n    dispatcher.on(`attribute:${attributeKey}:image`, converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const viewWriter = conversionApi.writer;\n    const figure = conversionApi.mapper.toViewElement(data.item);\n    const img = figure.getChild(0);\n\n    if (data.attributeNewValue !== null) {\n      viewWriter.setAttribute(data.attributeKey, data.attributeNewValue, img);\n    } else {\n      viewWriter.removeAttribute(data.attributeKey, img);\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/image/converters.js"],"names":["first","viewFigureToModel","dispatcher","on","converter","evt","data","conversionApi","consumable","test","viewItem","name","classes","viewImage","Array","from","getChildren","find","viewChild","is","hasAttribute","conversionResult","convertItem","modelCursor","modelImage","modelRange","getItems","convertChildren","writer","createPositionAt","srcsetAttributeConverter","consume","item","figure","mapper","toViewElement","img","getChild","attributeNewValue","srcset","attributeOldValue","removeAttribute","width","setAttribute","modelToViewAttributeConverter","attributeKey","viewWriter"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\nexport function viewFigureToModel() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'element:figure', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\t// Do not convert if this is not an \"image figure\".\n\t\tif ( !conversionApi.consumable.test( data.viewItem, { name: true, classes: 'image' } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Find an image element inside the figure element.\n\t\tconst viewImage = Array.from( data.viewItem.getChildren() ).find( viewChild => viewChild.is( 'img' ) );\n\n\t\t// Do not convert if image element is absent, is missing src attribute or was already converted.\n\t\tif ( !viewImage || !viewImage.hasAttribute( 'src' ) || !conversionApi.consumable.test( viewImage, { name: true } ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert view image to model image.\n\t\tconst conversionResult = conversionApi.convertItem( viewImage, data.modelCursor );\n\n\t\t// Get image element from conversion result.\n\t\tconst modelImage = first( conversionResult.modelRange.getItems() );\n\n\t\t// When image wasn't successfully converted then finish conversion.\n\t\tif ( !modelImage ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert rest of the figure element's children as an image children.\n\t\tconversionApi.convertChildren( data.viewItem, conversionApi.writer.createPositionAt( modelImage, 0 ) );\n\n\t\t// Set image range as conversion result.\n\t\tdata.modelRange = conversionResult.modelRange;\n\n\t\t// Continue conversion where image conversion ends.\n\t\tdata.modelCursor = conversionResult.modelCursor;\n\t}\n}\n\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @returns {Function}\n */\nexport function srcsetAttributeConverter() {\n\treturn dispatcher => {\n\t\tdispatcher.on( 'attribute:srcset:image', converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst writer = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue === null ) {\n\t\t\tconst srcset = data.attributeOldValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.removeAttribute( 'srcset', img );\n\t\t\t\twriter.removeAttribute( 'sizes', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.removeAttribute( 'width', img );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst srcset = data.attributeNewValue;\n\n\t\t\tif ( srcset.data ) {\n\t\t\t\twriter.setAttribute( 'srcset', srcset.data, img );\n\t\t\t\t// Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\t\t\t\twriter.setAttribute( 'sizes', '100vw', img );\n\n\t\t\t\tif ( srcset.width ) {\n\t\t\t\t\twriter.setAttribute( 'width', srcset.width, img );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function modelToViewAttributeConverter( attributeKey ) {\n\treturn dispatcher => {\n\t\tdispatcher.on( `attribute:${ attributeKey }:image`, converter );\n\t};\n\n\tfunction converter( evt, data, conversionApi ) {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewWriter = conversionApi.writer;\n\t\tconst figure = conversionApi.mapper.toViewElement( data.item );\n\t\tconst img = figure.getChild( 0 );\n\n\t\tif ( data.attributeNewValue !== null ) {\n\t\t\tviewWriter.setAttribute( data.attributeKey, data.attributeNewValue, img );\n\t\t} else {\n\t\t\tviewWriter.removeAttribute( data.attributeKey, img );\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}