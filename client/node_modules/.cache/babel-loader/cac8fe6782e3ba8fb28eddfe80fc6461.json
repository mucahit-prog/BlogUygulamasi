{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { createDropdown, addToolbarToDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { isSupported } from './utils';\nimport alignLeftIcon from '../theme/icons/align-left.svg';\nimport alignRightIcon from '../theme/icons/align-right.svg';\nimport alignCenterIcon from '../theme/icons/align-center.svg';\nimport alignJustifyIcon from '../theme/icons/align-justify.svg';\nconst icons = new Map([['left', alignLeftIcon], ['right', alignRightIcon], ['center', alignCenterIcon], ['justify', alignJustifyIcon]]);\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AlignmentUI extends Plugin {\n  /**\n   * Returns the localized option titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:alignment/alignment~AlignmentConfig#options} are available:\n   *\n   * * `'left'`,\n   * * `'right'`,\n   * * `'center'`,\n   * * `'justify'`.\n   *\n   * @readonly\n   * @type {Object.<String,String>}\n   */\n  get localizedOptionTitles() {\n    const t = this.editor.t;\n    return {\n      'left': t('Align left'),\n      'right': t('Align right'),\n      'center': t('Align center'),\n      'justify': t('Justify')\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'AlignmentUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const componentFactory = editor.ui.componentFactory;\n    const t = editor.t;\n    const options = editor.config.get('alignment.options');\n    options.filter(isSupported).forEach(option => this._addButton(option));\n    componentFactory.add('alignment', locale => {\n      const dropdownView = createDropdown(locale); // Add existing alignment buttons to dropdown's toolbar.\n\n      const buttons = options.map(option => componentFactory.create(`alignment:${option}`));\n      addToolbarToDropdown(dropdownView, buttons); // Configure dropdown properties an behavior.\n\n      dropdownView.buttonView.set({\n        label: t('Text alignment'),\n        tooltip: true\n      });\n      dropdownView.toolbarView.isVertical = true;\n      dropdownView.toolbarView.ariaLabel = t('Text alignment toolbar');\n      dropdownView.extendTemplate({\n        attributes: {\n          class: 'ck-alignment-dropdown'\n        }\n      }); // The default icon depends on the direction of the content.\n\n      const defaultIcon = locale.contentLanguageDirection === 'rtl' ? alignRightIcon : alignLeftIcon; // Change icon to reflect current selection's alignment.\n\n      dropdownView.buttonView.bind('icon').toMany(buttons, 'isOn', (...areActive) => {\n        // Get the index of an active button.\n        const index = areActive.findIndex(value => value); // If none of the commands is active, display either defaultIcon or the first button's icon.\n\n        if (index < 0) {\n          return defaultIcon;\n        } // Return active button's icon.\n\n\n        return buttons[index].icon;\n      }); // Enable button if any of the buttons is enabled.\n\n      dropdownView.bind('isEnabled').toMany(buttons, 'isEnabled', (...areEnabled) => areEnabled.some(isEnabled => isEnabled));\n      return dropdownView;\n    });\n  }\n  /**\n   * Helper method for initializing the button and linking it with an appropriate command.\n   *\n   * @private\n   * @param {String} option The name of the alignment option for which the button is added.\n   */\n\n\n  _addButton(option) {\n    const editor = this.editor;\n    editor.ui.componentFactory.add(`alignment:${option}`, locale => {\n      const command = editor.commands.get('alignment');\n      const buttonView = new ButtonView(locale);\n      buttonView.set({\n        label: this.localizedOptionTitles[option],\n        icon: icons.get(option),\n        tooltip: true,\n        isToggleable: true\n      }); // Bind button model to command.\n\n      buttonView.bind('isEnabled').to(command);\n      buttonView.bind('isOn').to(command, 'value', value => value === option); // Execute command.\n\n      this.listenTo(buttonView, 'execute', () => {\n        editor.execute('alignment', {\n          value: option\n        });\n        editor.editing.view.focus();\n      });\n      return buttonView;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-alignment/src/alignmentui.js"],"names":["Plugin","ButtonView","createDropdown","addToolbarToDropdown","isSupported","alignLeftIcon","alignRightIcon","alignCenterIcon","alignJustifyIcon","icons","Map","AlignmentUI","localizedOptionTitles","t","editor","pluginName","init","componentFactory","ui","options","config","get","filter","forEach","option","_addButton","add","locale","dropdownView","buttons","map","create","buttonView","set","label","tooltip","toolbarView","isVertical","ariaLabel","extendTemplate","attributes","class","defaultIcon","contentLanguageDirection","bind","toMany","areActive","index","findIndex","value","icon","areEnabled","some","isEnabled","command","commands","isToggleable","to","listenTo","execute","editing","view","focus"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { createDropdown, addToolbarToDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\n\nimport { isSupported } from './utils';\n\nimport alignLeftIcon from '../theme/icons/align-left.svg';\nimport alignRightIcon from '../theme/icons/align-right.svg';\nimport alignCenterIcon from '../theme/icons/align-center.svg';\nimport alignJustifyIcon from '../theme/icons/align-justify.svg';\n\nconst icons = new Map( [\n\t[ 'left', alignLeftIcon ],\n\t[ 'right', alignRightIcon ],\n\t[ 'center', alignCenterIcon ],\n\t[ 'justify', alignJustifyIcon ]\n] );\n\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class AlignmentUI extends Plugin {\n\t/**\n\t * Returns the localized option titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:alignment/alignment~AlignmentConfig#options} are available:\n\t *\n\t * * `'left'`,\n\t * * `'right'`,\n\t * * `'center'`,\n\t * * `'justify'`.\n\t *\n\t * @readonly\n\t * @type {Object.<String,String>}\n\t */\n\tget localizedOptionTitles() {\n\t\tconst t = this.editor.t;\n\n\t\treturn {\n\t\t\t'left': t( 'Align left' ),\n\t\t\t'right': t( 'Align right' ),\n\t\t\t'center': t( 'Align center' ),\n\t\t\t'justify': t( 'Justify' )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'AlignmentUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst componentFactory = editor.ui.componentFactory;\n\t\tconst t = editor.t;\n\t\tconst options = editor.config.get( 'alignment.options' );\n\n\t\toptions\n\t\t\t.filter( isSupported )\n\t\t\t.forEach( option => this._addButton( option ) );\n\n\t\tcomponentFactory.add( 'alignment', locale => {\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\t// Add existing alignment buttons to dropdown's toolbar.\n\t\t\tconst buttons = options.map( option => componentFactory.create( `alignment:${ option }` ) );\n\t\t\taddToolbarToDropdown( dropdownView, buttons );\n\n\t\t\t// Configure dropdown properties an behavior.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\tlabel: t( 'Text alignment' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tdropdownView.toolbarView.isVertical = true;\n\t\t\tdropdownView.toolbarView.ariaLabel = t( 'Text alignment toolbar' );\n\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: 'ck-alignment-dropdown'\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// The default icon depends on the direction of the content.\n\t\t\tconst defaultIcon = locale.contentLanguageDirection === 'rtl' ? alignRightIcon : alignLeftIcon;\n\n\t\t\t// Change icon to reflect current selection's alignment.\n\t\t\tdropdownView.buttonView.bind( 'icon' ).toMany( buttons, 'isOn', ( ...areActive ) => {\n\t\t\t\t// Get the index of an active button.\n\t\t\t\tconst index = areActive.findIndex( value => value );\n\n\t\t\t\t// If none of the commands is active, display either defaultIcon or the first button's icon.\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\treturn defaultIcon;\n\t\t\t\t}\n\n\t\t\t\t// Return active button's icon.\n\t\t\t\treturn buttons[ index ].icon;\n\t\t\t} );\n\n\t\t\t// Enable button if any of the buttons is enabled.\n\t\t\tdropdownView.bind( 'isEnabled' ).toMany( buttons, 'isEnabled', ( ...areEnabled ) => areEnabled.some( isEnabled => isEnabled ) );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n\n\t/**\n\t * Helper method for initializing the button and linking it with an appropriate command.\n\t *\n\t * @private\n\t * @param {String} option The name of the alignment option for which the button is added.\n\t */\n\t_addButton( option ) {\n\t\tconst editor = this.editor;\n\n\t\teditor.ui.componentFactory.add( `alignment:${ option }`, locale => {\n\t\t\tconst command = editor.commands.get( 'alignment' );\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: this.localizedOptionTitles[ option ],\n\t\t\t\ticon: icons.get( option ),\n\t\t\t\ttooltip: true,\n\t\t\t\tisToggleable: true\n\t\t\t} );\n\n\t\t\t// Bind button model to command.\n\t\t\tbuttonView.bind( 'isEnabled' ).to( command );\n\t\t\tbuttonView.bind( 'isOn' ).to( command, 'value', value => value === option );\n\n\t\t\t// Execute command.\n\t\t\tthis.listenTo( buttonView, 'execute', () => {\n\t\t\t\teditor.execute( 'alignment', { value: option } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}