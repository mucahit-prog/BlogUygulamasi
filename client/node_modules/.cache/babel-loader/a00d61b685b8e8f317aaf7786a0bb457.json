{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class LabeledInputView extends View {\n  /**\n   * Creates an instance of the labeled input view class.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Function} InputView Constructor of the input view.\n   */\n  constructor(locale, InputView) {\n    super(locale);\n    const inputUid = `ck-input-${uid()}`;\n    const statusUid = `ck-status-${uid()}`;\n    /**\n     * The text of the label.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    this.set('label');\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n\n    this.set('value');\n    /**\n     * Controls whether the component is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * The validation error text. When set, it will be displayed\n     * next to the {@link #inputView} as a typical validation error message.\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** Setting this property to anything but `null` will automatically\n     * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n     * of the {@link #inputView} `true`.\n     *\n     * **Note:** Typing in the {@link #inputView} which fires the\n     * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n     * resets this property back to `null`, indicating that the input field can be re–validated.\n     *\n     * @observable\n     * @member {String|null} #errorText\n     */\n\n    this.set('errorText', null);\n    /**\n     * The additional information text displayed next to the {@link #inputView} which can\n     * be used to inform the user about the purpose of the input, provide help or hints.\n     *\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n     * latter always takes precedence: if the {@link #errorText} is set, it replaces\n     * {@link #errorText} for as long as the value of the input is invalid.\n     *\n     * @observable\n     * @member {String|null} #infoText\n     */\n\n    this.set('infoText', null);\n    /**\n     * The label view.\n     *\n     * @member {module:ui/label/labelview~LabelView} #labelView\n     */\n\n    this.labelView = this._createLabelView(inputUid);\n    /**\n     * The input view.\n     *\n     * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n     */\n\n    this.inputView = this._createInputView(InputView, inputUid, statusUid);\n    /**\n     * The status view for the {@link #inputView}. It displays {@link #errorText} and\n     * {@link #infoText}.\n     *\n     * @member {module:ui/view~View} #statusView\n     */\n\n    this.statusView = this._createStatusView(statusUid);\n    /**\n     * The combined status text made of {@link #errorText} and {@link #infoText}.\n     * Note that when present, {@link #errorText} always takes precedence in the\n     * status.\n     *\n     * @see #errorText\n     * @see #infoText\n     * @see #statusView\n     * @private\n     * @observable\n     * @member {String|null} #_statusText\n     */\n\n    this.bind('_statusText').to(this, 'errorText', this, 'infoText', (errorText, infoText) => errorText || infoText);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-input', bind.if('isReadOnly', 'ck-disabled')]\n      },\n      children: [this.labelView, this.inputView, this.statusView]\n    });\n  }\n  /**\n   * Creates label view class instance and bind with view.\n   *\n   * @private\n   * @param {String} id Unique id to set as labelView#for attribute.\n   * @returns {module:ui/label/labelview~LabelView}\n   */\n\n\n  _createLabelView(id) {\n    const labelView = new LabelView(this.locale);\n    labelView.for = id;\n    labelView.bind('text').to(this, 'label');\n    return labelView;\n  }\n  /**\n   * Creates input view class instance and bind with view.\n   *\n   * @private\n   * @param {Function} InputView Input view constructor.\n   * @param {String} inputUid Unique id to set as inputView#id attribute.\n   * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n   * @returns {module:ui/inputtext/inputtextview~InputTextView}\n   */\n\n\n  _createInputView(InputView, inputUid, statusUid) {\n    const inputView = new InputView(this.locale, statusUid);\n    inputView.id = inputUid;\n    inputView.ariaDescribedById = statusUid;\n    inputView.bind('value').to(this);\n    inputView.bind('isReadOnly').to(this);\n    inputView.bind('hasError').to(this, 'errorText', value => !!value);\n    inputView.on('input', () => {\n      // UX: Make the error text disappear and disable the error indicator as the user\n      // starts fixing the errors.\n      this.errorText = null;\n    });\n    return inputView;\n  }\n  /**\n   * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n   * next to the {@link #inputView}. See {@link #_statusText}.\n   *\n   * @private\n   * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createStatusView(statusUid) {\n    const statusView = new View(this.locale);\n    const bind = this.bindTemplate;\n    statusView.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-input__status', bind.if('errorText', 'ck-labeled-input__status_error'), bind.if('_statusText', 'ck-hidden', value => !value)],\n        id: statusUid,\n        role: bind.if('errorText', 'alert')\n      },\n      children: [{\n        text: bind.to('_statusText')\n      }]\n    });\n    return statusView;\n  }\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n\n\n  select() {\n    this.inputView.select();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this.inputView.focus();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview.js"],"names":["View","uid","LabelView","LabeledInputView","constructor","locale","InputView","inputUid","statusUid","set","labelView","_createLabelView","inputView","_createInputView","statusView","_createStatusView","bind","to","errorText","infoText","bindTemplate","setTemplate","tag","attributes","class","if","children","id","for","ariaDescribedById","value","on","role","text","select","focus"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\n\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\nexport default class LabeledInputView extends View {\n\t/**\n\t * Creates an instance of the labeled input view class.\n\t *\n\t * @param {module:utils/locale~Locale} locale The locale instance.\n\t * @param {Function} InputView Constructor of the input view.\n\t */\n\tconstructor( locale, InputView ) {\n\t\tsuper( locale );\n\n\t\tconst inputUid = `ck-input-${ uid() }`;\n\t\tconst statusUid = `ck-status-${ uid() }`;\n\n\t\t/**\n\t\t * The text of the label.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #label\n\t\t */\n\t\tthis.set( 'label' );\n\n\t\t/**\n\t\t * The value of the input.\n\t\t *\n\t\t * @observable\n\t\t * @member {String} #value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * Controls whether the component is in read-only mode.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} #isReadOnly\n\t\t */\n\t\tthis.set( 'isReadOnly', false );\n\n\t\t/**\n\t\t * The validation error text. When set, it will be displayed\n\t\t * next to the {@link #inputView} as a typical validation error message.\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** Setting this property to anything but `null` will automatically\n\t\t * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n\t\t * of the {@link #inputView} `true`.\n\t\t *\n\t\t * **Note:** Typing in the {@link #inputView} which fires the\n\t\t * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n\t\t * resets this property back to `null`, indicating that the input field can be re–validated.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #errorText\n\t\t */\n\t\tthis.set( 'errorText', null );\n\n\t\t/**\n\t\t * The additional information text displayed next to the {@link #inputView} which can\n\t\t * be used to inform the user about the purpose of the input, provide help or hints.\n\t\t *\n\t\t * Set it to `null` to hide the message.\n\t\t *\n\t\t * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n\t\t * latter always takes precedence: if the {@link #errorText} is set, it replaces\n\t\t * {@link #errorText} for as long as the value of the input is invalid.\n\t\t *\n\t\t * @observable\n\t\t * @member {String|null} #infoText\n\t\t */\n\t\tthis.set( 'infoText', null );\n\n\t\t/**\n\t\t * The label view.\n\t\t *\n\t\t * @member {module:ui/label/labelview~LabelView} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( inputUid );\n\n\t\t/**\n\t\t * The input view.\n\t\t *\n\t\t * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n\t\t */\n\t\tthis.inputView = this._createInputView( InputView, inputUid, statusUid );\n\n\t\t/**\n\t\t * The status view for the {@link #inputView}. It displays {@link #errorText} and\n\t\t * {@link #infoText}.\n\t\t *\n\t\t * @member {module:ui/view~View} #statusView\n\t\t */\n\t\tthis.statusView = this._createStatusView( statusUid );\n\n\t\t/**\n\t\t * The combined status text made of {@link #errorText} and {@link #infoText}.\n\t\t * Note that when present, {@link #errorText} always takes precedence in the\n\t\t * status.\n\t\t *\n\t\t * @see #errorText\n\t\t * @see #infoText\n\t\t * @see #statusView\n\t\t * @private\n\t\t * @observable\n\t\t * @member {String|null} #_statusText\n\t\t */\n\t\tthis.bind( '_statusText' ).to(\n\t\t\tthis, 'errorText',\n\t\t\tthis, 'infoText',\n\t\t\t( errorText, infoText ) => errorText || infoText\n\t\t);\n\n\t\tconst bind = this.bindTemplate;\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input',\n\t\t\t\t\tbind.if( 'isReadOnly', 'ck-disabled' )\n\t\t\t\t]\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tthis.labelView,\n\t\t\t\tthis.inputView,\n\t\t\t\tthis.statusView\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * Creates label view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {String} id Unique id to set as labelView#for attribute.\n\t * @returns {module:ui/label/labelview~LabelView}\n\t */\n\t_createLabelView( id ) {\n\t\tconst labelView = new LabelView( this.locale );\n\n\t\tlabelView.for = id;\n\t\tlabelView.bind( 'text' ).to( this, 'label' );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Creates input view class instance and bind with view.\n\t *\n\t * @private\n\t * @param {Function} InputView Input view constructor.\n\t * @param {String} inputUid Unique id to set as inputView#id attribute.\n\t * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n\t * @returns {module:ui/inputtext/inputtextview~InputTextView}\n\t */\n\t_createInputView( InputView, inputUid, statusUid ) {\n\t\tconst inputView = new InputView( this.locale, statusUid );\n\n\t\tinputView.id = inputUid;\n\t\tinputView.ariaDescribedById = statusUid;\n\t\tinputView.bind( 'value' ).to( this );\n\t\tinputView.bind( 'isReadOnly' ).to( this );\n\t\tinputView.bind( 'hasError' ).to( this, 'errorText', value => !!value );\n\n\t\tinputView.on( 'input', () => {\n\t\t\t// UX: Make the error text disappear and disable the error indicator as the user\n\t\t\t// starts fixing the errors.\n\t\t\tthis.errorText = null;\n\t\t} );\n\n\t\treturn inputView;\n\t}\n\n\t/**\n\t * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n\t * next to the {@link #inputView}. See {@link #_statusText}.\n\t *\n\t * @private\n\t * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createStatusView( statusUid ) {\n\t\tconst statusView = new View( this.locale );\n\t\tconst bind = this.bindTemplate;\n\n\t\tstatusView.setTemplate( {\n\t\t\ttag: 'div',\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-labeled-input__status',\n\t\t\t\t\tbind.if( 'errorText', 'ck-labeled-input__status_error' ),\n\t\t\t\t\tbind.if( '_statusText', 'ck-hidden', value => !value )\n\t\t\t\t],\n\t\t\t\tid: statusUid,\n\t\t\t\trole: bind.if( 'errorText', 'alert' )\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: bind.to( '_statusText' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn statusView;\n\t}\n\n\t/**\n\t * Moves the focus to the input and selects the value.\n\t */\n\tselect() {\n\t\tthis.inputView.select();\n\t}\n\n\t/**\n\t * Focuses the input.\n\t */\n\tfocus() {\n\t\tthis.inputView.focus();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}