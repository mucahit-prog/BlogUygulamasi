{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class EmptyElement extends Element {\n  /**\n   * Creates new instance of EmptyElement.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n   * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n   * @protected\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attributes] Collection of attributes.\n   */\n  constructor(name, attributes, children) {\n    super(name, attributes, children);\n    /**\n     * Returns `null` because filler is not needed for EmptyElements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\temptyElement.is( 'emptyElement' ); // -> true\n   *\t\temptyElement.is( 'element' ); // -> true\n   *\t\temptyElement.is( 'node' ); // -> true\n   *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n   *\t\temptyElement.is( 'view:element' ); // -> true\n   *\t\temptyElement.is( 'view:node' ); // -> true\n   *\n   *\t\temptyElement.is( 'model:element' ); // -> false\n   *\t\temptyElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an empty element, you can also check its\n   * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n   *\n   *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n   *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'emptyElement' || super.is(type);\n    } else {\n      return cutType == 'emptyElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n   * adding any child nodes to EmptyElement.\n   *\n   * @protected\n   */\n\n\n  _insertChild(index, nodes) {\n    if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n      /**\n       * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n       *\n       * @error view-emptyelement-cannot-add\n       */\n      throw new CKEditorError('view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.', [this, nodes]);\n    }\n  }\n\n} // Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\n\nfunction getFillerOffset() {\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js"],"names":["Element","CKEditorError","Node","EmptyElement","constructor","name","attributes","children","getFillerOffset","is","type","cutType","replace","_insertChild","index","nodes","Array","from","length"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,6CAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BH,OAA3B,CAAmC;AACjD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAAEC,IAAF,EAAQC,UAAR,EAAoBC,QAApB,EAA+B;AACzC,UAAOF,IAAP,EAAaC,UAAb,EAAyBC,QAAzB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,EAAE,CAAEC,IAAF,EAAQL,IAAI,GAAG,IAAf,EAAsB;AACvB,UAAMM,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAc,QAAd,EAAwB,EAAxB,CAAhB;;AACA,QAAK,CAACP,IAAN,EAAa;AACZ,aAAOM,OAAO,IAAI,cAAX,IAA6B,MAAMF,EAAN,CAAUC,IAAV,CAApC;AACA,KAFD,MAEO;AACN,aAASC,OAAO,IAAI,cAAX,IAA6BN,IAAI,IAAI,KAAKA,IAA5C,IAAsD,MAAMI,EAAN,CAAUC,IAAV,EAAgBL,IAAhB,CAA7D;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,YAAY,CAAEC,KAAF,EAASC,KAAT,EAAiB;AAC5B,QAAKA,KAAK,KAAMA,KAAK,YAAYb,IAAjB,IAAyBc,KAAK,CAACC,IAAN,CAAYF,KAAZ,EAAoBG,MAApB,GAA6B,CAA5D,CAAV,EAA4E;AAC3E;AACH;AACA;AACA;AACA;AACG,YAAM,IAAIjB,aAAJ,CACL,gFADK,EAEL,CAAE,IAAF,EAAQc,KAAR,CAFK,CAAN;AAIA;AACD;;AA/EgD,C,CAkFlD;AACA;AACA;;AACA,SAASP,eAAT,GAA2B;AAC1B,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\n\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class EmptyElement extends Element {\n\t/**\n\t * Creates new instance of EmptyElement.\n\t *\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n\t * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n\t * @protected\n\t * @param {String} name Node name.\n\t * @param {Object|Iterable} [attributes] Collection of attributes.\n\t */\n\tconstructor( name, attributes, children ) {\n\t\tsuper( name, attributes, children );\n\n\t\t/**\n\t\t * Returns `null` because filler is not needed for EmptyElements.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {null} Always returns null.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\temptyElement.is( 'emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'element' ); // -> true\n\t *\t\temptyElement.is( 'node' ); // -> true\n\t *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n\t *\t\temptyElement.is( 'view:element' ); // -> true\n\t *\t\temptyElement.is( 'view:node' ); // -> true\n\t *\n\t *\t\temptyElement.is( 'model:element' ); // -> false\n\t *\t\temptyElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an empty element, you can also check its\n\t * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n\t *\n\t *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n\t *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n\t *\t\ttext.is( 'img' ); -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name = null ) {\n\t\tconst cutType = type.replace( /^view:/, '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'emptyElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'emptyElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n\t * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n\t * adding any child nodes to EmptyElement.\n\t *\n\t * @protected\n\t */\n\t_insertChild( index, nodes ) {\n\t\tif ( nodes && ( nodes instanceof Node || Array.from( nodes ).length > 0 ) ) {\n\t\t\t/**\n\t\t\t * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n\t\t\t *\n\t\t\t * @error view-emptyelement-cannot-add\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.',\n\t\t\t\t[ this, nodes ]\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\nfunction getFillerOffset() {\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}