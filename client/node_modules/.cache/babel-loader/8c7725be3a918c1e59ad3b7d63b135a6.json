{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Wrapper over the native `FileReader`.\n */\n\nexport default class FileReader {\n  /**\n   * Creates an instance of the FileReader.\n   */\n  constructor() {\n    const reader = new window.FileReader();\n    /**\n     * Instance of native FileReader.\n     *\n     * @private\n     * @member {FileReader} #_reader\n     */\n\n    this._reader = reader;\n    /**\n     * Number of bytes loaded.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #loaded\n     */\n\n    this.set('loaded', 0);\n\n    reader.onprogress = evt => {\n      this.loaded = evt.loaded;\n    };\n  }\n  /**\n   * Returns error that occurred during file reading.\n   *\n   * @returns {Error}\n   */\n\n\n  get error() {\n    return this._reader.error;\n  }\n  /**\n   * Reads the provided file.\n   *\n   * @param {File} file Native File object.\n   * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n   * The promise will be rejected in case of an error or when the reading process is aborted.\n   */\n\n\n  read(file) {\n    const reader = this._reader;\n    this.total = file.size;\n    return new Promise((resolve, reject) => {\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = () => {\n        reject('error');\n      };\n\n      reader.onabort = () => {\n        reject('aborted');\n      };\n\n      this._reader.readAsDataURL(file);\n    });\n  }\n  /**\n   * Aborts file reader.\n   */\n\n\n  abort() {\n    this._reader.abort();\n  }\n\n}\nmix(FileReader, ObservableMixin);","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-upload/src/filereader.js"],"names":["ObservableMixin","mix","FileReader","constructor","reader","window","_reader","set","onprogress","evt","loaded","error","read","file","total","size","Promise","resolve","reject","onload","result","onerror","onabort","readAsDataURL","abort"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA,OAAOA,eAAP,MAA4B,+CAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,CAAiB;AAC/B;AACD;AACA;AACCC,EAAAA,WAAW,GAAG;AACb,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACH,UAAX,EAAf;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKI,OAAL,GAAeF,MAAf;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKG,GAAL,CAAU,QAAV,EAAoB,CAApB;;AAEAH,IAAAA,MAAM,CAACI,UAAP,GAAoBC,GAAG,IAAI;AAC1B,WAAKC,MAAL,GAAcD,GAAG,CAACC,MAAlB;AACA,KAFD;AAGA;AAED;AACD;AACA;AACA;AACA;;;AACU,MAALC,KAAK,GAAG;AACX,WAAO,KAAKL,OAAL,CAAaK,KAApB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,IAAI,CAAEC,IAAF,EAAS;AACZ,UAAMT,MAAM,GAAG,KAAKE,OAApB;AACA,SAAKQ,KAAL,GAAaD,IAAI,CAACE,IAAlB;AAEA,WAAO,IAAIC,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KAAuB;AAC1Cd,MAAAA,MAAM,CAACe,MAAP,GAAgB,MAAM;AACrBF,QAAAA,OAAO,CAAEb,MAAM,CAACgB,MAAT,CAAP;AACA,OAFD;;AAIAhB,MAAAA,MAAM,CAACiB,OAAP,GAAiB,MAAM;AACtBH,QAAAA,MAAM,CAAE,OAAF,CAAN;AACA,OAFD;;AAIAd,MAAAA,MAAM,CAACkB,OAAP,GAAiB,MAAM;AACtBJ,QAAAA,MAAM,CAAE,SAAF,CAAN;AACA,OAFD;;AAIA,WAAKZ,OAAL,CAAaiB,aAAb,CAA4BV,IAA5B;AACA,KAdM,CAAP;AAeA;AAED;AACD;AACA;;;AACCW,EAAAA,KAAK,GAAG;AACP,SAAKlB,OAAL,CAAakB,KAAb;AACA;;AAvE8B;AA0EhCvB,GAAG,CAAEC,UAAF,EAAcF,eAAd,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Wrapper over the native `FileReader`.\n */\nexport default class FileReader {\n\t/**\n\t * Creates an instance of the FileReader.\n\t */\n\tconstructor() {\n\t\tconst reader = new window.FileReader();\n\n\t\t/**\n\t\t * Instance of native FileReader.\n\t\t *\n\t\t * @private\n\t\t * @member {FileReader} #_reader\n\t\t */\n\t\tthis._reader = reader;\n\n\t\t/**\n\t\t * Number of bytes loaded.\n\t\t *\n\t\t * @readonly\n\t\t * @observable\n\t\t * @member {Number} #loaded\n\t\t */\n\t\tthis.set( 'loaded', 0 );\n\n\t\treader.onprogress = evt => {\n\t\t\tthis.loaded = evt.loaded;\n\t\t};\n\t}\n\n\t/**\n\t * Returns error that occurred during file reading.\n\t *\n\t * @returns {Error}\n\t */\n\tget error() {\n\t\treturn this._reader.error;\n\t}\n\n\t/**\n\t * Reads the provided file.\n\t *\n\t * @param {File} file Native File object.\n\t * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n\t * The promise will be rejected in case of an error or when the reading process is aborted.\n\t */\n\tread( file ) {\n\t\tconst reader = this._reader;\n\t\tthis.total = file.size;\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\treader.onload = () => {\n\t\t\t\tresolve( reader.result );\n\t\t\t};\n\n\t\t\treader.onerror = () => {\n\t\t\t\treject( 'error' );\n\t\t\t};\n\n\t\t\treader.onabort = () => {\n\t\t\t\treject( 'aborted' );\n\t\t\t};\n\n\t\t\tthis._reader.readAsDataURL( file );\n\t\t} );\n\t}\n\n\t/**\n\t * Aborts file reader.\n\t */\n\tabort() {\n\t\tthis._reader.abort();\n\t}\n}\n\nmix( FileReader, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}