{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/imagecaptionediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { isImage } from '../image/utils';\nimport { captionElementCreator, getCaptionFromImage, matchImageCaption } from './utils';\n/**\n * The image caption engine plugin.\n *\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\n * to the model document.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageCaptionEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const schema = editor.model.schema;\n    const data = editor.data;\n    const editing = editor.editing;\n    const t = editor.t;\n    /**\n     * The last selected caption editable.\n     * It is used for hiding the editable when it is empty and the image widget is no longer selected.\n     *\n     * @private\n     * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\n     */\n    // Schema configuration.\n\n    schema.register('caption', {\n      allowIn: 'image',\n      allowContentOf: '$block',\n      isLimit: true\n    }); // Add caption element to each image inserted without it.\n\n    editor.model.document.registerPostFixer(writer => this._insertMissingModelCaptionElement(writer)); // View to model converter for the data pipeline.\n\n    editor.conversion.for('upcast').elementToElement({\n      view: matchImageCaption,\n      model: 'caption'\n    }); // Model to view converter for the data pipeline.\n\n    const createCaptionForData = writer => writer.createContainerElement('figcaption');\n\n    data.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForData, false)); // Model to view converter for the editing pipeline.\n\n    const createCaptionForEditing = captionElementCreator(view, t('Enter image caption'));\n    editing.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForEditing)); // Always show caption in view when something is inserted in model.\n\n    editing.downcastDispatcher.on('insert', this._fixCaptionVisibility(data => data.item), {\n      priority: 'high'\n    }); // Hide caption when everything is removed from it.\n\n    editing.downcastDispatcher.on('remove', this._fixCaptionVisibility(data => data.position.parent), {\n      priority: 'high'\n    }); // Update caption visibility on view in post fixer.\n\n    view.document.registerPostFixer(writer => this._updateCaptionVisibility(writer));\n  }\n  /**\n   * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\n   * and then visible when the image is selected.\n   *\n   * @private\n   * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n   * @returns {Boolean} Returns `true` when the view is updated.\n   */\n\n\n  _updateCaptionVisibility(viewWriter) {\n    const mapper = this.editor.editing.mapper;\n    const lastCaption = this._lastSelectedCaption;\n    let viewCaption; // If whole image is selected.\n\n    const modelSelection = this.editor.model.document.selection;\n    const selectedElement = modelSelection.getSelectedElement();\n\n    if (selectedElement && selectedElement.is('image')) {\n      const modelCaption = getCaptionFromImage(selectedElement);\n      viewCaption = mapper.toViewElement(modelCaption);\n    } // If selection is placed inside caption.\n\n\n    const position = modelSelection.getFirstPosition();\n    const modelCaption = getParentCaption(position.parent);\n\n    if (modelCaption) {\n      viewCaption = mapper.toViewElement(modelCaption);\n    } // Is currently any caption selected?\n\n\n    if (viewCaption) {\n      // Was any caption selected before?\n      if (lastCaption) {\n        // Same caption as before?\n        if (lastCaption === viewCaption) {\n          return showCaption(viewCaption, viewWriter);\n        } else {\n          hideCaptionIfEmpty(lastCaption, viewWriter);\n          this._lastSelectedCaption = viewCaption;\n          return showCaption(viewCaption, viewWriter);\n        }\n      } else {\n        this._lastSelectedCaption = viewCaption;\n        return showCaption(viewCaption, viewWriter);\n      }\n    } else {\n      // Was any caption selected before?\n      if (lastCaption) {\n        const viewModified = hideCaptionIfEmpty(lastCaption, viewWriter);\n        this._lastSelectedCaption = null;\n        return viewModified;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\n   * Returns a converter that fixes caption visibility during the model-to-view conversion.\n   * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\n   *\n   * @private\n   * @param {Function} nodeFinder\n   * @returns {Function}\n   */\n\n\n  _fixCaptionVisibility(nodeFinder) {\n    return (evt, data, conversionApi) => {\n      const node = nodeFinder(data);\n      const modelCaption = getParentCaption(node);\n      const mapper = this.editor.editing.mapper;\n      const viewWriter = conversionApi.writer;\n\n      if (modelCaption) {\n        const viewCaption = mapper.toViewElement(modelCaption);\n\n        if (viewCaption) {\n          if (modelCaption.childCount) {\n            viewWriter.removeClass('ck-hidden', viewCaption);\n          } else {\n            viewWriter.addClass('ck-hidden', viewCaption);\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Checks whether the data inserted to the model document have an image element that has no caption element inside it.\n   * If there is none, it adds it to the image element.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer The writer to make changes with.\n   * @returns {Boolean} `true` if any change was applied, `false` otherwise.\n   */\n\n\n  _insertMissingModelCaptionElement(writer) {\n    const model = this.editor.model;\n    const changes = model.document.differ.getChanges();\n    const imagesWithoutCaption = [];\n\n    for (const entry of changes) {\n      if (entry.type == 'insert' && entry.name != '$text') {\n        const item = entry.position.nodeAfter;\n\n        if (item.is('image') && !getCaptionFromImage(item)) {\n          imagesWithoutCaption.push(item);\n        } // Check elements with children for nested images.\n\n\n        if (!item.is('image') && item.childCount) {\n          for (const nestedItem of model.createRangeIn(item).getItems()) {\n            if (nestedItem.is('image') && !getCaptionFromImage(nestedItem)) {\n              imagesWithoutCaption.push(nestedItem);\n            }\n          }\n        }\n      }\n    }\n\n    for (const image of imagesWithoutCaption) {\n      writer.appendElement('caption', image);\n    }\n\n    return !!imagesWithoutCaption.length;\n  }\n\n} // Creates a converter that converts image caption model element to view element.\n//\n// @private\n// @param {Function} elementCreator\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\n// @returns {Function}\n\nfunction captionModelToView(elementCreator, hide = true) {\n  return (evt, data, conversionApi) => {\n    const captionElement = data.item; // Return if element shouldn't be present when empty.\n\n    if (!captionElement.childCount && !hide) {\n      return;\n    }\n\n    if (isImage(captionElement.parent)) {\n      if (!conversionApi.consumable.consume(data.item, 'insert')) {\n        return;\n      }\n\n      const viewImage = conversionApi.mapper.toViewElement(data.range.start.parent);\n      const viewCaption = elementCreator(conversionApi.writer);\n      const viewWriter = conversionApi.writer; // Hide if empty.\n\n      if (!captionElement.childCount) {\n        viewWriter.addClass('ck-hidden', viewCaption);\n      }\n\n      insertViewCaptionAndBind(viewCaption, data.item, viewImage, conversionApi);\n    }\n  };\n} // Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\n// @param {module:engine/model/element~Element} modelCaption\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\n\nfunction insertViewCaptionAndBind(viewCaption, modelCaption, viewImage, conversionApi) {\n  const viewPosition = conversionApi.writer.createPositionAt(viewImage, 'end');\n  conversionApi.writer.insert(viewPosition, viewCaption);\n  conversionApi.mapper.bindElements(modelCaption, viewCaption);\n} // Checks if the provided node or one of its ancestors is a caption element, and returns it.\n//\n// @private\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/element~Element|null}\n\n\nfunction getParentCaption(node) {\n  const ancestors = node.getAncestors({\n    includeSelf: true\n  });\n  const caption = ancestors.find(ancestor => ancestor.name == 'caption');\n\n  if (caption && caption.parent && caption.parent.name == 'image') {\n    return caption;\n  }\n\n  return null;\n} // Hides a given caption in the view if it is empty.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\n\n\nfunction hideCaptionIfEmpty(caption, viewWriter) {\n  if (!caption.childCount && !caption.hasClass('ck-hidden')) {\n    viewWriter.addClass('ck-hidden', caption);\n    return true;\n  }\n\n  return false;\n} // Shows the caption.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\n\n\nfunction showCaption(caption, viewWriter) {\n  if (caption.hasClass('ck-hidden')) {\n    viewWriter.removeClass('ck-hidden', caption);\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-image/src/imagecaption/imagecaptionediting.js"],"names":["Plugin","isImage","captionElementCreator","getCaptionFromImage","matchImageCaption","ImageCaptionEditing","init","editor","view","editing","schema","model","data","t","register","allowIn","allowContentOf","isLimit","document","registerPostFixer","writer","_insertMissingModelCaptionElement","conversion","for","elementToElement","createCaptionForData","createContainerElement","downcastDispatcher","on","captionModelToView","createCaptionForEditing","_fixCaptionVisibility","item","priority","position","parent","_updateCaptionVisibility","viewWriter","mapper","lastCaption","_lastSelectedCaption","viewCaption","modelSelection","selection","selectedElement","getSelectedElement","is","modelCaption","toViewElement","getFirstPosition","getParentCaption","showCaption","hideCaptionIfEmpty","viewModified","nodeFinder","evt","conversionApi","node","childCount","removeClass","addClass","changes","differ","getChanges","imagesWithoutCaption","entry","type","name","nodeAfter","push","nestedItem","createRangeIn","getItems","image","appendElement","length","elementCreator","hide","captionElement","consumable","consume","viewImage","range","start","insertViewCaptionAndBind","viewPosition","createPositionAt","insert","bindElements","ancestors","getAncestors","includeSelf","caption","find","ancestor","hasClass"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/imagecaptionediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { isImage } from '../image/utils';\nimport { captionElementCreator, getCaptionFromImage, matchImageCaption } from './utils';\n\n/**\n * The image caption engine plugin.\n *\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\n * to the model document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaptionEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst schema = editor.model.schema;\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\t\tconst t = editor.t;\n\n\t\t/**\n\t\t * The last selected caption editable.\n\t\t * It is used for hiding the editable when it is empty and the image widget is no longer selected.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\n\t\t */\n\n\t\t// Schema configuration.\n\t\tschema.register( 'caption', {\n\t\t\tallowIn: 'image',\n\t\t\tallowContentOf: '$block',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Add caption element to each image inserted without it.\n\t\teditor.model.document.registerPostFixer( writer => this._insertMissingModelCaptionElement( writer ) );\n\n\t\t// View to model converter for the data pipeline.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: matchImageCaption,\n\t\t\tmodel: 'caption'\n\t\t} );\n\n\t\t// Model to view converter for the data pipeline.\n\t\tconst createCaptionForData = writer => writer.createContainerElement( 'figcaption' );\n\t\tdata.downcastDispatcher.on( 'insert:caption', captionModelToView( createCaptionForData, false ) );\n\n\t\t// Model to view converter for the editing pipeline.\n\t\tconst createCaptionForEditing = captionElementCreator( view, t( 'Enter image caption' ) );\n\t\tediting.downcastDispatcher.on( 'insert:caption', captionModelToView( createCaptionForEditing ) );\n\n\t\t// Always show caption in view when something is inserted in model.\n\t\tediting.downcastDispatcher.on(\n\t\t\t'insert',\n\t\t\tthis._fixCaptionVisibility( data => data.item ),\n\t\t\t{ priority: 'high' }\n\t\t);\n\n\t\t// Hide caption when everything is removed from it.\n\t\tediting.downcastDispatcher.on( 'remove', this._fixCaptionVisibility( data => data.position.parent ), { priority: 'high' } );\n\n\t\t// Update caption visibility on view in post fixer.\n\t\tview.document.registerPostFixer( writer => this._updateCaptionVisibility( writer ) );\n\t}\n\n\t/**\n\t * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\n\t * and then visible when the image is selected.\n\t *\n\t * @private\n\t * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n\t * @returns {Boolean} Returns `true` when the view is updated.\n\t */\n\t_updateCaptionVisibility( viewWriter ) {\n\t\tconst mapper = this.editor.editing.mapper;\n\t\tconst lastCaption = this._lastSelectedCaption;\n\t\tlet viewCaption;\n\n\t\t// If whole image is selected.\n\t\tconst modelSelection = this.editor.model.document.selection;\n\t\tconst selectedElement = modelSelection.getSelectedElement();\n\n\t\tif ( selectedElement && selectedElement.is( 'image' ) ) {\n\t\t\tconst modelCaption = getCaptionFromImage( selectedElement );\n\t\t\tviewCaption = mapper.toViewElement( modelCaption );\n\t\t}\n\n\t\t// If selection is placed inside caption.\n\t\tconst position = modelSelection.getFirstPosition();\n\t\tconst modelCaption = getParentCaption( position.parent );\n\n\t\tif ( modelCaption ) {\n\t\t\tviewCaption = mapper.toViewElement( modelCaption );\n\t\t}\n\n\t\t// Is currently any caption selected?\n\t\tif ( viewCaption ) {\n\t\t\t// Was any caption selected before?\n\t\t\tif ( lastCaption ) {\n\t\t\t\t// Same caption as before?\n\t\t\t\tif ( lastCaption === viewCaption ) {\n\t\t\t\t\treturn showCaption( viewCaption, viewWriter );\n\t\t\t\t} else {\n\t\t\t\t\thideCaptionIfEmpty( lastCaption, viewWriter );\n\t\t\t\t\tthis._lastSelectedCaption = viewCaption;\n\n\t\t\t\t\treturn showCaption( viewCaption, viewWriter );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._lastSelectedCaption = viewCaption;\n\t\t\t\treturn showCaption( viewCaption, viewWriter );\n\t\t\t}\n\t\t} else {\n\t\t\t// Was any caption selected before?\n\t\t\tif ( lastCaption ) {\n\t\t\t\tconst viewModified = hideCaptionIfEmpty( lastCaption, viewWriter );\n\t\t\t\tthis._lastSelectedCaption = null;\n\n\t\t\t\treturn viewModified;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a converter that fixes caption visibility during the model-to-view conversion.\n\t * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\n\t *\n\t * @private\n\t * @param {Function} nodeFinder\n\t * @returns {Function}\n\t */\n\t_fixCaptionVisibility( nodeFinder ) {\n\t\treturn ( evt, data, conversionApi ) => {\n\t\t\tconst node = nodeFinder( data );\n\t\t\tconst modelCaption = getParentCaption( node );\n\t\t\tconst mapper = this.editor.editing.mapper;\n\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\tif ( modelCaption ) {\n\t\t\t\tconst viewCaption = mapper.toViewElement( modelCaption );\n\n\t\t\t\tif ( viewCaption ) {\n\t\t\t\t\tif ( modelCaption.childCount ) {\n\t\t\t\t\t\tviewWriter.removeClass( 'ck-hidden', viewCaption );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tviewWriter.addClass( 'ck-hidden', viewCaption );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Checks whether the data inserted to the model document have an image element that has no caption element inside it.\n\t * If there is none, it adds it to the image element.\n\t *\n\t * @private\n\t * @param {module:engine/model/writer~Writer} writer The writer to make changes with.\n\t * @returns {Boolean} `true` if any change was applied, `false` otherwise.\n\t */\n\t_insertMissingModelCaptionElement( writer ) {\n\t\tconst model = this.editor.model;\n\t\tconst changes = model.document.differ.getChanges();\n\n\t\tconst imagesWithoutCaption = [];\n\n\t\tfor ( const entry of changes ) {\n\t\t\tif ( entry.type == 'insert' && entry.name != '$text' ) {\n\t\t\t\tconst item = entry.position.nodeAfter;\n\n\t\t\t\tif ( item.is( 'image' ) && !getCaptionFromImage( item ) ) {\n\t\t\t\t\timagesWithoutCaption.push( item );\n\t\t\t\t}\n\n\t\t\t\t// Check elements with children for nested images.\n\t\t\t\tif ( !item.is( 'image' ) && item.childCount ) {\n\t\t\t\t\tfor ( const nestedItem of model.createRangeIn( item ).getItems() ) {\n\t\t\t\t\t\tif ( nestedItem.is( 'image' ) && !getCaptionFromImage( nestedItem ) ) {\n\t\t\t\t\t\t\timagesWithoutCaption.push( nestedItem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor ( const image of imagesWithoutCaption ) {\n\t\t\twriter.appendElement( 'caption', image );\n\t\t}\n\n\t\treturn !!imagesWithoutCaption.length;\n\t}\n}\n\n// Creates a converter that converts image caption model element to view element.\n//\n// @private\n// @param {Function} elementCreator\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\n// @returns {Function}\nfunction captionModelToView( elementCreator, hide = true ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tconst captionElement = data.item;\n\n\t\t// Return if element shouldn't be present when empty.\n\t\tif ( !captionElement.childCount && !hide ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( isImage( captionElement.parent ) ) {\n\t\t\tif ( !conversionApi.consumable.consume( data.item, 'insert' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst viewImage = conversionApi.mapper.toViewElement( data.range.start.parent );\n\t\t\tconst viewCaption = elementCreator( conversionApi.writer );\n\t\t\tconst viewWriter = conversionApi.writer;\n\n\t\t\t// Hide if empty.\n\t\t\tif ( !captionElement.childCount ) {\n\t\t\t\tviewWriter.addClass( 'ck-hidden', viewCaption );\n\t\t\t}\n\n\t\t\tinsertViewCaptionAndBind( viewCaption, data.item, viewImage, conversionApi );\n\t\t}\n\t};\n}\n\n// Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\n// @param {module:engine/model/element~Element} modelCaption\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction insertViewCaptionAndBind( viewCaption, modelCaption, viewImage, conversionApi ) {\n\tconst viewPosition = conversionApi.writer.createPositionAt( viewImage, 'end' );\n\n\tconversionApi.writer.insert( viewPosition, viewCaption );\n\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n}\n\n// Checks if the provided node or one of its ancestors is a caption element, and returns it.\n//\n// @private\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/element~Element|null}\nfunction getParentCaption( node ) {\n\tconst ancestors = node.getAncestors( { includeSelf: true } );\n\tconst caption = ancestors.find( ancestor => ancestor.name == 'caption' );\n\n\tif ( caption && caption.parent && caption.parent.name == 'image' ) {\n\t\treturn caption;\n\t}\n\n\treturn null;\n}\n\n// Hides a given caption in the view if it is empty.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction hideCaptionIfEmpty( caption, viewWriter ) {\n\tif ( !caption.childCount && !caption.hasClass( 'ck-hidden' ) ) {\n\t\tviewWriter.addClass( 'ck-hidden', caption );\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n// Shows the caption.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction showCaption( caption, viewWriter ) {\n\tif ( caption.hasClass( 'ck-hidden' ) ) {\n\t\tviewWriter.removeClass( 'ck-hidden', caption );\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n"]},"metadata":{},"sourceType":"module"}