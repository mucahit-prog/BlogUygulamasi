{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, supportedOptions } from './utils';\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AlignmentEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    editor.config.define('alignment', {\n      options: [...supportedOptions]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const schema = editor.model.schema; // Filter out unsupported options.\n\n    const enabledOptions = editor.config.get('alignment.options').filter(isSupported); // Allow alignment attribute on all blocks.\n\n    schema.extend('$block', {\n      allowAttributes: 'alignment'\n    });\n    editor.model.schema.setAttributeProperties('alignment', {\n      isFormatting: true\n    });\n\n    const definition = _buildDefinition(enabledOptions.filter(option => !isDefault(option, locale)));\n\n    editor.conversion.attributeToAttribute(definition);\n    editor.commands.add('alignment', new AlignmentCommand(editor));\n  }\n\n} // Utility function responsible for building converter definition.\n// @private\n\nfunction _buildDefinition(options) {\n  const definition = {\n    model: {\n      key: 'alignment',\n      values: options.slice()\n    },\n    view: {}\n  };\n\n  for (const option of options) {\n    definition.view[option] = {\n      key: 'style',\n      value: {\n        'text-align': option\n      }\n    };\n  }\n\n  return definition;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-alignment/src/alignmentediting.js"],"names":["Plugin","AlignmentCommand","isDefault","isSupported","supportedOptions","AlignmentEditing","constructor","editor","config","define","options","init","locale","schema","model","enabledOptions","get","filter","extend","allowAttributes","setAttributeProperties","isFormatting","definition","_buildDefinition","option","conversion","attributeToAttribute","commands","add","key","values","slice","view","value"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,gBAAjC,QAAyD,SAAzD;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BL,MAA/B,CAAsC;AACpD;AACD;AACA;AACCM,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEAA,IAAAA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAsB,WAAtB,EAAmC;AAClCC,MAAAA,OAAO,EAAE,CAAE,GAAGN,gBAAL;AADyB,KAAnC;AAGA;AAED;AACD;AACA;;;AACCO,EAAAA,IAAI,GAAG;AACN,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMK,MAAM,GAAGL,MAAM,CAACK,MAAtB;AACA,UAAMC,MAAM,GAAGN,MAAM,CAACO,KAAP,CAAaD,MAA5B,CAHM,CAKN;;AACA,UAAME,cAAc,GAAGR,MAAM,CAACC,MAAP,CAAcQ,GAAd,CAAmB,mBAAnB,EAAyCC,MAAzC,CAAiDd,WAAjD,CAAvB,CANM,CAQN;;AACAU,IAAAA,MAAM,CAACK,MAAP,CAAe,QAAf,EAAyB;AAAEC,MAAAA,eAAe,EAAE;AAAnB,KAAzB;AACAZ,IAAAA,MAAM,CAACO,KAAP,CAAaD,MAAb,CAAoBO,sBAApB,CAA4C,WAA5C,EAAyD;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAAzD;;AAEA,UAAMC,UAAU,GAAGC,gBAAgB,CAAER,cAAc,CAACE,MAAf,CAAuBO,MAAM,IAAI,CAACtB,SAAS,CAAEsB,MAAF,EAAUZ,MAAV,CAA3C,CAAF,CAAnC;;AAEAL,IAAAA,MAAM,CAACkB,UAAP,CAAkBC,oBAAlB,CAAwCJ,UAAxC;AAEAf,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,GAAhB,CAAqB,WAArB,EAAkC,IAAI3B,gBAAJ,CAAsBM,MAAtB,CAAlC;AACA;;AAhCmD,C,CAmCrD;AACA;;AACA,SAASgB,gBAAT,CAA2Bb,OAA3B,EAAqC;AACpC,QAAMY,UAAU,GAAG;AAClBR,IAAAA,KAAK,EAAE;AACNe,MAAAA,GAAG,EAAE,WADC;AAENC,MAAAA,MAAM,EAAEpB,OAAO,CAACqB,KAAR;AAFF,KADW;AAKlBC,IAAAA,IAAI,EAAE;AALY,GAAnB;;AAQA,OAAM,MAAMR,MAAZ,IAAsBd,OAAtB,EAAgC;AAC/BY,IAAAA,UAAU,CAACU,IAAX,CAAiBR,MAAjB,IAA4B;AAC3BK,MAAAA,GAAG,EAAE,OADsB;AAE3BI,MAAAA,KAAK,EAAE;AACN,sBAAcT;AADR;AAFoB,KAA5B;AAMA;;AAED,SAAOF,UAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, supportedOptions } from './utils';\n\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n * @extends module:core/plugin~Plugin\n */\nexport default class AlignmentEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'alignment', {\n\t\t\toptions: [ ...supportedOptions ]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\t\tconst schema = editor.model.schema;\n\n\t\t// Filter out unsupported options.\n\t\tconst enabledOptions = editor.config.get( 'alignment.options' ).filter( isSupported );\n\n\t\t// Allow alignment attribute on all blocks.\n\t\tschema.extend( '$block', { allowAttributes: 'alignment' } );\n\t\teditor.model.schema.setAttributeProperties( 'alignment', { isFormatting: true } );\n\n\t\tconst definition = _buildDefinition( enabledOptions.filter( option => !isDefault( option, locale ) ) );\n\n\t\teditor.conversion.attributeToAttribute( definition );\n\n\t\teditor.commands.add( 'alignment', new AlignmentCommand( editor ) );\n\t}\n}\n\n// Utility function responsible for building converter definition.\n// @private\nfunction _buildDefinition( options ) {\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: 'alignment',\n\t\t\tvalues: options.slice()\n\t\t},\n\t\tview: {}\n\t};\n\n\tfor ( const option of options ) {\n\t\tdefinition.view[ option ] = {\n\t\t\tkey: 'style',\n\t\t\tvalue: {\n\t\t\t\t'text-align': option\n\t\t\t}\n\t\t};\n\t}\n\n\treturn definition;\n}\n"]},"metadata":{},"sourceType":"module"}