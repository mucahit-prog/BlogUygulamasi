{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/utils\n */\nimport ColorTableView from './ui/colortableview';\n/**\n * The name of the font size plugin.\n */\n\nexport const FONT_SIZE = 'fontSize';\n/**\n * The name of the font family plugin.\n */\n\nexport const FONT_FAMILY = 'fontFamily';\n/**\n * The name of the font color plugin.\n */\n\nexport const FONT_COLOR = 'fontColor';\n/**\n * The name of the font background color plugin.\n */\n\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n/**\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\n *\n * @param {String} modelAttributeKey Key\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\n */\n\nexport function buildDefinition(modelAttributeKey, options) {\n  const definition = {\n    model: {\n      key: modelAttributeKey,\n      values: []\n    },\n    view: {},\n    upcastAlso: {}\n  };\n\n  for (const option of options) {\n    definition.model.values.push(option.model);\n    definition.view[option.model] = option.view;\n\n    if (option.upcastAlso) {\n      definition.upcastAlso[option.model] = option.upcastAlso;\n    }\n  }\n\n  return definition;\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n * @return {String}\n */\n\nexport function renderUpcastAttribute(styleAttr) {\n  return viewElement => normalizeColorCode(viewElement.getStyle(styleAttr));\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n */\n\nexport function renderDowncastElement(styleAttr) {\n  return (modelAttributeValue, viewWriter) => viewWriter.createAttributeElement('span', {\n    style: `${styleAttr}:${modelAttributeValue}`\n  }, {\n    priority: 7\n  });\n}\n/**\n * Creates a unified color definition object from color configuration options.\n * The object contains the information necessary to both render the UI and initialize the conversion.\n *\n * @param {module:ui/colorgrid/colorgrid~ColorDefinition} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n */\n\nexport function normalizeColorOptions(options) {\n  return options.map(normalizeSingleColorDefinition).filter(option => !!option);\n}\n/**\n * A helper that adds {@link module:font/ui/colortableview~ColorTableView} to the color dropdown with proper initial values.\n *\n * @param {Object} config The configuration object.\n * @param {module:ui/dropdown/dropdownview~DropdownView} config.dropdownView The dropdown view to which\n * a {@link module:font/ui/colortableview~ColorTableView} will be added.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions\n * representing colors to be displayed in the color table.\n * @param {String} config.removeButtonLabel The label for the button responsible for removing the color.\n * @param {String} config.documentColorsLabel The label for the section with document colors.\n * @param {String} config.documentColorsCount The number of document colors inside the dropdown.\n * @returns {module:font/ui/colortableview~ColorTableView} The new color table view.\n */\n\nexport function addColorTableToDropdown({\n  dropdownView,\n  colors,\n  columns,\n  removeButtonLabel,\n  documentColorsLabel,\n  documentColorsCount\n}) {\n  const locale = dropdownView.locale;\n  const colorTableView = new ColorTableView(locale, {\n    colors,\n    columns,\n    removeButtonLabel,\n    documentColorsLabel,\n    documentColorsCount\n  });\n  dropdownView.colorTableView = colorTableView;\n  dropdownView.panelView.children.add(colorTableView);\n  colorTableView.delegate('execute').to(dropdownView, 'execute');\n  return colorTableView;\n}\n/**\n * Returns color configuration options as defined in `editor.config.(fontColor|fontBackgroundColor).colors`\n * but processed to account for editor localization, i.e. to display {@link module:font/fontcolor~FontColorConfig}\n * or {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig} in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor An editor instance.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}.\n */\n\nexport function getLocalizedColorOptions(editor, options) {\n  const t = editor.t;\n  const localizedColorNames = {\n    Black: t('Black'),\n    'Dim grey': t('Dim grey'),\n    Grey: t('Grey'),\n    'Light grey': t('Light grey'),\n    White: t('White'),\n    Red: t('Red'),\n    Orange: t('Orange'),\n    Yellow: t('Yellow'),\n    'Light green': t('Light green'),\n    Green: t('Green'),\n    Aquamarine: t('Aquamarine'),\n    Turquoise: t('Turquoise'),\n    'Light blue': t('Light blue'),\n    Blue: t('Blue'),\n    Purple: t('Purple')\n  };\n  return options.map(colorOption => {\n    const label = localizedColorNames[colorOption.label];\n\n    if (label && label != colorOption.label) {\n      colorOption.label = label;\n    }\n\n    return colorOption;\n  });\n} // Fixes the color value string.\n//\n// @param {String} value\n// @returns {String}\n\nfunction normalizeColorCode(value) {\n  return value.replace(/\\s/g, '');\n} // Creates a normalized color definition from the user-defined configuration.\n//\n// @param {String|module:ui/colorgrid/colorgrid~ColorDefinition}\n// @returns {module:ui/colorgrid/colorgrid~ColorDefinition}\n\n\nfunction normalizeSingleColorDefinition(color) {\n  if (typeof color === 'string') {\n    return {\n      model: color.replace(/ /g, ''),\n      label: color,\n      hasBorder: false,\n      view: {\n        name: 'span',\n        styles: {\n          color\n        }\n      }\n    };\n  } else {\n    return {\n      model: color.color.replace(/ /g, ''),\n      label: color.label || color.color,\n      hasBorder: color.hasBorder === undefined ? false : color.hasBorder,\n      view: {\n        name: 'span',\n        styles: {\n          color: `${color.color}`\n        }\n      }\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-font/src/utils.js"],"names":["ColorTableView","FONT_SIZE","FONT_FAMILY","FONT_COLOR","FONT_BACKGROUND_COLOR","buildDefinition","modelAttributeKey","options","definition","model","key","values","view","upcastAlso","option","push","renderUpcastAttribute","styleAttr","viewElement","normalizeColorCode","getStyle","renderDowncastElement","modelAttributeValue","viewWriter","createAttributeElement","style","priority","normalizeColorOptions","map","normalizeSingleColorDefinition","filter","addColorTableToDropdown","dropdownView","colors","columns","removeButtonLabel","documentColorsLabel","documentColorsCount","locale","colorTableView","panelView","children","add","delegate","to","getLocalizedColorOptions","editor","t","localizedColorNames","Black","Grey","White","Red","Orange","Yellow","Green","Aquamarine","Turquoise","Blue","Purple","colorOption","label","value","replace","color","hasBorder","name","styles","undefined"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/utils\n */\n\nimport ColorTableView from './ui/colortableview';\n\n/**\n * The name of the font size plugin.\n */\nexport const FONT_SIZE = 'fontSize';\n\n/**\n * The name of the font family plugin.\n */\nexport const FONT_FAMILY = 'fontFamily';\n\n/**\n * The name of the font color plugin.\n */\nexport const FONT_COLOR = 'fontColor';\n\n/**\n * The name of the font background color plugin.\n */\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n\n/**\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\n *\n * @param {String} modelAttributeKey Key\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\n */\nexport function buildDefinition( modelAttributeKey, options ) {\n\tconst definition = {\n\t\tmodel: {\n\t\t\tkey: modelAttributeKey,\n\t\t\tvalues: []\n\t\t},\n\t\tview: {},\n\t\tupcastAlso: {}\n\t};\n\n\tfor ( const option of options ) {\n\t\tdefinition.model.values.push( option.model );\n\t\tdefinition.view[ option.model ] = option.view;\n\n\t\tif ( option.upcastAlso ) {\n\t\t\tdefinition.upcastAlso[ option.model ] = option.upcastAlso;\n\t\t}\n\t}\n\n\treturn definition;\n}\n\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n * @return {String}\n */\nexport function renderUpcastAttribute( styleAttr ) {\n\treturn viewElement => normalizeColorCode( viewElement.getStyle( styleAttr ) );\n}\n\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n */\nexport function renderDowncastElement( styleAttr ) {\n\treturn ( modelAttributeValue, viewWriter ) => viewWriter.createAttributeElement( 'span', {\n\t\tstyle: `${ styleAttr }:${ modelAttributeValue }`\n\t}, { priority: 7 } );\n}\n\n/**\n * Creates a unified color definition object from color configuration options.\n * The object contains the information necessary to both render the UI and initialize the conversion.\n *\n * @param {module:ui/colorgrid/colorgrid~ColorDefinition} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n */\nexport function normalizeColorOptions( options ) {\n\treturn options\n\t\t.map( normalizeSingleColorDefinition )\n\t\t.filter( option => !!option );\n}\n\n/**\n * A helper that adds {@link module:font/ui/colortableview~ColorTableView} to the color dropdown with proper initial values.\n *\n * @param {Object} config The configuration object.\n * @param {module:ui/dropdown/dropdownview~DropdownView} config.dropdownView The dropdown view to which\n * a {@link module:font/ui/colortableview~ColorTableView} will be added.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions\n * representing colors to be displayed in the color table.\n * @param {String} config.removeButtonLabel The label for the button responsible for removing the color.\n * @param {String} config.documentColorsLabel The label for the section with document colors.\n * @param {String} config.documentColorsCount The number of document colors inside the dropdown.\n * @returns {module:font/ui/colortableview~ColorTableView} The new color table view.\n */\nexport function addColorTableToDropdown( { dropdownView, colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount } ) {\n\tconst locale = dropdownView.locale;\n\tconst colorTableView = new ColorTableView( locale, { colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount } );\n\n\tdropdownView.colorTableView = colorTableView;\n\tdropdownView.panelView.children.add( colorTableView );\n\n\tcolorTableView.delegate( 'execute' ).to( dropdownView, 'execute' );\n\n\treturn colorTableView;\n}\n\n/**\n * Returns color configuration options as defined in `editor.config.(fontColor|fontBackgroundColor).colors`\n * but processed to account for editor localization, i.e. to display {@link module:font/fontcolor~FontColorConfig}\n * or {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig} in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor An editor instance.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}.\n */\nexport function getLocalizedColorOptions( editor, options ) {\n\tconst t = editor.t;\n\tconst localizedColorNames = {\n\t\tBlack: t( 'Black' ),\n\t\t'Dim grey': t( 'Dim grey' ),\n\t\tGrey: t( 'Grey' ),\n\t\t'Light grey': t( 'Light grey' ),\n\t\tWhite: t( 'White' ),\n\t\tRed: t( 'Red' ),\n\t\tOrange: t( 'Orange' ),\n\t\tYellow: t( 'Yellow' ),\n\t\t'Light green': t( 'Light green' ),\n\t\tGreen: t( 'Green' ),\n\t\tAquamarine: t( 'Aquamarine' ),\n\t\tTurquoise: t( 'Turquoise' ),\n\t\t'Light blue': t( 'Light blue' ),\n\t\tBlue: t( 'Blue' ),\n\t\tPurple: t( 'Purple' )\n\t};\n\n\treturn options.map( colorOption => {\n\t\tconst label = localizedColorNames[ colorOption.label ];\n\n\t\tif ( label && label != colorOption.label ) {\n\t\t\tcolorOption.label = label;\n\t\t}\n\n\t\treturn colorOption;\n\t} );\n}\n\n// Fixes the color value string.\n//\n// @param {String} value\n// @returns {String}\nfunction normalizeColorCode( value ) {\n\treturn value.replace( /\\s/g, '' );\n}\n\n// Creates a normalized color definition from the user-defined configuration.\n//\n// @param {String|module:ui/colorgrid/colorgrid~ColorDefinition}\n// @returns {module:ui/colorgrid/colorgrid~ColorDefinition}\nfunction normalizeSingleColorDefinition( color ) {\n\tif ( typeof color === 'string' ) {\n\t\treturn {\n\t\t\tmodel: color.replace( / /g, '' ),\n\t\t\tlabel: color,\n\t\t\thasBorder: false,\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tstyles: {\n\t\t\t\t\tcolor\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\tmodel: color.color.replace( / /g, '' ),\n\t\t\tlabel: color.label || color.color,\n\t\t\thasBorder: color.hasBorder === undefined ? false : color.hasBorder,\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tstyles: {\n\t\t\t\t\tcolor: `${ color.color }`\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}