{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport { downcastInsertCell, downcastInsertRow, downcastInsertTable, downcastRemoveRow, downcastTableHeadingColumnsChange, downcastTableHeadingRowsChange } from './converters/downcast';\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellContentsPostFixer from './converters/table-cell-content-post-fixer';\nimport injectTableCellPostFixer from './converters/tablecell-post-fixer';\nimport '../theme/tableediting.css';\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const schema = model.schema;\n    const conversion = editor.conversion;\n    schema.register('table', {\n      allowWhere: '$block',\n      allowAttributes: ['headingRows', 'headingColumns'],\n      isLimit: true,\n      isObject: true,\n      isBlock: true\n    });\n    schema.register('tableRow', {\n      allowIn: 'table',\n      isLimit: true\n    });\n    schema.register('tableCell', {\n      allowIn: 'tableRow',\n      allowAttributes: ['colspan', 'rowspan'],\n      isLimit: true\n    }); // Allow all $block content inside table cell.\n\n    schema.extend('$block', {\n      allowIn: 'tableCell'\n    }); // Disallow table in table.\n\n    schema.addChildCheck((context, childDefinition) => {\n      if (childDefinition.name == 'table' && Array.from(context.getNames()).includes('table')) {\n        return false;\n      }\n    }); // Table conversion.\n\n    conversion.for('upcast').add(upcastTable());\n    conversion.for('editingDowncast').add(downcastInsertTable({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertTable()); // Table row conversion.\n\n    conversion.for('upcast').elementToElement({\n      model: 'tableRow',\n      view: 'tr'\n    });\n    conversion.for('editingDowncast').add(downcastInsertRow({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertRow());\n    conversion.for('downcast').add(downcastRemoveRow()); // Table cell conversion.\n\n    conversion.for('upcast').add(upcastTableCell('td'));\n    conversion.for('upcast').add(upcastTableCell('th'));\n    conversion.for('editingDowncast').add(downcastInsertCell({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertCell()); // Table attributes conversion.\n\n    conversion.attributeToAttribute({\n      model: 'colspan',\n      view: 'colspan'\n    });\n    conversion.attributeToAttribute({\n      model: 'rowspan',\n      view: 'rowspan'\n    }); // Table heading rows and cols conversion.\n\n    conversion.for('editingDowncast').add(downcastTableHeadingColumnsChange({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastTableHeadingColumnsChange());\n    conversion.for('editingDowncast').add(downcastTableHeadingRowsChange({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastTableHeadingRowsChange());\n    injectTableCellPostFixer(editor.model, editor.editing); // Define all the commands.\n\n    editor.commands.add('insertTable', new InsertTableCommand(editor));\n    editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, {\n      order: 'above'\n    }));\n    editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, {\n      order: 'below'\n    }));\n    editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, {\n      order: 'left'\n    }));\n    editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, {\n      order: 'right'\n    }));\n    editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n    editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n    editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, {\n      direction: 'vertically'\n    }));\n    editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, {\n      direction: 'horizontally'\n    }));\n    editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, {\n      direction: 'right'\n    }));\n    editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, {\n      direction: 'left'\n    }));\n    editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, {\n      direction: 'down'\n    }));\n    editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, {\n      direction: 'up'\n    }));\n    editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n    editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n    injectTableLayoutPostFixer(model);\n    injectTableCellContentsPostFixer(model); // Handle tab key navigation.\n\n    this.editor.keystrokes.set('Tab', (...args) => this._handleTabOnSelectedTable(...args), {\n      priority: 'low'\n    });\n    this.editor.keystrokes.set('Tab', this._getTabHandler(true), {\n      priority: 'low'\n    });\n    this.editor.keystrokes.set('Shift+Tab', this._getTabHandler(false), {\n      priority: 'low'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [TableUtils];\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n   * when the table widget is selected.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _handleTabOnSelectedTable(domEventData, cancel) {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n\n    if (!selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat) {\n      const selectedElement = selection.getSelectedElement();\n\n      if (!selectedElement || !selectedElement.is('table')) {\n        return;\n      }\n\n      cancel();\n      editor.model.change(writer => {\n        writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n      });\n    }\n  }\n  /**\n   * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n   * inside table cell.\n   *\n   * @private\n   * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n   */\n\n\n  _getTabHandler(isForward) {\n    const editor = this.editor;\n    return (domEventData, cancel) => {\n      const selection = editor.model.document.selection;\n      const firstPosition = selection.getFirstPosition();\n      const tableCell = findAncestor('tableCell', firstPosition);\n\n      if (!tableCell) {\n        return;\n      }\n\n      cancel();\n      const tableRow = tableCell.parent;\n      const table = tableRow.parent;\n      const currentRowIndex = table.getChildIndex(tableRow);\n      const currentCellIndex = tableRow.getChildIndex(tableCell);\n      const isFirstCellInRow = currentCellIndex === 0;\n\n      if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n        // It's the first cell of a table - don't do anything (stay in current position).\n        return;\n      }\n\n      const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n      const isLastRow = currentRowIndex === table.childCount - 1;\n\n      if (isForward && isLastRow && isLastCellInRow) {\n        editor.execute('insertTableRowBelow'); // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n        // or it got overwritten) do not change the selection.\n\n        if (currentRowIndex === table.childCount - 1) {\n          return;\n        }\n      }\n\n      let cellToFocus; // Move to first cell in next row.\n\n      if (isForward && isLastCellInRow) {\n        const nextRow = table.getChild(currentRowIndex + 1);\n        cellToFocus = nextRow.getChild(0);\n      } // Move to last cell in a previous row.\n      else if (!isForward && isFirstCellInRow) {\n          const previousRow = table.getChild(currentRowIndex - 1);\n          cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        } // Move to next/previous cell.\n        else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n          }\n\n      editor.model.change(writer => {\n        writer.setSelection(writer.createRangeIn(cellToFocus));\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/tableediting.js"],"names":["Plugin","upcastTable","upcastTableCell","downcastInsertCell","downcastInsertRow","downcastInsertTable","downcastRemoveRow","downcastTableHeadingColumnsChange","downcastTableHeadingRowsChange","InsertTableCommand","InsertRowCommand","InsertColumnCommand","SplitCellCommand","MergeCellCommand","RemoveRowCommand","RemoveColumnCommand","SetHeaderRowCommand","SetHeaderColumnCommand","findAncestor","TableUtils","injectTableLayoutPostFixer","injectTableCellContentsPostFixer","injectTableCellPostFixer","TableEditing","init","editor","model","schema","conversion","register","allowWhere","allowAttributes","isLimit","isObject","isBlock","allowIn","extend","addChildCheck","context","childDefinition","name","Array","from","getNames","includes","for","add","asWidget","elementToElement","view","attributeToAttribute","editing","commands","order","direction","keystrokes","set","args","_handleTabOnSelectedTable","priority","_getTabHandler","requires","domEventData","cancel","selection","document","isCollapsed","rangeCount","getFirstRange","isFlat","selectedElement","getSelectedElement","is","change","writer","setSelection","createRangeIn","getChild","isForward","firstPosition","getFirstPosition","tableCell","tableRow","parent","table","currentRowIndex","getChildIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","childCount","isLastRow","execute","cellToFocus","nextRow","previousRow"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AAEA,OAAOC,WAAP,IAAsBC,eAAtB,QAA6C,0BAA7C;AACA,SACCC,kBADD,EAECC,iBAFD,EAGCC,mBAHD,EAICC,iBAJD,EAKCC,iCALD,EAMCC,8BAND,QAOO,uBAPP;AASA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,OAAOC,0BAAP,MAAuC,sCAAvC;AACA,OAAOC,gCAAP,MAA6C,4CAA7C;AACA,OAAOC,wBAAP,MAAqC,mCAArC;AAEA,OAAO,2BAAP;AAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,YAAN,SAA2BvB,MAA3B,CAAkC;AAChD;AACD;AACA;AACCwB,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AACA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,UAAMC,UAAU,GAAGH,MAAM,CAACG,UAA1B;AAEAD,IAAAA,MAAM,CAACE,QAAP,CAAiB,OAAjB,EAA0B;AACzBC,MAAAA,UAAU,EAAE,QADa;AAEzBC,MAAAA,eAAe,EAAE,CAAE,aAAF,EAAiB,gBAAjB,CAFQ;AAGzBC,MAAAA,OAAO,EAAE,IAHgB;AAIzBC,MAAAA,QAAQ,EAAE,IAJe;AAKzBC,MAAAA,OAAO,EAAE;AALgB,KAA1B;AAQAP,IAAAA,MAAM,CAACE,QAAP,CAAiB,UAAjB,EAA6B;AAC5BM,MAAAA,OAAO,EAAE,OADmB;AAE5BH,MAAAA,OAAO,EAAE;AAFmB,KAA7B;AAKAL,IAAAA,MAAM,CAACE,QAAP,CAAiB,WAAjB,EAA8B;AAC7BM,MAAAA,OAAO,EAAE,UADoB;AAE7BJ,MAAAA,eAAe,EAAE,CAAE,SAAF,EAAa,SAAb,CAFY;AAG7BC,MAAAA,OAAO,EAAE;AAHoB,KAA9B,EAnBM,CAyBN;;AACAL,IAAAA,MAAM,CAACS,MAAP,CAAe,QAAf,EAAyB;AAAED,MAAAA,OAAO,EAAE;AAAX,KAAzB,EA1BM,CA4BN;;AACAR,IAAAA,MAAM,CAACU,aAAP,CAAsB,CAAEC,OAAF,EAAWC,eAAX,KAAgC;AACrD,UAAKA,eAAe,CAACC,IAAhB,IAAwB,OAAxB,IAAmCC,KAAK,CAACC,IAAN,CAAYJ,OAAO,CAACK,QAAR,EAAZ,EAAiCC,QAAjC,CAA2C,OAA3C,CAAxC,EAA+F;AAC9F,eAAO,KAAP;AACA;AACD,KAJD,EA7BM,CAmCN;;AACAhB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,QAAhB,EAA2BC,GAA3B,CAAgC7C,WAAW,EAA3C;AAEA2B,IAAAA,UAAU,CAACiB,GAAX,CAAgB,iBAAhB,EAAoCC,GAApC,CAAyCzC,mBAAmB,CAAE;AAAE0C,MAAAA,QAAQ,EAAE;AAAZ,KAAF,CAA5D;AACAnB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,cAAhB,EAAiCC,GAAjC,CAAsCzC,mBAAmB,EAAzD,EAvCM,CAyCN;;AACAuB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,QAAhB,EAA2BG,gBAA3B,CAA6C;AAAEtB,MAAAA,KAAK,EAAE,UAAT;AAAqBuB,MAAAA,IAAI,EAAE;AAA3B,KAA7C;AAEArB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,iBAAhB,EAAoCC,GAApC,CAAyC1C,iBAAiB,CAAE;AAAE2C,MAAAA,QAAQ,EAAE;AAAZ,KAAF,CAA1D;AACAnB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,cAAhB,EAAiCC,GAAjC,CAAsC1C,iBAAiB,EAAvD;AACAwB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,UAAhB,EAA6BC,GAA7B,CAAkCxC,iBAAiB,EAAnD,EA9CM,CAgDN;;AACAsB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,QAAhB,EAA2BC,GAA3B,CAAgC5C,eAAe,CAAE,IAAF,CAA/C;AACA0B,IAAAA,UAAU,CAACiB,GAAX,CAAgB,QAAhB,EAA2BC,GAA3B,CAAgC5C,eAAe,CAAE,IAAF,CAA/C;AAEA0B,IAAAA,UAAU,CAACiB,GAAX,CAAgB,iBAAhB,EAAoCC,GAApC,CAAyC3C,kBAAkB,CAAE;AAAE4C,MAAAA,QAAQ,EAAE;AAAZ,KAAF,CAA3D;AACAnB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,cAAhB,EAAiCC,GAAjC,CAAsC3C,kBAAkB,EAAxD,EArDM,CAuDN;;AACAyB,IAAAA,UAAU,CAACsB,oBAAX,CAAiC;AAAExB,MAAAA,KAAK,EAAE,SAAT;AAAoBuB,MAAAA,IAAI,EAAE;AAA1B,KAAjC;AACArB,IAAAA,UAAU,CAACsB,oBAAX,CAAiC;AAAExB,MAAAA,KAAK,EAAE,SAAT;AAAoBuB,MAAAA,IAAI,EAAE;AAA1B,KAAjC,EAzDM,CA2DN;;AACArB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,iBAAhB,EAAoCC,GAApC,CAAyCvC,iCAAiC,CAAE;AAAEwC,MAAAA,QAAQ,EAAE;AAAZ,KAAF,CAA1E;AACAnB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,cAAhB,EAAiCC,GAAjC,CAAsCvC,iCAAiC,EAAvE;AACAqB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,iBAAhB,EAAoCC,GAApC,CAAyCtC,8BAA8B,CAAE;AAAEuC,MAAAA,QAAQ,EAAE;AAAZ,KAAF,CAAvE;AACAnB,IAAAA,UAAU,CAACiB,GAAX,CAAgB,cAAhB,EAAiCC,GAAjC,CAAsCtC,8BAA8B,EAApE;AAEAc,IAAAA,wBAAwB,CAAEG,MAAM,CAACC,KAAT,EAAgBD,MAAM,CAAC0B,OAAvB,CAAxB,CAjEM,CAmEN;;AACA1B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,aAArB,EAAoC,IAAIrC,kBAAJ,CAAwBgB,MAAxB,CAApC;AACAA,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,qBAArB,EAA4C,IAAIpC,gBAAJ,CAAsBe,MAAtB,EAA8B;AAAE4B,MAAAA,KAAK,EAAE;AAAT,KAA9B,CAA5C;AACA5B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,qBAArB,EAA4C,IAAIpC,gBAAJ,CAAsBe,MAAtB,EAA8B;AAAE4B,MAAAA,KAAK,EAAE;AAAT,KAA9B,CAA5C;AACA5B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,uBAArB,EAA8C,IAAInC,mBAAJ,CAAyBc,MAAzB,EAAiC;AAAE4B,MAAAA,KAAK,EAAE;AAAT,KAAjC,CAA9C;AACA5B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,wBAArB,EAA+C,IAAInC,mBAAJ,CAAyBc,MAAzB,EAAiC;AAAE4B,MAAAA,KAAK,EAAE;AAAT,KAAjC,CAA/C;AAEA5B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,gBAArB,EAAuC,IAAIhC,gBAAJ,CAAsBW,MAAtB,CAAvC;AACAA,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,mBAArB,EAA0C,IAAI/B,mBAAJ,CAAyBU,MAAzB,CAA1C;AAEAA,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,0BAArB,EAAiD,IAAIlC,gBAAJ,CAAsBa,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAAjD;AACA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,4BAArB,EAAmD,IAAIlC,gBAAJ,CAAsBa,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAAnD;AAEA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,qBAArB,EAA4C,IAAIjC,gBAAJ,CAAsBY,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAA5C;AACA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,oBAArB,EAA2C,IAAIjC,gBAAJ,CAAsBY,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAA3C;AACA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,oBAArB,EAA2C,IAAIjC,gBAAJ,CAAsBY,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAA3C;AACA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,kBAArB,EAAyC,IAAIjC,gBAAJ,CAAsBY,MAAtB,EAA8B;AAAE6B,MAAAA,SAAS,EAAE;AAAb,KAA9B,CAAzC;AAEA7B,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,sBAArB,EAA6C,IAAI7B,sBAAJ,CAA4BQ,MAA5B,CAA7C;AACAA,IAAAA,MAAM,CAAC2B,QAAP,CAAgBN,GAAhB,CAAqB,mBAArB,EAA0C,IAAI9B,mBAAJ,CAAyBS,MAAzB,CAA1C;AAEAL,IAAAA,0BAA0B,CAAEM,KAAF,CAA1B;AACAL,IAAAA,gCAAgC,CAAEK,KAAF,CAAhC,CAzFM,CA2FN;;AACA,SAAKD,MAAL,CAAY8B,UAAZ,CAAuBC,GAAvB,CAA4B,KAA5B,EAAmC,CAAE,GAAGC,IAAL,KAAe,KAAKC,yBAAL,CAAgC,GAAGD,IAAnC,CAAlD,EAA6F;AAAEE,MAAAA,QAAQ,EAAE;AAAZ,KAA7F;AACA,SAAKlC,MAAL,CAAY8B,UAAZ,CAAuBC,GAAvB,CAA4B,KAA5B,EAAmC,KAAKI,cAAL,CAAqB,IAArB,CAAnC,EAAgE;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KAAhE;AACA,SAAKlC,MAAL,CAAY8B,UAAZ,CAAuBC,GAAvB,CAA4B,WAA5B,EAAyC,KAAKI,cAAL,CAAqB,KAArB,CAAzC,EAAuE;AAAED,MAAAA,QAAQ,EAAE;AAAZ,KAAvE;AACA;AAED;AACD;AACA;;;AACoB,aAARE,QAAQ,GAAG;AACrB,WAAO,CAAE1C,UAAF,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCuC,EAAAA,yBAAyB,CAAEI,YAAF,EAAgBC,MAAhB,EAAyB;AACjD,UAAMtC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMuC,SAAS,GAAGvC,MAAM,CAACC,KAAP,CAAauC,QAAb,CAAsBD,SAAxC;;AAEA,QAAK,CAACA,SAAS,CAACE,WAAX,IAA0BF,SAAS,CAACG,UAAV,KAAyB,CAAnD,IAAwDH,SAAS,CAACI,aAAV,GAA0BC,MAAvF,EAAgG;AAC/F,YAAMC,eAAe,GAAGN,SAAS,CAACO,kBAAV,EAAxB;;AAEA,UAAK,CAACD,eAAD,IAAoB,CAACA,eAAe,CAACE,EAAhB,CAAoB,OAApB,CAA1B,EAA0D;AACzD;AACA;;AAEDT,MAAAA,MAAM;AAENtC,MAAAA,MAAM,CAACC,KAAP,CAAa+C,MAAb,CAAqBC,MAAM,IAAI;AAC9BA,QAAAA,MAAM,CAACC,YAAP,CAAqBD,MAAM,CAACE,aAAP,CAAsBN,eAAe,CAACO,QAAhB,CAA0B,CAA1B,EAA8BA,QAA9B,CAAwC,CAAxC,CAAtB,CAArB;AACA,OAFD;AAGA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCjB,EAAAA,cAAc,CAAEkB,SAAF,EAAc;AAC3B,UAAMrD,MAAM,GAAG,KAAKA,MAApB;AAEA,WAAO,CAAEqC,YAAF,EAAgBC,MAAhB,KAA4B;AAClC,YAAMC,SAAS,GAAGvC,MAAM,CAACC,KAAP,CAAauC,QAAb,CAAsBD,SAAxC;AAEA,YAAMe,aAAa,GAAGf,SAAS,CAACgB,gBAAV,EAAtB;AAEA,YAAMC,SAAS,GAAG/D,YAAY,CAAE,WAAF,EAAe6D,aAAf,CAA9B;;AAEA,UAAK,CAACE,SAAN,EAAkB;AACjB;AACA;;AAEDlB,MAAAA,MAAM;AAEN,YAAMmB,QAAQ,GAAGD,SAAS,CAACE,MAA3B;AACA,YAAMC,KAAK,GAAGF,QAAQ,CAACC,MAAvB;AAEA,YAAME,eAAe,GAAGD,KAAK,CAACE,aAAN,CAAqBJ,QAArB,CAAxB;AACA,YAAMK,gBAAgB,GAAGL,QAAQ,CAACI,aAAT,CAAwBL,SAAxB,CAAzB;AAEA,YAAMO,gBAAgB,GAAGD,gBAAgB,KAAK,CAA9C;;AAEA,UAAK,CAACT,SAAD,IAAcU,gBAAd,IAAkCH,eAAe,KAAK,CAA3D,EAA+D;AAC9D;AACA;AACA;;AAED,YAAMI,eAAe,GAAGF,gBAAgB,KAAKL,QAAQ,CAACQ,UAAT,GAAsB,CAAnE;AACA,YAAMC,SAAS,GAAGN,eAAe,KAAKD,KAAK,CAACM,UAAN,GAAmB,CAAzD;;AAEA,UAAKZ,SAAS,IAAIa,SAAb,IAA0BF,eAA/B,EAAiD;AAChDhE,QAAAA,MAAM,CAACmE,OAAP,CAAgB,qBAAhB,EADgD,CAGhD;AACA;;AACA,YAAKP,eAAe,KAAKD,KAAK,CAACM,UAAN,GAAmB,CAA5C,EAAgD;AAC/C;AACA;AACD;;AAED,UAAIG,WAAJ,CAvCkC,CAyClC;;AACA,UAAKf,SAAS,IAAIW,eAAlB,EAAoC;AACnC,cAAMK,OAAO,GAAGV,KAAK,CAACP,QAAN,CAAgBQ,eAAe,GAAG,CAAlC,CAAhB;AAEAQ,QAAAA,WAAW,GAAGC,OAAO,CAACjB,QAAR,CAAkB,CAAlB,CAAd;AACA,OAJD,CAKA;AALA,WAMK,IAAK,CAACC,SAAD,IAAcU,gBAAnB,EAAsC;AAC1C,gBAAMO,WAAW,GAAGX,KAAK,CAACP,QAAN,CAAgBQ,eAAe,GAAG,CAAlC,CAApB;AAEAQ,UAAAA,WAAW,GAAGE,WAAW,CAAClB,QAAZ,CAAsBkB,WAAW,CAACL,UAAZ,GAAyB,CAA/C,CAAd;AACA,SAJI,CAKL;AALK,aAMA;AACJG,YAAAA,WAAW,GAAGX,QAAQ,CAACL,QAAT,CAAmBU,gBAAgB,IAAKT,SAAS,GAAG,CAAH,GAAO,CAAC,CAAtB,CAAnC,CAAd;AACA;;AAEDrD,MAAAA,MAAM,CAACC,KAAP,CAAa+C,MAAb,CAAqBC,MAAM,IAAI;AAC9BA,QAAAA,MAAM,CAACC,YAAP,CAAqBD,MAAM,CAACE,aAAP,CAAsBiB,WAAtB,CAArB;AACA,OAFD;AAGA,KA7DD;AA8DA;;AA/M+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport {\n\tdowncastInsertCell,\n\tdowncastInsertRow,\n\tdowncastInsertTable,\n\tdowncastRemoveRow,\n\tdowncastTableHeadingColumnsChange,\n\tdowncastTableHeadingRowsChange\n} from './converters/downcast';\n\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\n\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellContentsPostFixer from './converters/table-cell-content-post-fixer';\nimport injectTableCellPostFixer from './converters/tablecell-post-fixer';\n\nimport '../theme/tableediting.css';\n\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\t\tconst schema = model.schema;\n\t\tconst conversion = editor.conversion;\n\n\t\tschema.register( 'table', {\n\t\t\tallowWhere: '$block',\n\t\t\tallowAttributes: [ 'headingRows', 'headingColumns' ],\n\t\t\tisLimit: true,\n\t\t\tisObject: true,\n\t\t\tisBlock: true\n\t\t} );\n\n\t\tschema.register( 'tableRow', {\n\t\t\tallowIn: 'table',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\tschema.register( 'tableCell', {\n\t\t\tallowIn: 'tableRow',\n\t\t\tallowAttributes: [ 'colspan', 'rowspan' ],\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Allow all $block content inside table cell.\n\t\tschema.extend( '$block', { allowIn: 'tableCell' } );\n\n\t\t// Disallow table in table.\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif ( childDefinition.name == 'table' && Array.from( context.getNames() ).includes( 'table' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Table conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTable() );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertTable( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertTable() );\n\n\t\t// Table row conversion.\n\t\tconversion.for( 'upcast' ).elementToElement( { model: 'tableRow', view: 'tr' } );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertRow( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertRow() );\n\t\tconversion.for( 'downcast' ).add( downcastRemoveRow() );\n\n\t\t// Table cell conversion.\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'td' ) );\n\t\tconversion.for( 'upcast' ).add( upcastTableCell( 'th' ) );\n\n\t\tconversion.for( 'editingDowncast' ).add( downcastInsertCell( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastInsertCell() );\n\n\t\t// Table attributes conversion.\n\t\tconversion.attributeToAttribute( { model: 'colspan', view: 'colspan' } );\n\t\tconversion.attributeToAttribute( { model: 'rowspan', view: 'rowspan' } );\n\n\t\t// Table heading rows and cols conversion.\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingColumnsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingColumnsChange() );\n\t\tconversion.for( 'editingDowncast' ).add( downcastTableHeadingRowsChange( { asWidget: true } ) );\n\t\tconversion.for( 'dataDowncast' ).add( downcastTableHeadingRowsChange() );\n\n\t\tinjectTableCellPostFixer( editor.model, editor.editing );\n\n\t\t// Define all the commands.\n\t\teditor.commands.add( 'insertTable', new InsertTableCommand( editor ) );\n\t\teditor.commands.add( 'insertTableRowAbove', new InsertRowCommand( editor, { order: 'above' } ) );\n\t\teditor.commands.add( 'insertTableRowBelow', new InsertRowCommand( editor, { order: 'below' } ) );\n\t\teditor.commands.add( 'insertTableColumnLeft', new InsertColumnCommand( editor, { order: 'left' } ) );\n\t\teditor.commands.add( 'insertTableColumnRight', new InsertColumnCommand( editor, { order: 'right' } ) );\n\n\t\teditor.commands.add( 'removeTableRow', new RemoveRowCommand( editor ) );\n\t\teditor.commands.add( 'removeTableColumn', new RemoveColumnCommand( editor ) );\n\n\t\teditor.commands.add( 'splitTableCellVertically', new SplitCellCommand( editor, { direction: 'vertically' } ) );\n\t\teditor.commands.add( 'splitTableCellHorizontally', new SplitCellCommand( editor, { direction: 'horizontally' } ) );\n\n\t\teditor.commands.add( 'mergeTableCellRight', new MergeCellCommand( editor, { direction: 'right' } ) );\n\t\teditor.commands.add( 'mergeTableCellLeft', new MergeCellCommand( editor, { direction: 'left' } ) );\n\t\teditor.commands.add( 'mergeTableCellDown', new MergeCellCommand( editor, { direction: 'down' } ) );\n\t\teditor.commands.add( 'mergeTableCellUp', new MergeCellCommand( editor, { direction: 'up' } ) );\n\n\t\teditor.commands.add( 'setTableColumnHeader', new SetHeaderColumnCommand( editor ) );\n\t\teditor.commands.add( 'setTableRowHeader', new SetHeaderRowCommand( editor ) );\n\n\t\tinjectTableLayoutPostFixer( model );\n\t\tinjectTableCellContentsPostFixer( model );\n\n\t\t// Handle tab key navigation.\n\t\tthis.editor.keystrokes.set( 'Tab', ( ...args ) => this._handleTabOnSelectedTable( ...args ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Tab', this._getTabHandler( true ), { priority: 'low' } );\n\t\tthis.editor.keystrokes.set( 'Shift+Tab', this._getTabHandler( false ), { priority: 'low' } );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ TableUtils ];\n\t}\n\n\t/**\n\t * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * when the table widget is selected.\n\t *\n\t * @private\n\t * @param {module:utils/eventinfo~EventInfo} eventInfo\n\t * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n\t */\n\t_handleTabOnSelectedTable( domEventData, cancel ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\tif ( !selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat ) {\n\t\t\tconst selectedElement = selection.getSelectedElement();\n\n\t\t\tif ( !selectedElement || !selectedElement.is( 'table' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( selectedElement.getChild( 0 ).getChild( 0 ) ) );\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n\t * inside table cell.\n\t *\n\t * @private\n\t * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n\t */\n\t_getTabHandler( isForward ) {\n\t\tconst editor = this.editor;\n\n\t\treturn ( domEventData, cancel ) => {\n\t\t\tconst selection = editor.model.document.selection;\n\n\t\t\tconst firstPosition = selection.getFirstPosition();\n\n\t\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\n\t\t\tif ( !tableCell ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcancel();\n\n\t\t\tconst tableRow = tableCell.parent;\n\t\t\tconst table = tableRow.parent;\n\n\t\t\tconst currentRowIndex = table.getChildIndex( tableRow );\n\t\t\tconst currentCellIndex = tableRow.getChildIndex( tableCell );\n\n\t\t\tconst isFirstCellInRow = currentCellIndex === 0;\n\n\t\t\tif ( !isForward && isFirstCellInRow && currentRowIndex === 0 ) {\n\t\t\t\t// It's the first cell of a table - don't do anything (stay in current position).\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n\t\t\tconst isLastRow = currentRowIndex === table.childCount - 1;\n\n\t\t\tif ( isForward && isLastRow && isLastCellInRow ) {\n\t\t\t\teditor.execute( 'insertTableRowBelow' );\n\n\t\t\t\t// Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n\t\t\t\t// or it got overwritten) do not change the selection.\n\t\t\t\tif ( currentRowIndex === table.childCount - 1 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet cellToFocus;\n\n\t\t\t// Move to first cell in next row.\n\t\t\tif ( isForward && isLastCellInRow ) {\n\t\t\t\tconst nextRow = table.getChild( currentRowIndex + 1 );\n\n\t\t\t\tcellToFocus = nextRow.getChild( 0 );\n\t\t\t}\n\t\t\t// Move to last cell in a previous row.\n\t\t\telse if ( !isForward && isFirstCellInRow ) {\n\t\t\t\tconst previousRow = table.getChild( currentRowIndex - 1 );\n\n\t\t\t\tcellToFocus = previousRow.getChild( previousRow.childCount - 1 );\n\t\t\t}\n\t\t\t// Move to next/previous cell.\n\t\t\telse {\n\t\t\t\tcellToFocus = tableRow.getChild( currentCellIndex + ( isForward ? 1 : -1 ) );\n\t\t\t}\n\n\t\t\teditor.model.change( writer => {\n\t\t\t\twriter.setSelection( writer.createRangeIn( cellToFocus ) );\n\t\t\t} );\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}