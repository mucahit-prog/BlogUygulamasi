{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/utils\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class ManualDecorator {\n  /**\n   * Creates a new instance of {@link module:link/utils~ManualDecorator}.\n   *\n   * @param {Object} config\n   * @param {String} config.id The name of the attribute used in the model that represents a given manual decorator.\n   * For example: `'linkIsExternal'`.\n   * @param {String} config.label The label used in the user interface to toggle the manual decorator.\n   * @param {Object} config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n   * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n   */\n  constructor({\n    id,\n    label,\n    attributes\n  }) {\n    /**\n     * An ID of a manual decorator which is the name of the attribute in the model, for example: 'linkManualDecorator0'.\n     *\n     * @type {String}\n     */\n    this.id = id;\n    /**\n     * The value of the current manual decorator. It reflects its state from the UI.\n     *\n     * @observable\n     * @member {Boolean} module:link/utils~ManualDecorator#value\n     */\n\n    this.set('value');\n    /**\n     * The label used in the user interface to toggle the manual decorator.\n     *\n     * @type {String}\n     */\n\n    this.label = label;\n    /**\n     * A set of attributes added to downcasted data when the decorator is activated for a specific link.\n     * Attributes should be added in a form of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n     *\n     * @type {Object}\n     */\n\n    this.attributes = attributes;\n  }\n\n}\nmix(ManualDecorator, ObservableMixin);","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-link/src/utils/manualdecorator.js"],"names":["ObservableMixin","mix","ManualDecorator","constructor","id","label","attributes","set"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,eAAP,MAA4B,+CAA5B;AACA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,eAAN,CAAsB;AACpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAE;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,GAAF,EAA8B;AACxC;AACF;AACA;AACA;AACA;AACE,SAAKF,EAAL,GAAUA,EAAV;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKG,GAAL,CAAU,OAAV;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKF,KAAL,GAAaA,KAAb;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,UAAL,GAAkBA,UAAlB;AACA;;AAzCmC;AA4CrCL,GAAG,CAAEC,eAAF,EAAmBF,eAAnB,CAAH","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/utils\n */\n\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\nexport default class ManualDecorator {\n\t/**\n\t * Creates a new instance of {@link module:link/utils~ManualDecorator}.\n\t *\n\t * @param {Object} config\n\t * @param {String} config.id The name of the attribute used in the model that represents a given manual decorator.\n\t * For example: `'linkIsExternal'`.\n\t * @param {String} config.label The label used in the user interface to toggle the manual decorator.\n\t * @param {Object} config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n\t * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t */\n\tconstructor( { id, label, attributes } ) {\n\t\t/**\n\t\t * An ID of a manual decorator which is the name of the attribute in the model, for example: 'linkManualDecorator0'.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * The value of the current manual decorator. It reflects its state from the UI.\n\t\t *\n\t\t * @observable\n\t\t * @member {Boolean} module:link/utils~ManualDecorator#value\n\t\t */\n\t\tthis.set( 'value' );\n\n\t\t/**\n\t\t * The label used in the user interface to toggle the manual decorator.\n\t\t *\n\t\t * @type {String}\n\t\t */\n\t\tthis.label = label;\n\n\t\t/**\n\t\t * A set of attributes added to downcasted data when the decorator is activated for a specific link.\n\t\t * Attributes should be added in a form of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.attributes = attributes;\n\t}\n}\n\nmix( ManualDecorator, ObservableMixin );\n"]},"metadata":{},"sourceType":"module"}