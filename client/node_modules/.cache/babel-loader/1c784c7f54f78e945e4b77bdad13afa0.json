{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\nimport { findOptimalInsertionPosition, isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\n\nexport function toImageWidget(viewElement, writer, label) {\n  writer.setCustomProperty('image', true, viewElement);\n  return toWidget(viewElement, writer, {\n    label: labelCreator\n  });\n\n  function labelCreator() {\n    const imgElement = viewElement.getChild(0);\n    const altText = imgElement.getAttribute('alt');\n    return altText ? `${altText} ${label}` : label;\n  }\n}\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isImageWidget(viewElement) {\n  return !!viewElement.getCustomProperty('image') && isWidget(viewElement);\n}\n/**\n * Returns an image widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getSelectedImageWidget(selection) {\n  const viewElement = selection.getSelectedElement();\n\n  if (viewElement && isImageWidget(viewElement)) {\n    return viewElement;\n  }\n\n  return null;\n}\n/**\n * Checks if the provided model element is an `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\n\nexport function isImage(modelElement) {\n  return !!modelElement && modelElement.is('image');\n}\n/**\n * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionPosition} method.\n *\n *\t\tmodel.change( writer => {\n *\t\t\tinsertImage( writer, model, { src: 'path/to/image.jpg' } );\n *\t\t} );\n *\n * @param {module:engine/model/writer~Writer} writer\n * @param {module:engine/model/model~Model} model\n * @param {Object} [attributes={}] Attributes of inserted image\n */\n\nexport function insertImage(writer, model, attributes = {}) {\n  const imageElement = writer.createElement('image', attributes);\n  const insertAtSelection = findOptimalInsertionPosition(model.document.selection, model);\n  model.insertContent(imageElement, insertAtSelection); // Inserting an image might've failed due to schema regulations.\n\n  if (imageElement.parent) {\n    writer.setSelection(imageElement, 'on');\n  }\n}\n/**\n * Checks if image can be inserted at current model selection.\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Boolean}\n */\n\nexport function isImageAllowed(model) {\n  const schema = model.schema;\n  const selection = model.document.selection;\n  return isImageAllowedInParent(selection, schema, model) && !checkSelectionOnObject(selection, schema) && isInOtherImage(selection);\n} // Checks if image is allowed by schema in optimal insertion parent.\n//\n// @returns {Boolean}\n\nfunction isImageAllowedInParent(selection, schema, model) {\n  const parent = getInsertImageParent(selection, model);\n  return schema.checkChild(parent, 'image');\n} // Check if selection is on object.\n//\n// @returns {Boolean}\n\n\nfunction checkSelectionOnObject(selection, schema) {\n  const selectedElement = selection.getSelectedElement();\n  return selectedElement && schema.isObject(selectedElement);\n} // Checks if selection is placed in other image (ie. in caption).\n\n\nfunction isInOtherImage(selection) {\n  return [...selection.focus.getAncestors()].every(ancestor => !ancestor.is('image'));\n} // Returns a node that will be used to insert image with `model.insertContent` to check if image can be placed there.\n\n\nfunction getInsertImageParent(selection, model) {\n  const insertAt = findOptimalInsertionPosition(selection, model);\n  const parent = insertAt.parent;\n\n  if (parent.isEmpty && !parent.is('$root')) {\n    return parent.parent;\n  }\n\n  return parent;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/image/utils.js"],"names":["findOptimalInsertionPosition","isWidget","toWidget","toImageWidget","viewElement","writer","label","setCustomProperty","labelCreator","imgElement","getChild","altText","getAttribute","isImageWidget","getCustomProperty","getSelectedImageWidget","selection","getSelectedElement","isImage","modelElement","is","insertImage","model","attributes","imageElement","createElement","insertAtSelection","document","insertContent","parent","setSelection","isImageAllowed","schema","isImageAllowedInParent","checkSelectionOnObject","isInOtherImage","getInsertImageParent","checkChild","selectedElement","isObject","focus","getAncestors","every","ancestor","insertAt","isEmpty"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\n\nimport { findOptimalInsertionPosition, isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toImageWidget( viewElement, writer, label ) {\n\twriter.setCustomProperty( 'image', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { label: labelCreator } );\n\n\tfunction labelCreator() {\n\t\tconst imgElement = viewElement.getChild( 0 );\n\t\tconst altText = imgElement.getAttribute( 'alt' );\n\n\t\treturn altText ? `${ altText } ${ label }` : label;\n\t}\n}\n\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isImageWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'image' ) && isWidget( viewElement );\n}\n\n/**\n * Returns an image widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedImageWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isImageWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Checks if the provided model element is an `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\nexport function isImage( modelElement ) {\n\treturn !!modelElement && modelElement.is( 'image' );\n}\n\n/**\n * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionPosition} method.\n *\n *\t\tmodel.change( writer => {\n *\t\t\tinsertImage( writer, model, { src: 'path/to/image.jpg' } );\n *\t\t} );\n *\n * @param {module:engine/model/writer~Writer} writer\n * @param {module:engine/model/model~Model} model\n * @param {Object} [attributes={}] Attributes of inserted image\n */\nexport function insertImage( writer, model, attributes = {} ) {\n\tconst imageElement = writer.createElement( 'image', attributes );\n\n\tconst insertAtSelection = findOptimalInsertionPosition( model.document.selection, model );\n\n\tmodel.insertContent( imageElement, insertAtSelection );\n\n\t// Inserting an image might've failed due to schema regulations.\n\tif ( imageElement.parent ) {\n\t\twriter.setSelection( imageElement, 'on' );\n\t}\n}\n\n/**\n * Checks if image can be inserted at current model selection.\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Boolean}\n */\nexport function isImageAllowed( model ) {\n\tconst schema = model.schema;\n\tconst selection = model.document.selection;\n\n\treturn isImageAllowedInParent( selection, schema, model ) &&\n\t\t!checkSelectionOnObject( selection, schema ) &&\n\t\tisInOtherImage( selection );\n}\n\n// Checks if image is allowed by schema in optimal insertion parent.\n//\n// @returns {Boolean}\nfunction isImageAllowedInParent( selection, schema, model ) {\n\tconst parent = getInsertImageParent( selection, model );\n\n\treturn schema.checkChild( parent, 'image' );\n}\n\n// Check if selection is on object.\n//\n// @returns {Boolean}\nfunction checkSelectionOnObject( selection, schema ) {\n\tconst selectedElement = selection.getSelectedElement();\n\n\treturn selectedElement && schema.isObject( selectedElement );\n}\n\n// Checks if selection is placed in other image (ie. in caption).\nfunction isInOtherImage( selection ) {\n\treturn [ ...selection.focus.getAncestors() ].every( ancestor => !ancestor.is( 'image' ) );\n}\n\n// Returns a node that will be used to insert image with `model.insertContent` to check if image can be placed there.\nfunction getInsertImageParent( selection, model ) {\n\tconst insertAt = findOptimalInsertionPosition( selection, model );\n\n\tconst parent = insertAt.parent;\n\n\tif ( parent.isEmpty && !parent.is( '$root' ) ) {\n\t\treturn parent.parent;\n\t}\n\n\treturn parent;\n}\n"]},"metadata":{},"sourceType":"module"}