{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\n\nexport default class SetHeaderColumnCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position);\n    const isInTable = !!tableCell;\n    this.isEnabled = isInTable;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection} is in a header column.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n\n    this.value = isInTable && this._isInHeading(tableCell, tableCell.parent.parent);\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n   *\n   * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position.parent);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const currentHeadingColumns = parseInt(table.getAttribute('headingColumns') || 0);\n    const {\n      column: selectionColumn\n    } = tableUtils.getCellLocation(tableCell);\n    const headingColumnsToSet = currentHeadingColumns > selectionColumn ? selectionColumn : selectionColumn + 1;\n    model.change(writer => {\n      updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n    });\n  }\n  /**\n   * Checks if a table cell is in the heading section.\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {module:engine/model/element~Element} table\n   * @returns {Boolean}\n   * @private\n   */\n\n\n  _isInHeading(tableCell, table) {\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || 0);\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const {\n      column\n    } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js"],"names":["Command","findAncestor","updateNumericAttribute","SetHeaderColumnCommand","refresh","model","editor","doc","document","selection","position","getFirstPosition","tableCell","isInTable","isEnabled","value","_isInHeading","parent","execute","tableUtils","plugins","get","tableRow","table","currentHeadingColumns","parseInt","getAttribute","column","selectionColumn","getCellLocation","headingColumnsToSet","change","writer","headingColumns"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AAEA,SAASC,YAAT,EAAuBC,sBAAvB,QAAqD,SAArD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,sBAAN,SAAqCH,OAArC,CAA6C;AAC3D;AACD;AACA;AACCI,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,GAAG,GAAGF,KAAK,CAACG,QAAlB;AACA,UAAMC,SAAS,GAAGF,GAAG,CAACE,SAAtB;AAEA,UAAMC,QAAQ,GAAGD,SAAS,CAACE,gBAAV,EAAjB;AACA,UAAMC,SAAS,GAAGX,YAAY,CAAE,WAAF,EAAeS,QAAf,CAA9B;AAEA,UAAMG,SAAS,GAAG,CAAC,CAACD,SAApB;AAEA,SAAKE,SAAL,GAAiBD,SAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKE,KAAL,GAAaF,SAAS,IAAI,KAAKG,YAAL,CAAmBJ,SAAnB,EAA8BA,SAAS,CAACK,MAAV,CAAiBA,MAA/C,CAA1B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMb,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAME,GAAG,GAAGF,KAAK,CAACG,QAAlB;AACA,UAAMC,SAAS,GAAGF,GAAG,CAACE,SAAtB;AACA,UAAMU,UAAU,GAAG,KAAKb,MAAL,CAAYc,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AAEA,UAAMX,QAAQ,GAAGD,SAAS,CAACE,gBAAV,EAAjB;AACA,UAAMC,SAAS,GAAGX,YAAY,CAAE,WAAF,EAAeS,QAAQ,CAACO,MAAxB,CAA9B;AACA,UAAMK,QAAQ,GAAGV,SAAS,CAACK,MAA3B;AACA,UAAMM,KAAK,GAAGD,QAAQ,CAACL,MAAvB;AAEA,UAAMO,qBAAqB,GAAGC,QAAQ,CAAEF,KAAK,CAACG,YAAN,CAAoB,gBAApB,KAA0C,CAA5C,CAAtC;AACA,UAAM;AAAEC,MAAAA,MAAM,EAAEC;AAAV,QAA8BT,UAAU,CAACU,eAAX,CAA4BjB,SAA5B,CAApC;AAEA,UAAMkB,mBAAmB,GAAGN,qBAAqB,GAAGI,eAAxB,GAA0CA,eAA1C,GAA4DA,eAAe,GAAG,CAA1G;AAEAvB,IAAAA,KAAK,CAAC0B,MAAN,CAAcC,MAAM,IAAI;AACvB9B,MAAAA,sBAAsB,CAAE,gBAAF,EAAoB4B,mBAApB,EAAyCP,KAAzC,EAAgDS,MAAhD,EAAwD,CAAxD,CAAtB;AACA,KAFD;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACChB,EAAAA,YAAY,CAAEJ,SAAF,EAAaW,KAAb,EAAqB;AAChC,UAAMU,cAAc,GAAGR,QAAQ,CAAEF,KAAK,CAACG,YAAN,CAAoB,gBAApB,KAA0C,CAA5C,CAA/B;AAEA,UAAMP,UAAU,GAAG,KAAKb,MAAL,CAAYc,OAAZ,CAAoBC,GAApB,CAAyB,YAAzB,CAAnB;AAEA,UAAM;AAAEM,MAAAA;AAAF,QAAaR,UAAU,CAACU,eAAX,CAA4BjB,SAA5B,CAAnB;AAEA,WAAO,CAAC,CAACqB,cAAF,IAAoBN,MAAM,GAAGM,cAApC;AACA;;AAzE0D","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\nexport default class SetHeaderColumnCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position );\n\n\t\tconst isInTable = !!tableCell;\n\n\t\tthis.isEnabled = isInTable;\n\n\t\t/**\n\t\t * Flag indicating whether the command is active. The command is active when the\n\t\t * {@link module:engine/model/selection~Selection} is in a header column.\n\t\t *\n\t\t * @observable\n\t\t * @readonly\n\t\t * @member {Boolean} #value\n\t\t */\n\t\tthis.value = isInTable && this._isInHeading( tableCell, tableCell.parent.parent );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n\t *\n\t * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n\t *\n\t * @fires execute\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\t\tconst selection = doc.selection;\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst position = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', position.parent );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentHeadingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\t\tconst { column: selectionColumn } = tableUtils.getCellLocation( tableCell );\n\n\t\tconst headingColumnsToSet = currentHeadingColumns > selectionColumn ? selectionColumn : selectionColumn + 1;\n\n\t\tmodel.change( writer => {\n\t\t\tupdateNumericAttribute( 'headingColumns', headingColumnsToSet, table, writer, 0 );\n\t\t} );\n\t}\n\n\t/**\n\t * Checks if a table cell is in the heading section.\n\t *\n\t * @param {module:engine/model/element~Element} tableCell\n\t * @param {module:engine/model/element~Element} table\n\t * @returns {Boolean}\n\t * @private\n\t */\n\t_isInHeading( tableCell, table ) {\n\t\tconst headingColumns = parseInt( table.getAttribute( 'headingColumns' ) || 0 );\n\n\t\tconst tableUtils = this.editor.plugins.get( 'TableUtils' );\n\n\t\tconst { column } = tableUtils.getCellLocation( tableCell );\n\n\t\treturn !!headingColumns && column < headingColumns;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}