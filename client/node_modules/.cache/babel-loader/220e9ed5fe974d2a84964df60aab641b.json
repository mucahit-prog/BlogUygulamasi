{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class ContainerElement extends Element {\n  /**\n   * Creates a container element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n   * @see module:engine/view/element~Element\n   * @protected\n   */\n  constructor(name, attrs, children) {\n    super(name, attrs, children);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  is(type, name = null) {\n    if (!name) {\n      return type == 'containerElement' || super.is(type);\n    } else {\n      return type == 'containerElement' && name == this.name || super.is(type, name);\n    }\n  }\n\n}\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\n\nexport function getFillerOffset() {\n  const children = [...this.getChildren()];\n  const lastChild = children[this.childCount - 1]; // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\n  if (lastChild && lastChild.is('element', 'br')) {\n    return this.childCount;\n  }\n\n  for (const child of children) {\n    // If there's any non-UI element – don't render the bogus.\n    if (!child.is('uiElement')) {\n      return null;\n    }\n  } // If there are only UI elements – render the bogus at the end of the element.\n\n\n  return this.childCount;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-image/node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js"],"names":["Element","ContainerElement","constructor","name","attrs","children","getFillerOffset","is","type","getChildren","lastChild","childCount","child"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;AACrD;AACD;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,IAAF,EAAQC,KAAR,EAAeC,QAAf,EAA0B;AACpC,UAAOF,IAAP,EAAaC,KAAb,EAAoBC,QAApB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,EAAE,CAAEC,IAAF,EAAQL,IAAI,GAAG,IAAf,EAAsB;AACvB,QAAK,CAACA,IAAN,EAAa;AACZ,aAAOK,IAAI,IAAI,kBAAR,IAA8B,MAAMD,EAAN,CAAUC,IAAV,CAArC;AACA,KAFD,MAEO;AACN,aAASA,IAAI,IAAI,kBAAR,IAA8BL,IAAI,IAAI,KAAKA,IAA7C,IAAuD,MAAMI,EAAN,CAAUC,IAAV,EAAgBL,IAAhB,CAA9D;AACA;AACD;;AA7BoD;AAgCtD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,eAAT,GAA2B;AACjC,QAAMD,QAAQ,GAAG,CAAE,GAAG,KAAKI,WAAL,EAAL,CAAjB;AACA,QAAMC,SAAS,GAAGL,QAAQ,CAAE,KAAKM,UAAL,GAAkB,CAApB,CAA1B,CAFiC,CAIjC;;AACA,MAAKD,SAAS,IAAIA,SAAS,CAACH,EAAV,CAAc,SAAd,EAAyB,IAAzB,CAAlB,EAAoD;AACnD,WAAO,KAAKI,UAAZ;AACA;;AAED,OAAM,MAAMC,KAAZ,IAAqBP,QAArB,EAAgC;AAC/B;AACA,QAAK,CAACO,KAAK,CAACL,EAAN,CAAU,WAAV,CAAN,EAAgC;AAC/B,aAAO,IAAP;AACA;AACD,GAdgC,CAgBjC;;;AACA,SAAO,KAAKI,UAAZ;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\n\nimport Element from './element';\n\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\nexport default class ContainerElement extends Element {\n\t/**\n\t * Creates a container element.\n\t *\n\t * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n\t * @see module:engine/view/element~Element\n\t * @protected\n\t */\n\tconstructor( name, attrs, children ) {\n\t\tsuper( name, attrs, children );\n\n\t\t/**\n\t\t * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n\t\t *\n\t\t * @method #getFillerOffset\n\t\t * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\t\t */\n\t\tthis.getFillerOffset = getFillerOffset;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tis( type, name = null ) {\n\t\tif ( !name ) {\n\t\t\treturn type == 'containerElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( type == 'containerElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n}\n\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\nexport function getFillerOffset() {\n\tconst children = [ ...this.getChildren() ];\n\tconst lastChild = children[ this.childCount - 1 ];\n\n\t// Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\tif ( lastChild && lastChild.is( 'element', 'br' ) ) {\n\t\treturn this.childCount;\n\t}\n\n\tfor ( const child of children ) {\n\t\t// If there's any non-UI element – don't render the bogus.\n\t\tif ( !child.is( 'uiElement' ) ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// If there are only UI elements – render the bogus at the end of the element.\n\treturn this.childCount;\n}\n"]},"metadata":{},"sourceType":"module"}