{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\n\nexport function modelToViewStyleAttribute(styles) {\n  return (evt, data, conversionApi) => {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    } // Check if there is class name associated with given value.\n\n\n    const newStyle = getStyleByName(data.attributeNewValue, styles);\n    const oldStyle = getStyleByName(data.attributeOldValue, styles);\n    const viewElement = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer;\n\n    if (oldStyle) {\n      viewWriter.removeClass(oldStyle.className, viewElement);\n    }\n\n    if (newStyle) {\n      viewWriter.addClass(newStyle.className, viewElement);\n    }\n  };\n}\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\n\nexport function viewToModelStyleAttribute(styles) {\n  // Convert only non–default styles.\n  const filteredStyles = styles.filter(style => !style.isDefault);\n  return (evt, data, conversionApi) => {\n    if (!data.modelRange) {\n      return;\n    }\n\n    const viewFigureElement = data.viewItem;\n    const modelImageElement = first(data.modelRange.getItems()); // Check if `imageStyle` attribute is allowed for current element.\n\n    if (!conversionApi.schema.checkAttribute(modelImageElement, 'imageStyle')) {\n      return;\n    } // Convert style one by one.\n\n\n    for (const style of filteredStyles) {\n      // Try to consume class corresponding with style.\n      if (conversionApi.consumable.consume(viewFigureElement, {\n        classes: style.className\n      })) {\n        // And convert this style to model attribute.\n        conversionApi.writer.setAttribute('imageStyle', style.name, modelImageElement);\n      }\n    }\n  };\n} // Returns the style with a given `name` from an array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @returns {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\n\nfunction getStyleByName(name, styles) {\n  for (const style of styles) {\n    if (style.name === name) {\n      return style;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/converters.js"],"names":["first","modelToViewStyleAttribute","styles","evt","data","conversionApi","consumable","consume","item","name","newStyle","getStyleByName","attributeNewValue","oldStyle","attributeOldValue","viewElement","mapper","toViewElement","viewWriter","writer","removeClass","className","addClass","viewToModelStyleAttribute","filteredStyles","filter","style","isDefault","modelRange","viewFigureElement","viewItem","modelImageElement","getItems","schema","checkAttribute","classes","setAttribute"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,qCAAlB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAoCC,MAApC,EAA6C;AACnD,SAAO,CAAEC,GAAF,EAAOC,IAAP,EAAaC,aAAb,KAAgC;AACtC,QAAK,CAACA,aAAa,CAACC,UAAd,CAAyBC,OAAzB,CAAkCH,IAAI,CAACI,IAAvC,EAA6CL,GAAG,CAACM,IAAjD,CAAN,EAAgE;AAC/D;AACA,KAHqC,CAKtC;;;AACA,UAAMC,QAAQ,GAAGC,cAAc,CAAEP,IAAI,CAACQ,iBAAP,EAA0BV,MAA1B,CAA/B;AACA,UAAMW,QAAQ,GAAGF,cAAc,CAAEP,IAAI,CAACU,iBAAP,EAA0BZ,MAA1B,CAA/B;AAEA,UAAMa,WAAW,GAAGV,aAAa,CAACW,MAAd,CAAqBC,aAArB,CAAoCb,IAAI,CAACI,IAAzC,CAApB;AACA,UAAMU,UAAU,GAAGb,aAAa,CAACc,MAAjC;;AAEA,QAAKN,QAAL,EAAgB;AACfK,MAAAA,UAAU,CAACE,WAAX,CAAwBP,QAAQ,CAACQ,SAAjC,EAA4CN,WAA5C;AACA;;AAED,QAAKL,QAAL,EAAgB;AACfQ,MAAAA,UAAU,CAACI,QAAX,CAAqBZ,QAAQ,CAACW,SAA9B,EAAyCN,WAAzC;AACA;AACD,GAnBD;AAoBA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,yBAAT,CAAoCrB,MAApC,EAA6C;AACnD;AACA,QAAMsB,cAAc,GAAGtB,MAAM,CAACuB,MAAP,CAAeC,KAAK,IAAI,CAACA,KAAK,CAACC,SAA/B,CAAvB;AAEA,SAAO,CAAExB,GAAF,EAAOC,IAAP,EAAaC,aAAb,KAAgC;AACtC,QAAK,CAACD,IAAI,CAACwB,UAAX,EAAwB;AACvB;AACA;;AAED,UAAMC,iBAAiB,GAAGzB,IAAI,CAAC0B,QAA/B;AACA,UAAMC,iBAAiB,GAAG/B,KAAK,CAAEI,IAAI,CAACwB,UAAL,CAAgBI,QAAhB,EAAF,CAA/B,CANsC,CAQtC;;AACA,QAAK,CAAC3B,aAAa,CAAC4B,MAAd,CAAqBC,cAArB,CAAqCH,iBAArC,EAAwD,YAAxD,CAAN,EAA+E;AAC9E;AACA,KAXqC,CAatC;;;AACA,SAAM,MAAML,KAAZ,IAAqBF,cAArB,EAAsC;AACrC;AACA,UAAKnB,aAAa,CAACC,UAAd,CAAyBC,OAAzB,CAAkCsB,iBAAlC,EAAqD;AAAEM,QAAAA,OAAO,EAAET,KAAK,CAACL;AAAjB,OAArD,CAAL,EAA2F;AAC1F;AACAhB,QAAAA,aAAa,CAACc,MAAd,CAAqBiB,YAArB,CAAmC,YAAnC,EAAiDV,KAAK,CAACjB,IAAvD,EAA6DsB,iBAA7D;AACA;AACD;AACD,GArBD;AAsBA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAASpB,cAAT,CAAyBF,IAAzB,EAA+BP,MAA/B,EAAwC;AACvC,OAAM,MAAMwB,KAAZ,IAAqBxB,MAArB,EAA8B;AAC7B,QAAKwB,KAAK,CAACjB,IAAN,KAAeA,IAApB,EAA2B;AAC1B,aAAOiB,KAAP;AACA;AACD;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\nexport function modelToViewStyleAttribute( styles ) {\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !conversionApi.consumable.consume( data.item, evt.name ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if there is class name associated with given value.\n\t\tconst newStyle = getStyleByName( data.attributeNewValue, styles );\n\t\tconst oldStyle = getStyleByName( data.attributeOldValue, styles );\n\n\t\tconst viewElement = conversionApi.mapper.toViewElement( data.item );\n\t\tconst viewWriter = conversionApi.writer;\n\n\t\tif ( oldStyle ) {\n\t\t\tviewWriter.removeClass( oldStyle.className, viewElement );\n\t\t}\n\n\t\tif ( newStyle ) {\n\t\t\tviewWriter.addClass( newStyle.className, viewElement );\n\t\t}\n\t};\n}\n\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\nexport function viewToModelStyleAttribute( styles ) {\n\t// Convert only non–default styles.\n\tconst filteredStyles = styles.filter( style => !style.isDefault );\n\n\treturn ( evt, data, conversionApi ) => {\n\t\tif ( !data.modelRange ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewFigureElement = data.viewItem;\n\t\tconst modelImageElement = first( data.modelRange.getItems() );\n\n\t\t// Check if `imageStyle` attribute is allowed for current element.\n\t\tif ( !conversionApi.schema.checkAttribute( modelImageElement, 'imageStyle' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert style one by one.\n\t\tfor ( const style of filteredStyles ) {\n\t\t\t// Try to consume class corresponding with style.\n\t\t\tif ( conversionApi.consumable.consume( viewFigureElement, { classes: style.className } ) ) {\n\t\t\t\t// And convert this style to model attribute.\n\t\t\t\tconversionApi.writer.setAttribute( 'imageStyle', style.name, modelImageElement );\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Returns the style with a given `name` from an array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @returns {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\nfunction getStyleByName( name, styles ) {\n\tfor ( const style of styles ) {\n\t\tif ( style.name === name ) {\n\t\t\treturn style;\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}