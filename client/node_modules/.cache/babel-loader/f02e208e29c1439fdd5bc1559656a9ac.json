{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/utils\n */\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\n\nexport function createViewListItemElement(writer) {\n  const viewItem = writer.createContainerElement('li');\n  viewItem.getFillerOffset = getListItemFillerOffset;\n  return viewItem;\n}\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (<li>) with the model `listItem` element.\n * The function then returns the created view list item (<li>).\n *\n * @param {module:engine/model/item~Item} modelItem Model list item.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @returns {module:engine/view/containerelement~ContainerElement} View list element.\n */\n\nexport function generateLiInUl(modelItem, conversionApi) {\n  const mapper = conversionApi.mapper;\n  const viewWriter = conversionApi.writer;\n  const listType = modelItem.getAttribute('listType') == 'numbered' ? 'ol' : 'ul';\n  const viewItem = createViewListItemElement(viewWriter);\n  const viewList = viewWriter.createContainerElement(listType, null);\n  viewWriter.insert(viewWriter.createPositionAt(viewList, 0), viewItem);\n  mapper.bindElements(modelItem, viewItem);\n  return viewItem;\n}\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param {module:engine/view/item~Item} modelItem Model list item.\n * @param {module:engine/view/containerelement~ContainerElement} injectedItem\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @param {module:engine/model/model~Model} model The model instance.\n */\n\nexport function injectViewList(modelItem, injectedItem, conversionApi, model) {\n  const injectedList = injectedItem.parent;\n  const mapper = conversionApi.mapper;\n  const viewWriter = conversionApi.writer; // The position where the view list will be inserted.\n\n  let insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem)); // 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n  // that is a \"parent\" or \"sibling\" of the injected model item.\n  // If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\n  const refItem = getSiblingListItem(modelItem.previousSibling, {\n    sameIndent: true,\n    smallerIndent: true,\n    listIndent: modelItem.getAttribute('listIndent')\n  });\n  const prevItem = modelItem.previousSibling;\n\n  if (refItem && refItem.getAttribute('listIndent') == modelItem.getAttribute('listIndent')) {\n    // There is a list item with the same indent - we found the same-level sibling.\n    // Break the list after it. The inserted view item will be added in the broken space.\n    const viewItem = mapper.toViewElement(refItem);\n    insertPosition = viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n  } else {\n    // There is no list item with the same indent. Check the previous model item.\n    if (prevItem && prevItem.name == 'listItem') {\n      // If it is a list item, it has to have a lower indent.\n      // It means that the inserted item should be added to it as its nested item.\n      insertPosition = mapper.toViewPosition(model.createPositionAt(prevItem, 'end'));\n    } else {\n      // The previous item is not a list item (or does not exist at all).\n      // Just map the position and insert the view item at the mapped position.\n      insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n    }\n  }\n\n  insertPosition = positionAfterUiElements(insertPosition); // Insert the view item.\n\n  viewWriter.insert(insertPosition, injectedList); // 2. Handle possible children of the injected model item.\n\n  if (prevItem && prevItem.name == 'listItem') {\n    const prevView = mapper.toViewElement(prevItem);\n    const walkerBoundaries = viewWriter.createRange(viewWriter.createPositionAt(prevView, 0), insertPosition);\n    const walker = walkerBoundaries.getWalker({\n      ignoreElementEnd: true\n    });\n\n    for (const value of walker) {\n      if (value.item.is('li')) {\n        const breakPosition = viewWriter.breakContainer(viewWriter.createPositionBefore(value.item));\n        const viewList = value.item.parent;\n        const targetPosition = viewWriter.createPositionAt(injectedItem, 'end');\n        mergeViewLists(viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter);\n        viewWriter.move(viewWriter.createRangeOn(viewList), targetPosition);\n        walker.position = breakPosition;\n      }\n    }\n  } else {\n    const nextViewList = injectedList.nextSibling;\n\n    if (nextViewList && (nextViewList.is('ul') || nextViewList.is('ol'))) {\n      let lastSubChild = null;\n\n      for (const child of nextViewList.getChildren()) {\n        const modelChild = mapper.toModelElement(child);\n\n        if (modelChild && modelChild.getAttribute('listIndent') > modelItem.getAttribute('listIndent')) {\n          lastSubChild = child;\n        } else {\n          break;\n        }\n      }\n\n      if (lastSubChild) {\n        viewWriter.breakContainer(viewWriter.createPositionAfter(lastSubChild));\n        viewWriter.move(viewWriter.createRangeOn(lastSubChild.parent), viewWriter.createPositionAt(injectedItem, 'end'));\n      }\n    }\n  } // Merge the inserted view list with its possible neighbor lists.\n\n\n  mergeViewLists(viewWriter, injectedList, injectedList.nextSibling);\n  mergeViewLists(viewWriter, injectedList.previousSibling, injectedList);\n}\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter The writer instance.\n * @param {module:engine/view/item~Item} firstList The first element to compare.\n * @param {module:engine/view/item~Item} secondList The second element to compare.\n * @returns {module:engine/view/position~Position|null} The position after merge or `null` when there was no merge.\n */\n\nexport function mergeViewLists(viewWriter, firstList, secondList) {\n  // Check if two lists are going to be merged.\n  if (!firstList || !secondList || firstList.name != 'ul' && firstList.name != 'ol') {\n    return null;\n  } // Both parameters are list elements, so compare types now.\n\n\n  if (firstList.name != secondList.name || firstList.getAttribute('class') !== secondList.getAttribute('class')) {\n    return null;\n  }\n\n  return viewWriter.mergeContainers(viewWriter.createPositionAfter(firstList));\n}\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @param {module:engine/view/position~Position} viewPosition\n * @returns {module:engine/view/position~Position}\n */\n\nexport function positionAfterUiElements(viewPosition) {\n  return viewPosition.getLastMatchingPosition(value => value.item.is('uiElement'));\n}\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param {module:engine/model/item~Item} modelItem\n * @param {Object} options Search criteria.\n * @param {Boolean} [options.sameIndent=false] Whether the sought sibling should have the same indentation.\n * @param {Boolean} [options.smallerIndent=false] Whether the sought sibling should have a smaller indentation.\n * @param {Number} [options.listIndent] The reference indentation.\n * @returns {module:engine/model/item~Item|null}\n */\n\nexport function getSiblingListItem(modelItem, options) {\n  const sameIndent = !!options.sameIndent;\n  const smallerIndent = !!options.smallerIndent;\n  const indent = options.listIndent;\n  let item = modelItem;\n\n  while (item && item.name == 'listItem') {\n    const itemIndent = item.getAttribute('listIndent');\n\n    if (sameIndent && indent == itemIndent || smallerIndent && indent > itemIndent) {\n      return item;\n    }\n\n    item = item.previousSibling;\n  }\n\n  return null;\n}\nexport function findInRange(range, comparator) {\n  for (const item of range.getItems()) {\n    const result = comparator(item);\n\n    if (result) {\n      return result;\n    }\n  }\n}\n/**\n * Helper method for creating a UI button and linking it with an appropriate command.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor The editor instance to which the UI component will be added.\n * @param {String} commandName The name of the command.\n * @param {Object} label The button label.\n * @param {String} icon The source of the icon.\n */\n\nexport function createUIComponent(editor, commandName, label, icon) {\n  editor.ui.componentFactory.add(commandName, locale => {\n    const command = editor.commands.get(commandName);\n    const buttonView = new ButtonView(locale);\n    buttonView.set({\n      label,\n      icon,\n      tooltip: true,\n      isToggleable: true\n    }); // Bind button model to command.\n\n    buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled'); // Execute command.\n\n    buttonView.on('execute', () => editor.execute(commandName));\n    return buttonView;\n  });\n} // Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\nfunction getListItemFillerOffset() {\n  const hasOnlyLists = !this.isEmpty && (this.getChild(0).name == 'ul' || this.getChild(0).name == 'ol');\n\n  if (this.isEmpty || hasOnlyLists) {\n    return 0;\n  }\n\n  return getFillerOffset.call(this);\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-list/src/utils.js"],"names":["getFillerOffset","ButtonView","createViewListItemElement","writer","viewItem","createContainerElement","getListItemFillerOffset","generateLiInUl","modelItem","conversionApi","mapper","viewWriter","listType","getAttribute","viewList","insert","createPositionAt","bindElements","injectViewList","injectedItem","model","injectedList","parent","insertPosition","toViewPosition","createPositionBefore","refItem","getSiblingListItem","previousSibling","sameIndent","smallerIndent","listIndent","prevItem","toViewElement","breakContainer","createPositionAfter","name","positionAfterUiElements","prevView","walkerBoundaries","createRange","walker","getWalker","ignoreElementEnd","value","item","is","breakPosition","targetPosition","mergeViewLists","nodeBefore","nodeAfter","move","createRangeOn","position","nextViewList","nextSibling","lastSubChild","child","getChildren","modelChild","toModelElement","firstList","secondList","mergeContainers","viewPosition","getLastMatchingPosition","options","indent","itemIndent","findInRange","range","comparator","getItems","result","createUIComponent","editor","commandName","label","icon","ui","componentFactory","add","locale","command","commands","get","buttonView","set","tooltip","isToggleable","bind","to","on","execute","hasOnlyLists","isEmpty","getChild","call"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/utils\n */\n\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\nexport function createViewListItemElement( writer ) {\n\tconst viewItem = writer.createContainerElement( 'li' );\n\n\tviewItem.getFillerOffset = getListItemFillerOffset;\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (<li>) with the model `listItem` element.\n * The function then returns the created view list item (<li>).\n *\n * @param {module:engine/model/item~Item} modelItem Model list item.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @returns {module:engine/view/containerelement~ContainerElement} View list element.\n */\nexport function generateLiInUl( modelItem, conversionApi ) {\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\tconst listType = modelItem.getAttribute( 'listType' ) == 'numbered' ? 'ol' : 'ul';\n\tconst viewItem = createViewListItemElement( viewWriter );\n\n\tconst viewList = viewWriter.createContainerElement( listType, null );\n\n\tviewWriter.insert( viewWriter.createPositionAt( viewList, 0 ), viewItem );\n\n\tmapper.bindElements( modelItem, viewItem );\n\n\treturn viewItem;\n}\n\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param {module:engine/view/item~Item} modelItem Model list item.\n * @param {module:engine/view/containerelement~ContainerElement} injectedItem\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @param {module:engine/model/model~Model} model The model instance.\n */\nexport function injectViewList( modelItem, injectedItem, conversionApi, model ) {\n\tconst injectedList = injectedItem.parent;\n\tconst mapper = conversionApi.mapper;\n\tconst viewWriter = conversionApi.writer;\n\n\t// The position where the view list will be inserted.\n\tlet insertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\n\t// 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n\t// that is a \"parent\" or \"sibling\" of the injected model item.\n\t// If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\tconst refItem = getSiblingListItem( modelItem.previousSibling, {\n\t\tsameIndent: true,\n\t\tsmallerIndent: true,\n\t\tlistIndent: modelItem.getAttribute( 'listIndent' )\n\t} );\n\tconst prevItem = modelItem.previousSibling;\n\n\tif ( refItem && refItem.getAttribute( 'listIndent' ) == modelItem.getAttribute( 'listIndent' ) ) {\n\t\t// There is a list item with the same indent - we found the same-level sibling.\n\t\t// Break the list after it. The inserted view item will be added in the broken space.\n\t\tconst viewItem = mapper.toViewElement( refItem );\n\t\tinsertPosition = viewWriter.breakContainer( viewWriter.createPositionAfter( viewItem ) );\n\t} else {\n\t\t// There is no list item with the same indent. Check the previous model item.\n\t\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\t\t// If it is a list item, it has to have a lower indent.\n\t\t\t// It means that the inserted item should be added to it as its nested item.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionAt( prevItem, 'end' ) );\n\t\t} else {\n\t\t\t// The previous item is not a list item (or does not exist at all).\n\t\t\t// Just map the position and insert the view item at the mapped position.\n\t\t\tinsertPosition = mapper.toViewPosition( model.createPositionBefore( modelItem ) );\n\t\t}\n\t}\n\n\tinsertPosition = positionAfterUiElements( insertPosition );\n\n\t// Insert the view item.\n\tviewWriter.insert( insertPosition, injectedList );\n\n\t// 2. Handle possible children of the injected model item.\n\tif ( prevItem && prevItem.name == 'listItem' ) {\n\t\tconst prevView = mapper.toViewElement( prevItem );\n\n\t\tconst walkerBoundaries = viewWriter.createRange( viewWriter.createPositionAt( prevView, 0 ), insertPosition );\n\t\tconst walker = walkerBoundaries.getWalker( { ignoreElementEnd: true } );\n\n\t\tfor ( const value of walker ) {\n\t\t\tif ( value.item.is( 'li' ) ) {\n\t\t\t\tconst breakPosition = viewWriter.breakContainer( viewWriter.createPositionBefore( value.item ) );\n\t\t\t\tconst viewList = value.item.parent;\n\n\t\t\t\tconst targetPosition = viewWriter.createPositionAt( injectedItem, 'end' );\n\t\t\t\tmergeViewLists( viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( viewList ), targetPosition );\n\n\t\t\t\twalker.position = breakPosition;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tconst nextViewList = injectedList.nextSibling;\n\n\t\tif ( nextViewList && ( nextViewList.is( 'ul' ) || nextViewList.is( 'ol' ) ) ) {\n\t\t\tlet lastSubChild = null;\n\n\t\t\tfor ( const child of nextViewList.getChildren() ) {\n\t\t\t\tconst modelChild = mapper.toModelElement( child );\n\n\t\t\t\tif ( modelChild && modelChild.getAttribute( 'listIndent' ) > modelItem.getAttribute( 'listIndent' ) ) {\n\t\t\t\t\tlastSubChild = child;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( lastSubChild ) {\n\t\t\t\tviewWriter.breakContainer( viewWriter.createPositionAfter( lastSubChild ) );\n\t\t\t\tviewWriter.move( viewWriter.createRangeOn( lastSubChild.parent ), viewWriter.createPositionAt( injectedItem, 'end' ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Merge the inserted view list with its possible neighbor lists.\n\tmergeViewLists( viewWriter, injectedList, injectedList.nextSibling );\n\tmergeViewLists( viewWriter, injectedList.previousSibling, injectedList );\n}\n\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter The writer instance.\n * @param {module:engine/view/item~Item} firstList The first element to compare.\n * @param {module:engine/view/item~Item} secondList The second element to compare.\n * @returns {module:engine/view/position~Position|null} The position after merge or `null` when there was no merge.\n */\nexport function mergeViewLists( viewWriter, firstList, secondList ) {\n\t// Check if two lists are going to be merged.\n\tif ( !firstList || !secondList || ( firstList.name != 'ul' && firstList.name != 'ol' ) ) {\n\t\treturn null;\n\t}\n\n\t// Both parameters are list elements, so compare types now.\n\tif ( firstList.name != secondList.name || firstList.getAttribute( 'class' ) !== secondList.getAttribute( 'class' ) ) {\n\t\treturn null;\n\t}\n\n\treturn viewWriter.mergeContainers( viewWriter.createPositionAfter( firstList ) );\n}\n\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @param {module:engine/view/position~Position} viewPosition\n * @returns {module:engine/view/position~Position}\n */\nexport function positionAfterUiElements( viewPosition ) {\n\treturn viewPosition.getLastMatchingPosition( value => value.item.is( 'uiElement' ) );\n}\n\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param {module:engine/model/item~Item} modelItem\n * @param {Object} options Search criteria.\n * @param {Boolean} [options.sameIndent=false] Whether the sought sibling should have the same indentation.\n * @param {Boolean} [options.smallerIndent=false] Whether the sought sibling should have a smaller indentation.\n * @param {Number} [options.listIndent] The reference indentation.\n * @returns {module:engine/model/item~Item|null}\n */\nexport function getSiblingListItem( modelItem, options ) {\n\tconst sameIndent = !!options.sameIndent;\n\tconst smallerIndent = !!options.smallerIndent;\n\tconst indent = options.listIndent;\n\n\tlet item = modelItem;\n\n\twhile ( item && item.name == 'listItem' ) {\n\t\tconst itemIndent = item.getAttribute( 'listIndent' );\n\n\t\tif ( ( sameIndent && indent == itemIndent ) || ( smallerIndent && indent > itemIndent ) ) {\n\t\t\treturn item;\n\t\t}\n\n\t\titem = item.previousSibling;\n\t}\n\n\treturn null;\n}\n\nexport function findInRange( range, comparator ) {\n\tfor ( const item of range.getItems() ) {\n\t\tconst result = comparator( item );\n\n\t\tif ( result ) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n/**\n * Helper method for creating a UI button and linking it with an appropriate command.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor The editor instance to which the UI component will be added.\n * @param {String} commandName The name of the command.\n * @param {Object} label The button label.\n * @param {String} icon The source of the icon.\n */\nexport function createUIComponent( editor, commandName, label, icon ) {\n\teditor.ui.componentFactory.add( commandName, locale => {\n\t\tconst command = editor.commands.get( commandName );\n\t\tconst buttonView = new ButtonView( locale );\n\n\t\tbuttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true,\n\t\t\tisToggleable: true\n\t\t} );\n\n\t\t// Bind button model to command.\n\t\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t\t// Execute command.\n\t\tbuttonView.on( 'execute', () => editor.execute( commandName ) );\n\n\t\treturn buttonView;\n\t} );\n}\n\n// Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\nfunction getListItemFillerOffset() {\n\tconst hasOnlyLists = !this.isEmpty && ( this.getChild( 0 ).name == 'ul' || this.getChild( 0 ).name == 'ol' );\n\n\tif ( this.isEmpty || hasOnlyLists ) {\n\t\treturn 0;\n\t}\n\n\treturn getFillerOffset.call( this );\n}\n"]},"metadata":{},"sourceType":"module"}