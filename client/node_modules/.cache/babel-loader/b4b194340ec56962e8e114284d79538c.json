{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport linkIcon from '../theme/icons/link.svg';\nconst linkKeystroke = 'Ctrl+K';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class LinkUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ContextualBalloon];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'LinkUI';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    editor.editing.view.addObserver(ClickObserver);\n    /**\n     * The actions view displayed inside of the balloon.\n     *\n     * @member {module:link/ui/linkactionsview~LinkActionsView}\n     */\n\n    this.actionsView = this._createActionsView();\n    /**\n     * The form view displayed inside the balloon.\n     *\n     * @member {module:link/ui/linkformview~LinkFormView}\n     */\n\n    this.formView = this._createFormView();\n    /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n\n    this._balloon = editor.plugins.get(ContextualBalloon); // Create toolbar buttons.\n\n    this._createToolbarLinkButton(); // Attach lifecycle actions to the the balloon.\n\n\n    this._enableUserBalloonInteractions();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy(); // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\n    this.formView.destroy();\n  }\n  /**\n   * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n   */\n\n\n  _createActionsView() {\n    const editor = this.editor;\n    const actionsView = new LinkActionsView(editor.locale);\n    const linkCommand = editor.commands.get('link');\n    const unlinkCommand = editor.commands.get('unlink');\n    actionsView.bind('href').to(linkCommand, 'value');\n    actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n    actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand); // Execute unlink command after clicking on the \"Edit\" button.\n\n    this.listenTo(actionsView, 'edit', () => {\n      this._addFormView();\n    }); // Execute unlink command after clicking on the \"Unlink\" button.\n\n    this.listenTo(actionsView, 'unlink', () => {\n      editor.execute('unlink');\n\n      this._hideUI();\n    }); // Close the panel on esc key press when the **actions have focus**.\n\n    actionsView.keystrokes.set('Esc', (data, cancel) => {\n      this._hideUI();\n\n      cancel();\n    }); // Open the form view on Ctrl+K when the **actions have focus**..\n\n    actionsView.keystrokes.set(linkKeystroke, (data, cancel) => {\n      this._addFormView();\n\n      cancel();\n    });\n    return actionsView;\n  }\n  /**\n   * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n   */\n\n\n  _createFormView() {\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n    const formView = new LinkFormView(editor.locale, linkCommand.manualDecorators);\n    formView.urlInputView.bind('value').to(linkCommand, 'value'); // Form elements should be read-only when corresponding commands are disabled.\n\n    formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n    formView.saveButtonView.bind('isEnabled').to(linkCommand); // Execute link command after clicking the \"Save\" button.\n\n    this.listenTo(formView, 'submit', () => {\n      editor.execute('link', formView.urlInputView.inputView.element.value, formView.getDecoratorSwitchesState());\n\n      this._closeFormView();\n    }); // Hide the panel after clicking the \"Cancel\" button.\n\n    this.listenTo(formView, 'cancel', () => {\n      this._closeFormView();\n    }); // Close the panel on esc key press when the **form has focus**.\n\n    formView.keystrokes.set('Esc', (data, cancel) => {\n      this._closeFormView();\n\n      cancel();\n    });\n    return formView;\n  }\n  /**\n   * Creates a toolbar Link button. Clicking this button will show\n   * a {@link #_balloon} attached to the selection.\n   *\n   * @private\n   */\n\n\n  _createToolbarLinkButton() {\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n    const t = editor.t; // Handle the `Ctrl+K` keystroke and show the panel.\n\n    editor.keystrokes.set(linkKeystroke, (keyEvtData, cancel) => {\n      // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n      cancel();\n\n      if (linkCommand.isEnabled) {\n        this._showUI(true);\n      }\n    });\n    editor.ui.componentFactory.add('link', locale => {\n      const button = new ButtonView(locale);\n      button.isEnabled = true;\n      button.label = t('Link');\n      button.icon = linkIcon;\n      button.keystroke = linkKeystroke;\n      button.tooltip = true;\n      button.isToggleable = true; // Bind button to the command.\n\n      button.bind('isEnabled').to(linkCommand, 'isEnabled');\n      button.bind('isOn').to(linkCommand, 'value', value => !!value); // Show the panel on button click.\n\n      this.listenTo(button, 'execute', () => this._showUI(true));\n      return button;\n    });\n  }\n  /**\n   * Attaches actions that control whether the balloon panel containing the\n   * {@link #formView} is visible or not.\n   *\n   * @private\n   */\n\n\n  _enableUserBalloonInteractions() {\n    const viewDocument = this.editor.editing.view.document; // Handle click on view document and show panel when selection is placed inside the link element.\n    // Keep panel open until selection will be inside the same link element.\n\n    this.listenTo(viewDocument, 'click', () => {\n      const parentLink = this._getSelectedLinkElement();\n\n      if (parentLink) {\n        // Then show panel but keep focus inside editor editable.\n        this._showUI();\n      }\n    }); // Focus the form if the balloon is visible and the Tab key has been pressed.\n\n    this.editor.keystrokes.set('Tab', (data, cancel) => {\n      if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n        this.actionsView.focus();\n        cancel();\n      }\n    }, {\n      // Use the high priority because the link UI navigation is more important\n      // than other feature's actions, e.g. list indentation.\n      // https://github.com/ckeditor/ckeditor5-link/issues/146\n      priority: 'high'\n    }); // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n\n    this.editor.keystrokes.set('Esc', (data, cancel) => {\n      if (this._isUIVisible) {\n        this._hideUI();\n\n        cancel();\n      }\n    }); // Close on click outside of balloon panel element.\n\n    clickOutsideHandler({\n      emitter: this.formView,\n      activator: () => this._isUIInPanel,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideUI()\n    });\n  }\n  /**\n   * Adds the {@link #actionsView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _addActionsView() {\n    if (this._areActionsInPanel) {\n      return;\n    }\n\n    this._balloon.add({\n      view: this.actionsView,\n      position: this._getBalloonPositionData()\n    });\n  }\n  /**\n   * Adds the {@link #formView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _addFormView() {\n    if (this._isFormInPanel) {\n      return;\n    }\n\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n\n    this._balloon.add({\n      view: this.formView,\n      position: this._getBalloonPositionData()\n    }); // Select input when form view is currently visible.\n\n\n    if (this._balloon.visibleView === this.formView) {\n      this.formView.urlInputView.select();\n    } // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n    // the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n    // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n    // clicked the same link), they would see the old value instead of the actual value of the command.\n    // https://github.com/ckeditor/ckeditor5-link/issues/78\n    // https://github.com/ckeditor/ckeditor5-link/issues/123\n\n\n    this.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n  }\n  /**\n   * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n   * decided upon the link command value (which has a value if the document selection is in the link).\n   *\n   * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n   * switch buttons responsible for manual decorator handling is restored.\n   *\n   * @private\n   */\n\n\n  _closeFormView() {\n    const linkCommand = this.editor.commands.get('link'); // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n    // when the user cancels the editing form.\n\n    linkCommand.restoreManualDecoratorStates();\n\n    if (linkCommand.value !== undefined) {\n      this._removeFormView();\n    } else {\n      this._hideUI();\n    }\n  }\n  /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * @protected\n   */\n\n\n  _removeFormView() {\n    if (this._isFormInPanel) {\n      // Blur the input element before removing it from DOM to prevent issues in some browsers.\n      // See https://github.com/ckeditor/ckeditor5/issues/1501.\n      this.formView.saveButtonView.focus();\n\n      this._balloon.remove(this.formView); // Because the form has an input which has focus, the focus must be brought back\n      // to the editor. Otherwise, it would be lost.\n\n\n      this.editor.editing.view.focus();\n    }\n  }\n  /**\n   * Shows the correct UI type for the current state of the command. It is either\n   * {@link #formView} or {@link #actionsView}.\n   *\n   * @param {Boolean} forceVisible\n   * @private\n   */\n\n\n  _showUI(forceVisible = false) {\n    const editor = this.editor;\n    const linkCommand = editor.commands.get('link');\n\n    if (!linkCommand.isEnabled) {\n      return;\n    } // When there's no link under the selection, go straight to the editing UI.\n\n\n    if (!this._getSelectedLinkElement()) {\n      this._addActionsView(); // Be sure panel with link is visible.\n\n\n      if (forceVisible) {\n        this._balloon.showStack('main');\n      }\n\n      this._addFormView();\n    } // If there's a link under the selection...\n    else {\n        // Go to the editing UI if actions are already visible.\n        if (this._areActionsVisible) {\n          this._addFormView();\n        } // Otherwise display just the actions UI.\n        else {\n            this._addActionsView();\n          } // Be sure panel with link is visible.\n\n\n        if (forceVisible) {\n          this._balloon.showStack('main');\n        }\n      } // Begin responding to ui#update once the UI is added.\n\n\n    this._startUpdatingUI();\n  }\n  /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * See {@link #_addFormView}, {@link #_addActionsView}.\n   *\n   * @protected\n   */\n\n\n  _hideUI() {\n    if (!this._isUIInPanel) {\n      return;\n    }\n\n    const editor = this.editor;\n    this.stopListening(editor.ui, 'update');\n    this.stopListening(this._balloon, 'change:visibleView'); // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n    // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n\n    editor.editing.view.focus(); // Remove form first because it's on top of the stack.\n\n    this._removeFormView(); // Then remove the actions view because it's beneath the form.\n\n\n    this._balloon.remove(this.actionsView);\n  }\n  /**\n   * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n   * reposition itself when the editor UI should be refreshed.\n   *\n   * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n   *\n   * @protected\n   */\n\n\n  _startUpdatingUI() {\n    const editor = this.editor;\n    const viewDocument = editor.editing.view.document;\n\n    let prevSelectedLink = this._getSelectedLinkElement();\n\n    let prevSelectionParent = getSelectionParent();\n\n    const update = () => {\n      const selectedLink = this._getSelectedLinkElement();\n\n      const selectionParent = getSelectionParent(); // Hide the panel if:\n      //\n      // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n      //   of the link,\n      // * the selection went to a different parent when creating a NEW link. E.g. someone\n      //   else modified the document.\n      // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n      //\n      // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n      // when fully selected.\n\n      if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n        this._hideUI();\n      } // Update the position of the panel when:\n      //  * link panel is in the visible stack\n      //  * the selection remains in the original link element,\n      //  * there was no link element in the first place, i.e. creating a new link\n      else if (this._isUIVisible) {\n          // If still in a link element, simply update the position of the balloon.\n          // If there was no link (e.g. inserting one), the balloon must be moved\n          // to the new position in the editing view (a new native DOM range).\n          this._balloon.updatePosition(this._getBalloonPositionData());\n        }\n\n      prevSelectedLink = selectedLink;\n      prevSelectionParent = selectionParent;\n    };\n\n    function getSelectionParent() {\n      return viewDocument.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n    }\n\n    this.listenTo(editor.ui, 'update', update);\n    this.listenTo(this._balloon, 'change:visibleView', update);\n  }\n  /**\n   * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isFormInPanel() {\n    return this._balloon.hasView(this.formView);\n  }\n  /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _areActionsInPanel() {\n    return this._balloon.hasView(this.actionsView);\n  }\n  /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _areActionsVisible() {\n    return this._balloon.visibleView === this.actionsView;\n  }\n  /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isUIInPanel() {\n    return this._isFormInPanel || this._areActionsInPanel;\n  }\n  /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n\n\n  get _isUIVisible() {\n    const visibleView = this._balloon.visibleView;\n    return visibleView == this.formView || this._areActionsVisible;\n  }\n  /**\n   * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n   * to the target element or selection.\n   *\n   * If the selection is collapsed and inside a link element, the panel will be attached to the\n   * entire link element. Otherwise, it will be attached to the selection.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n\n\n  _getBalloonPositionData() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n\n    const targetLink = this._getSelectedLinkElement();\n\n    const target = targetLink ? // When selection is inside link element, then attach panel to this element.\n    view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n    view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n    return {\n      target\n    };\n  }\n  /**\n   * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n   * the {@link module:engine/view/document~Document editing view's} selection or `null`\n   * if there is none.\n   *\n   * **Note**: For a non–collapsed selection, the link element is only returned when **fully**\n   * selected and the **only** element within the selection boundaries.\n   *\n   * @private\n   * @returns {module:engine/view/attributeelement~AttributeElement|null}\n   */\n\n\n  _getSelectedLinkElement() {\n    const view = this.editor.editing.view;\n    const selection = view.document.selection;\n\n    if (selection.isCollapsed) {\n      return findLinkElementAncestor(selection.getFirstPosition());\n    } else {\n      // The range for fully selected link is usually anchored in adjacent text nodes.\n      // Trim it to get closer to the actual link element.\n      const range = selection.getFirstRange().getTrimmed();\n      const startLink = findLinkElementAncestor(range.start);\n      const endLink = findLinkElementAncestor(range.end);\n\n      if (!startLink || startLink != endLink) {\n        return null;\n      } // Check if the link element is fully selected.\n\n\n      if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n        return startLink;\n      } else {\n        return null;\n      }\n    }\n  }\n\n} // Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\n\nfunction findLinkElementAncestor(position) {\n  return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-link/src/linkui.js"],"names":["Plugin","ClickObserver","isLinkElement","ContextualBalloon","clickOutsideHandler","ButtonView","LinkFormView","LinkActionsView","linkIcon","linkKeystroke","LinkUI","requires","pluginName","init","editor","editing","view","addObserver","actionsView","_createActionsView","formView","_createFormView","_balloon","plugins","get","_createToolbarLinkButton","_enableUserBalloonInteractions","destroy","locale","linkCommand","commands","unlinkCommand","bind","to","editButtonView","unlinkButtonView","listenTo","_addFormView","execute","_hideUI","keystrokes","set","data","cancel","manualDecorators","urlInputView","value","saveButtonView","inputView","element","getDecoratorSwitchesState","_closeFormView","t","keyEvtData","isEnabled","_showUI","ui","componentFactory","add","button","label","icon","keystroke","tooltip","isToggleable","viewDocument","document","parentLink","_getSelectedLinkElement","_areActionsVisible","focusTracker","isFocused","focus","priority","_isUIVisible","emitter","activator","_isUIInPanel","contextElements","callback","_addActionsView","_areActionsInPanel","position","_getBalloonPositionData","_isFormInPanel","visibleView","select","restoreManualDecoratorStates","undefined","_removeFormView","remove","forceVisible","showStack","_startUpdatingUI","stopListening","prevSelectedLink","prevSelectionParent","getSelectionParent","update","selectedLink","selectionParent","updatePosition","selection","getAncestors","reverse","find","node","is","hasView","targetLink","target","domConverter","mapViewToDom","viewRangeToDom","getFirstRange","isCollapsed","findLinkElementAncestor","getFirstPosition","range","getTrimmed","startLink","start","endLink","end","createRangeIn","isEqual","ancestor"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\n\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\n\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\n\nimport linkIcon from '../theme/icons/link.svg';\n\nconst linkKeystroke = 'Ctrl+K';\n\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get requires() {\n\t\treturn [ ContextualBalloon ];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'LinkUI';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.editing.view.addObserver( ClickObserver );\n\n\t\t/**\n\t\t * The actions view displayed inside of the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkactionsview~LinkActionsView}\n\t\t */\n\t\tthis.actionsView = this._createActionsView();\n\n\t\t/**\n\t\t * The form view displayed inside the balloon.\n\t\t *\n\t\t * @member {module:link/ui/linkformview~LinkFormView}\n\t\t */\n\t\tthis.formView = this._createFormView();\n\n\t\t/**\n\t\t * The contextual balloon plugin instance.\n\t\t *\n\t\t * @private\n\t\t * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n\t\t */\n\t\tthis._balloon = editor.plugins.get( ContextualBalloon );\n\n\t\t// Create toolbar buttons.\n\t\tthis._createToolbarLinkButton();\n\n\t\t// Attach lifecycle actions to the the balloon.\n\t\tthis._enableUserBalloonInteractions();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\t// Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n\t\tthis.formView.destroy();\n\t}\n\n\t/**\n\t * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n\t */\n\t_createActionsView() {\n\t\tconst editor = this.editor;\n\t\tconst actionsView = new LinkActionsView( editor.locale );\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst unlinkCommand = editor.commands.get( 'unlink' );\n\n\t\tactionsView.bind( 'href' ).to( linkCommand, 'value' );\n\t\tactionsView.editButtonView.bind( 'isEnabled' ).to( linkCommand );\n\t\tactionsView.unlinkButtonView.bind( 'isEnabled' ).to( unlinkCommand );\n\n\t\t// Execute unlink command after clicking on the \"Edit\" button.\n\t\tthis.listenTo( actionsView, 'edit', () => {\n\t\t\tthis._addFormView();\n\t\t} );\n\n\t\t// Execute unlink command after clicking on the \"Unlink\" button.\n\t\tthis.listenTo( actionsView, 'unlink', () => {\n\t\t\teditor.execute( 'unlink' );\n\t\t\tthis._hideUI();\n\t\t} );\n\n\t\t// Close the panel on esc key press when the **actions have focus**.\n\t\tactionsView.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._hideUI();\n\t\t\tcancel();\n\t\t} );\n\n\t\t// Open the form view on Ctrl+K when the **actions have focus**..\n\t\tactionsView.keystrokes.set( linkKeystroke, ( data, cancel ) => {\n\t\t\tthis._addFormView();\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn actionsView;\n\t}\n\n\t/**\n\t * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n\t *\n\t * @private\n\t * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n\t */\n\t_createFormView() {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tconst formView = new LinkFormView( editor.locale, linkCommand.manualDecorators );\n\n\t\tformView.urlInputView.bind( 'value' ).to( linkCommand, 'value' );\n\n\t\t// Form elements should be read-only when corresponding commands are disabled.\n\t\tformView.urlInputView.bind( 'isReadOnly' ).to( linkCommand, 'isEnabled', value => !value );\n\t\tformView.saveButtonView.bind( 'isEnabled' ).to( linkCommand );\n\n\t\t// Execute link command after clicking the \"Save\" button.\n\t\tthis.listenTo( formView, 'submit', () => {\n\t\t\teditor.execute( 'link', formView.urlInputView.inputView.element.value, formView.getDecoratorSwitchesState() );\n\t\t\tthis._closeFormView();\n\t\t} );\n\n\t\t// Hide the panel after clicking the \"Cancel\" button.\n\t\tthis.listenTo( formView, 'cancel', () => {\n\t\t\tthis._closeFormView();\n\t\t} );\n\n\t\t// Close the panel on esc key press when the **form has focus**.\n\t\tformView.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tthis._closeFormView();\n\t\t\tcancel();\n\t\t} );\n\n\t\treturn formView;\n\t}\n\n\t/**\n\t * Creates a toolbar Link button. Clicking this button will show\n\t * a {@link #_balloon} attached to the selection.\n\t *\n\t * @private\n\t */\n\t_createToolbarLinkButton() {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\t\tconst t = editor.t;\n\n\t\t// Handle the `Ctrl+K` keystroke and show the panel.\n\t\teditor.keystrokes.set( linkKeystroke, ( keyEvtData, cancel ) => {\n\t\t\t// Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n\t\t\tcancel();\n\n\t\t\tif ( linkCommand.isEnabled ) {\n\t\t\t\tthis._showUI( true );\n\t\t\t}\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'link', locale => {\n\t\t\tconst button = new ButtonView( locale );\n\n\t\t\tbutton.isEnabled = true;\n\t\t\tbutton.label = t( 'Link' );\n\t\t\tbutton.icon = linkIcon;\n\t\t\tbutton.keystroke = linkKeystroke;\n\t\t\tbutton.tooltip = true;\n\t\t\tbutton.isToggleable = true;\n\n\t\t\t// Bind button to the command.\n\t\t\tbutton.bind( 'isEnabled' ).to( linkCommand, 'isEnabled' );\n\t\t\tbutton.bind( 'isOn' ).to( linkCommand, 'value', value => !!value );\n\n\t\t\t// Show the panel on button click.\n\t\t\tthis.listenTo( button, 'execute', () => this._showUI( true ) );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n\n\t/**\n\t * Attaches actions that control whether the balloon panel containing the\n\t * {@link #formView} is visible or not.\n\t *\n\t * @private\n\t */\n\t_enableUserBalloonInteractions() {\n\t\tconst viewDocument = this.editor.editing.view.document;\n\n\t\t// Handle click on view document and show panel when selection is placed inside the link element.\n\t\t// Keep panel open until selection will be inside the same link element.\n\t\tthis.listenTo( viewDocument, 'click', () => {\n\t\t\tconst parentLink = this._getSelectedLinkElement();\n\n\t\t\tif ( parentLink ) {\n\t\t\t\t// Then show panel but keep focus inside editor editable.\n\t\t\t\tthis._showUI();\n\t\t\t}\n\t\t} );\n\n\t\t// Focus the form if the balloon is visible and the Tab key has been pressed.\n\t\tthis.editor.keystrokes.set( 'Tab', ( data, cancel ) => {\n\t\t\tif ( this._areActionsVisible && !this.actionsView.focusTracker.isFocused ) {\n\t\t\t\tthis.actionsView.focus();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t}, {\n\t\t\t// Use the high priority because the link UI navigation is more important\n\t\t\t// than other feature's actions, e.g. list indentation.\n\t\t\t// https://github.com/ckeditor/ckeditor5-link/issues/146\n\t\t\tpriority: 'high'\n\t\t} );\n\n\t\t// Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n\t\tthis.editor.keystrokes.set( 'Esc', ( data, cancel ) => {\n\t\t\tif ( this._isUIVisible ) {\n\t\t\t\tthis._hideUI();\n\t\t\t\tcancel();\n\t\t\t}\n\t\t} );\n\n\t\t// Close on click outside of balloon panel element.\n\t\tclickOutsideHandler( {\n\t\t\temitter: this.formView,\n\t\t\tactivator: () => this._isUIInPanel,\n\t\t\tcontextElements: [ this._balloon.view.element ],\n\t\t\tcallback: () => this._hideUI()\n\t\t} );\n\t}\n\n\t/**\n\t * Adds the {@link #actionsView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_addActionsView() {\n\t\tif ( this._areActionsInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.actionsView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t} );\n\t}\n\n\t/**\n\t * Adds the {@link #formView} to the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_addFormView() {\n\t\tif ( this._isFormInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tthis._balloon.add( {\n\t\t\tview: this.formView,\n\t\t\tposition: this._getBalloonPositionData()\n\t\t} );\n\n\t\t// Select input when form view is currently visible.\n\t\tif ( this._balloon.visibleView === this.formView ) {\n\t\t\tthis.formView.urlInputView.select();\n\t\t}\n\n\t\t// Make sure that each time the panel shows up, the URL field remains in sync with the value of\n\t\t// the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n\t\t// unaltered) and re-opened it without changing the value of the link command (e.g. because they\n\t\t// clicked the same link), they would see the old value instead of the actual value of the command.\n\t\t// https://github.com/ckeditor/ckeditor5-link/issues/78\n\t\t// https://github.com/ckeditor/ckeditor5-link/issues/123\n\t\tthis.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n\t}\n\n\t/**\n\t * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n\t * decided upon the link command value (which has a value if the document selection is in the link).\n\t *\n\t * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n\t * switch buttons responsible for manual decorator handling is restored.\n\t *\n\t * @private\n\t */\n\t_closeFormView() {\n\t\tconst linkCommand = this.editor.commands.get( 'link' );\n\n\t\t// Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n\t\t// when the user cancels the editing form.\n\t\tlinkCommand.restoreManualDecoratorStates();\n\n\t\tif ( linkCommand.value !== undefined ) {\n\t\t\tthis._removeFormView();\n\t\t} else {\n\t\t\tthis._hideUI();\n\t\t}\n\t}\n\n\t/**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * @protected\n\t */\n\t_removeFormView() {\n\t\tif ( this._isFormInPanel ) {\n\t\t\t// Blur the input element before removing it from DOM to prevent issues in some browsers.\n\t\t\t// See https://github.com/ckeditor/ckeditor5/issues/1501.\n\t\t\tthis.formView.saveButtonView.focus();\n\n\t\t\tthis._balloon.remove( this.formView );\n\n\t\t\t// Because the form has an input which has focus, the focus must be brought back\n\t\t\t// to the editor. Otherwise, it would be lost.\n\t\t\tthis.editor.editing.view.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Shows the correct UI type for the current state of the command. It is either\n\t * {@link #formView} or {@link #actionsView}.\n\t *\n\t * @param {Boolean} forceVisible\n\t * @private\n\t */\n\t_showUI( forceVisible = false ) {\n\t\tconst editor = this.editor;\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tif ( !linkCommand.isEnabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When there's no link under the selection, go straight to the editing UI.\n\t\tif ( !this._getSelectedLinkElement() ) {\n\t\t\tthis._addActionsView();\n\n\t\t\t// Be sure panel with link is visible.\n\t\t\tif ( forceVisible ) {\n\t\t\t\tthis._balloon.showStack( 'main' );\n\t\t\t}\n\n\t\t\tthis._addFormView();\n\t\t}\n\t\t// If there's a link under the selection...\n\t\telse {\n\t\t\t// Go to the editing UI if actions are already visible.\n\t\t\tif ( this._areActionsVisible ) {\n\t\t\t\tthis._addFormView();\n\t\t\t}\n\t\t\t// Otherwise display just the actions UI.\n\t\t\telse {\n\t\t\t\tthis._addActionsView();\n\t\t\t}\n\n\t\t\t// Be sure panel with link is visible.\n\t\t\tif ( forceVisible ) {\n\t\t\t\tthis._balloon.showStack( 'main' );\n\t\t\t}\n\t\t}\n\n\t\t// Begin responding to ui#update once the UI is added.\n\t\tthis._startUpdatingUI();\n\t}\n\n\t/**\n\t * Removes the {@link #formView} from the {@link #_balloon}.\n\t *\n\t * See {@link #_addFormView}, {@link #_addActionsView}.\n\t *\n\t * @protected\n\t */\n\t_hideUI() {\n\t\tif ( !this._isUIInPanel ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\n\t\tthis.stopListening( editor.ui, 'update' );\n\t\tthis.stopListening( this._balloon, 'change:visibleView' );\n\n\t\t// Make sure the focus always gets back to the editable _before_ removing the focused form view.\n\t\t// Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n\t\teditor.editing.view.focus();\n\n\t\t// Remove form first because it's on top of the stack.\n\t\tthis._removeFormView();\n\n\t\t// Then remove the actions view because it's beneath the form.\n\t\tthis._balloon.remove( this.actionsView );\n\t}\n\n\t/**\n\t * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n\t * reposition itself when the editor UI should be refreshed.\n\t *\n\t * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n\t *\n\t * @protected\n\t */\n\t_startUpdatingUI() {\n\t\tconst editor = this.editor;\n\t\tconst viewDocument = editor.editing.view.document;\n\n\t\tlet prevSelectedLink = this._getSelectedLinkElement();\n\t\tlet prevSelectionParent = getSelectionParent();\n\n\t\tconst update = () => {\n\t\t\tconst selectedLink = this._getSelectedLinkElement();\n\t\t\tconst selectionParent = getSelectionParent();\n\n\t\t\t// Hide the panel if:\n\t\t\t//\n\t\t\t// * the selection went out of the EXISTING link element. E.g. user moved the caret out\n\t\t\t//   of the link,\n\t\t\t// * the selection went to a different parent when creating a NEW link. E.g. someone\n\t\t\t//   else modified the document.\n\t\t\t// * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n\t\t\t//\n\t\t\t// Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n\t\t\t// when fully selected.\n\t\t\tif ( ( prevSelectedLink && !selectedLink ) ||\n\t\t\t\t( !prevSelectedLink && selectionParent !== prevSelectionParent ) ) {\n\t\t\t\tthis._hideUI();\n\t\t\t}\n\t\t\t// Update the position of the panel when:\n\t\t\t//  * link panel is in the visible stack\n\t\t\t//  * the selection remains in the original link element,\n\t\t\t//  * there was no link element in the first place, i.e. creating a new link\n\t\t\telse if ( this._isUIVisible ) {\n\t\t\t\t// If still in a link element, simply update the position of the balloon.\n\t\t\t\t// If there was no link (e.g. inserting one), the balloon must be moved\n\t\t\t\t// to the new position in the editing view (a new native DOM range).\n\t\t\t\tthis._balloon.updatePosition( this._getBalloonPositionData() );\n\t\t\t}\n\n\t\t\tprevSelectedLink = selectedLink;\n\t\t\tprevSelectionParent = selectionParent;\n\t\t};\n\n\t\tfunction getSelectionParent() {\n\t\t\treturn viewDocument.selection.focus.getAncestors()\n\t\t\t\t.reverse()\n\t\t\t\t.find( node => node.is( 'element' ) );\n\t\t}\n\n\t\tthis.listenTo( editor.ui, 'update', update );\n\t\tthis.listenTo( this._balloon, 'change:visibleView', update );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isFormInPanel() {\n\t\treturn this._balloon.hasView( this.formView );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _areActionsInPanel() {\n\t\treturn this._balloon.hasView( this.actionsView );\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _areActionsVisible() {\n\t\treturn this._balloon.visibleView === this.actionsView;\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isUIInPanel() {\n\t\treturn this._isFormInPanel || this._areActionsInPanel;\n\t}\n\n\t/**\n\t * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n\t * currently visible.\n\t *\n\t * @readonly\n\t * @protected\n\t * @type {Boolean}\n\t */\n\tget _isUIVisible() {\n\t\tconst visibleView = this._balloon.visibleView;\n\n\t\treturn visibleView == this.formView || this._areActionsVisible;\n\t}\n\n\t/**\n\t * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n\t * to the target element or selection.\n\t *\n\t * If the selection is collapsed and inside a link element, the panel will be attached to the\n\t * entire link element. Otherwise, it will be attached to the selection.\n\t *\n\t * @private\n\t * @returns {module:utils/dom/position~Options}\n\t */\n\t_getBalloonPositionData() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst viewDocument = view.document;\n\t\tconst targetLink = this._getSelectedLinkElement();\n\n\t\tconst target = targetLink ?\n\t\t\t// When selection is inside link element, then attach panel to this element.\n\t\t\tview.domConverter.mapViewToDom( targetLink ) :\n\t\t\t// Otherwise attach panel to the selection.\n\t\t\tview.domConverter.viewRangeToDom( viewDocument.selection.getFirstRange() );\n\n\t\treturn { target };\n\t}\n\n\t/**\n\t * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n\t * the {@link module:engine/view/document~Document editing view's} selection or `null`\n\t * if there is none.\n\t *\n\t * **Note**: For a non–collapsed selection, the link element is only returned when **fully**\n\t * selected and the **only** element within the selection boundaries.\n\t *\n\t * @private\n\t * @returns {module:engine/view/attributeelement~AttributeElement|null}\n\t */\n\t_getSelectedLinkElement() {\n\t\tconst view = this.editor.editing.view;\n\t\tconst selection = view.document.selection;\n\n\t\tif ( selection.isCollapsed ) {\n\t\t\treturn findLinkElementAncestor( selection.getFirstPosition() );\n\t\t} else {\n\t\t\t// The range for fully selected link is usually anchored in adjacent text nodes.\n\t\t\t// Trim it to get closer to the actual link element.\n\t\t\tconst range = selection.getFirstRange().getTrimmed();\n\t\t\tconst startLink = findLinkElementAncestor( range.start );\n\t\t\tconst endLink = findLinkElementAncestor( range.end );\n\n\t\t\tif ( !startLink || startLink != endLink ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Check if the link element is fully selected.\n\t\t\tif ( view.createRangeIn( startLink ).getTrimmed().isEqual( range ) ) {\n\t\t\t\treturn startLink;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor( position ) {\n\treturn position.getAncestors().find( ancestor => isLinkElement( ancestor ) );\n}\n"]},"metadata":{},"sourceType":"module"}