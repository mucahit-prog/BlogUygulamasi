{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\nimport Range from '../range';\nimport Position from '../position';\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\n\nexport function injectSelectionPostFixer(model) {\n  model.document.registerPostFixer(writer => selectionPostFixer(writer, model));\n} // The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n\nfunction selectionPostFixer(writer, model) {\n  const selection = model.document.selection;\n  const schema = model.schema;\n  const ranges = [];\n  let wasFixed = false;\n\n  for (const modelRange of selection.getRanges()) {\n    // Go through all ranges in selection and try fixing each of them.\n    // Those ranges might overlap but will be corrected later.\n    const correctedRange = tryFixingRange(modelRange, schema);\n\n    if (correctedRange) {\n      ranges.push(correctedRange);\n      wasFixed = true;\n    } else {\n      ranges.push(modelRange);\n    }\n  } // If any of ranges were corrected update the selection.\n\n\n  if (wasFixed) {\n    // The above algorithm might create ranges that intersects each other when selection contains more then one range.\n    // This is case happens mostly on Firefox which creates multiple ranges for selected table.\n    let fixedRanges = ranges; // Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n    // we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\n    if (ranges.length > 1) {\n      const selectionStart = ranges[0].start;\n      const selectionEnd = ranges[ranges.length - 1].end;\n      fixedRanges = [new Range(selectionStart, selectionEnd)];\n    }\n\n    writer.setSelection(fixedRanges, {\n      backward: selection.isBackward\n    });\n  }\n} // Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingRange(range, schema) {\n  if (range.isCollapsed) {\n    return tryFixingCollapsedRange(range, schema);\n  }\n\n  return tryFixingNonCollapsedRage(range, schema);\n} // Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingCollapsedRange(range, schema) {\n  const originalPosition = range.start;\n  const nearestSelectionRange = schema.getNearestSelectionRange(originalPosition); // This might be null ie when editor data is empty.\n  // In such cases there is no need to fix the selection range.\n\n  if (!nearestSelectionRange) {\n    return null;\n  }\n\n  const fixedPosition = nearestSelectionRange.start; // Fixed position is the same as original - no need to return corrected range.\n\n  if (originalPosition.isEqual(fixedPosition)) {\n    return null;\n  } // Check single node selection (happens in tables).\n\n\n  if (fixedPosition.nodeAfter && schema.isLimit(fixedPosition.nodeAfter)) {\n    return new Range(fixedPosition, Position._createAfter(fixedPosition.nodeAfter));\n  }\n\n  return new Range(fixedPosition);\n} // Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingNonCollapsedRage(range, schema) {\n  const start = range.start;\n  const end = range.end;\n  const isTextAllowedOnStart = schema.checkChild(start, '$text');\n  const isTextAllowedOnEnd = schema.checkChild(end, '$text');\n  const startLimitElement = schema.getLimitElement(start);\n  const endLimitElement = schema.getLimitElement(end); // Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\n  if (startLimitElement === endLimitElement) {\n    // Range is valid when both position allows to place a text:\n    // - <block>f[oobarba]z</block>\n    // This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n    if (isTextAllowedOnStart && isTextAllowedOnEnd) {\n      return null;\n    } // Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n    // - [<block>foo</block>]    ->    <block>[foo]</block>\n    // - [<block>foo]</block>    ->    <block>[foo]</block>\n    // - <block>f[oo</block>]    ->    <block>f[oo]</block>\n    // - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\n\n    if (checkSelectionOnNonLimitElements(start, end, schema)) {\n      const isStartObject = start.nodeAfter && schema.isObject(start.nodeAfter);\n      const fixedStart = isStartObject ? null : schema.getNearestSelectionRange(start, 'forward');\n      const isEndObject = end.nodeBefore && schema.isObject(end.nodeBefore);\n      const fixedEnd = isEndObject ? null : schema.getNearestSelectionRange(end, 'backward'); // The schema.getNearestSelectionRange might return null - if that happens use original position.\n\n      const rangeStart = fixedStart ? fixedStart.start : start;\n      const rangeEnd = fixedEnd ? fixedEnd.start : end;\n      return new Range(rangeStart, rangeEnd);\n    }\n  }\n\n  const isStartInLimit = startLimitElement && !startLimitElement.is('rootElement');\n  const isEndInLimit = endLimitElement && !endLimitElement.is('rootElement'); // At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n  // then the range crossed limit element boundaries and needs to be fixed.\n\n  if (isStartInLimit || isEndInLimit) {\n    const bothInSameParent = start.nodeAfter && end.nodeBefore && start.nodeAfter.parent === end.nodeBefore.parent;\n    const expandStart = isStartInLimit && (!bothInSameParent || !isInObject(start.nodeAfter, schema));\n    const expandEnd = isEndInLimit && (!bothInSameParent || !isInObject(end.nodeBefore, schema)); // Although we've already found limit element on start/end positions we must find the outer-most limit element.\n    // as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\n    let fixedStart = start;\n    let fixedEnd = end;\n\n    if (expandStart) {\n      fixedStart = Position._createBefore(findOutermostLimitAncestor(startLimitElement, schema));\n    }\n\n    if (expandEnd) {\n      fixedEnd = Position._createAfter(findOutermostLimitAncestor(endLimitElement, schema));\n    }\n\n    return new Range(fixedStart, fixedEnd);\n  } // Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\n\n  return null;\n} // Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\n\n\nfunction findOutermostLimitAncestor(startingNode, schema) {\n  let isLimitNode = startingNode;\n  let parent = isLimitNode; // Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\n  while (schema.isLimit(parent) && parent.parent) {\n    isLimitNode = parent;\n    parent = parent.parent;\n  }\n\n  return isLimitNode;\n} // Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction checkSelectionOnNonLimitElements(start, end, schema) {\n  const startIsOnBlock = start.nodeAfter && !schema.isLimit(start.nodeAfter) || schema.checkChild(start, '$text');\n  const endIsOnBlock = end.nodeBefore && !schema.isLimit(end.nodeBefore) || schema.checkChild(end, '$text'); // We should fix such selection when one of those nodes needs fixing.\n\n  return startIsOnBlock || endIsOnBlock;\n} // Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isInObject(node, schema) {\n  return node && schema.isObject(node);\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js"],"names":["Range","Position","injectSelectionPostFixer","model","document","registerPostFixer","writer","selectionPostFixer","selection","schema","ranges","wasFixed","modelRange","getRanges","correctedRange","tryFixingRange","push","fixedRanges","length","selectionStart","start","selectionEnd","end","setSelection","backward","isBackward","range","isCollapsed","tryFixingCollapsedRange","tryFixingNonCollapsedRage","originalPosition","nearestSelectionRange","getNearestSelectionRange","fixedPosition","isEqual","nodeAfter","isLimit","_createAfter","isTextAllowedOnStart","checkChild","isTextAllowedOnEnd","startLimitElement","getLimitElement","endLimitElement","checkSelectionOnNonLimitElements","isStartObject","isObject","fixedStart","isEndObject","nodeBefore","fixedEnd","rangeStart","rangeEnd","isStartInLimit","is","isEndInLimit","bothInSameParent","parent","expandStart","isInObject","expandEnd","_createBefore","findOutermostLimitAncestor","startingNode","isLimitNode","startIsOnBlock","endIsOnBlock","node"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\n\nimport Range from '../range';\nimport Position from '../position';\n\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport function injectSelectionPostFixer( model ) {\n\tmodel.document.registerPostFixer( writer => selectionPostFixer( writer, model ) );\n}\n\n// The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\nfunction selectionPostFixer( writer, model ) {\n\tconst selection = model.document.selection;\n\tconst schema = model.schema;\n\n\tconst ranges = [];\n\n\tlet wasFixed = false;\n\n\tfor ( const modelRange of selection.getRanges() ) {\n\t\t// Go through all ranges in selection and try fixing each of them.\n\t\t// Those ranges might overlap but will be corrected later.\n\t\tconst correctedRange = tryFixingRange( modelRange, schema );\n\n\t\tif ( correctedRange ) {\n\t\t\tranges.push( correctedRange );\n\t\t\twasFixed = true;\n\t\t} else {\n\t\t\tranges.push( modelRange );\n\t\t}\n\t}\n\n\t// If any of ranges were corrected update the selection.\n\tif ( wasFixed ) {\n\t\t// The above algorithm might create ranges that intersects each other when selection contains more then one range.\n\t\t// This is case happens mostly on Firefox which creates multiple ranges for selected table.\n\t\tlet fixedRanges = ranges;\n\n\t\t// Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n\t\t// we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\t\tif ( ranges.length > 1 ) {\n\t\t\tconst selectionStart = ranges[ 0 ].start;\n\t\t\tconst selectionEnd = ranges[ ranges.length - 1 ].end;\n\n\t\t\tfixedRanges = [ new Range( selectionStart, selectionEnd ) ];\n\t\t}\n\n\t\twriter.setSelection( fixedRanges, { backward: selection.isBackward } );\n\t}\n}\n\n// Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingRange( range, schema ) {\n\tif ( range.isCollapsed ) {\n\t\treturn tryFixingCollapsedRange( range, schema );\n\t}\n\n\treturn tryFixingNonCollapsedRage( range, schema );\n}\n\n// Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingCollapsedRange( range, schema ) {\n\tconst originalPosition = range.start;\n\n\tconst nearestSelectionRange = schema.getNearestSelectionRange( originalPosition );\n\n\t// This might be null ie when editor data is empty.\n\t// In such cases there is no need to fix the selection range.\n\tif ( !nearestSelectionRange ) {\n\t\treturn null;\n\t}\n\n\tconst fixedPosition = nearestSelectionRange.start;\n\n\t// Fixed position is the same as original - no need to return corrected range.\n\tif ( originalPosition.isEqual( fixedPosition ) ) {\n\t\treturn null;\n\t}\n\n\t// Check single node selection (happens in tables).\n\tif ( fixedPosition.nodeAfter && schema.isLimit( fixedPosition.nodeAfter ) ) {\n\t\treturn new Range( fixedPosition, Position._createAfter( fixedPosition.nodeAfter ) );\n\t}\n\n\treturn new Range( fixedPosition );\n}\n\n// Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\nfunction tryFixingNonCollapsedRage( range, schema ) {\n\tconst start = range.start;\n\tconst end = range.end;\n\n\tconst isTextAllowedOnStart = schema.checkChild( start, '$text' );\n\tconst isTextAllowedOnEnd = schema.checkChild( end, '$text' );\n\n\tconst startLimitElement = schema.getLimitElement( start );\n\tconst endLimitElement = schema.getLimitElement( end );\n\n\t// Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\tif ( startLimitElement === endLimitElement ) {\n\t\t// Range is valid when both position allows to place a text:\n\t\t// - <block>f[oobarba]z</block>\n\t\t// This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n\t\tif ( isTextAllowedOnStart && isTextAllowedOnEnd ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n\t\t// - [<block>foo</block>]    ->    <block>[foo]</block>\n\t\t// - [<block>foo]</block>    ->    <block>[foo]</block>\n\t\t// - <block>f[oo</block>]    ->    <block>f[oo]</block>\n\t\t// - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\t\tif ( checkSelectionOnNonLimitElements( start, end, schema ) ) {\n\t\t\tconst isStartObject = start.nodeAfter && schema.isObject( start.nodeAfter );\n\t\t\tconst fixedStart = isStartObject ? null : schema.getNearestSelectionRange( start, 'forward' );\n\n\t\t\tconst isEndObject = end.nodeBefore && schema.isObject( end.nodeBefore );\n\t\t\tconst fixedEnd = isEndObject ? null : schema.getNearestSelectionRange( end, 'backward' );\n\n\t\t\t// The schema.getNearestSelectionRange might return null - if that happens use original position.\n\t\t\tconst rangeStart = fixedStart ? fixedStart.start : start;\n\t\t\tconst rangeEnd = fixedEnd ? fixedEnd.start : end;\n\n\t\t\treturn new Range( rangeStart, rangeEnd );\n\t\t}\n\t}\n\n\tconst isStartInLimit = startLimitElement && !startLimitElement.is( 'rootElement' );\n\tconst isEndInLimit = endLimitElement && !endLimitElement.is( 'rootElement' );\n\n\t// At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n\t// then the range crossed limit element boundaries and needs to be fixed.\n\tif ( isStartInLimit || isEndInLimit ) {\n\t\tconst bothInSameParent = ( start.nodeAfter && end.nodeBefore ) && start.nodeAfter.parent === end.nodeBefore.parent;\n\n\t\tconst expandStart = isStartInLimit && ( !bothInSameParent || !isInObject( start.nodeAfter, schema ) );\n\t\tconst expandEnd = isEndInLimit && ( !bothInSameParent || !isInObject( end.nodeBefore, schema ) );\n\n\t\t// Although we've already found limit element on start/end positions we must find the outer-most limit element.\n\t\t// as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\t\tlet fixedStart = start;\n\t\tlet fixedEnd = end;\n\n\t\tif ( expandStart ) {\n\t\t\tfixedStart = Position._createBefore( findOutermostLimitAncestor( startLimitElement, schema ) );\n\t\t}\n\n\t\tif ( expandEnd ) {\n\t\t\tfixedEnd = Position._createAfter( findOutermostLimitAncestor( endLimitElement, schema ) );\n\t\t}\n\n\t\treturn new Range( fixedStart, fixedEnd );\n\t}\n\n\t// Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\treturn null;\n}\n\n// Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\nfunction findOutermostLimitAncestor( startingNode, schema ) {\n\tlet isLimitNode = startingNode;\n\tlet parent = isLimitNode;\n\n\t// Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\twhile ( schema.isLimit( parent ) && parent.parent ) {\n\t\tisLimitNode = parent;\n\t\tparent = parent.parent;\n\t}\n\n\treturn isLimitNode;\n}\n\n// Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction checkSelectionOnNonLimitElements( start, end, schema ) {\n\tconst startIsOnBlock = ( start.nodeAfter && !schema.isLimit( start.nodeAfter ) ) || schema.checkChild( start, '$text' );\n\tconst endIsOnBlock = ( end.nodeBefore && !schema.isLimit( end.nodeBefore ) ) || schema.checkChild( end, '$text' );\n\n\t// We should fix such selection when one of those nodes needs fixing.\n\treturn startIsOnBlock || endIsOnBlock;\n}\n\n// Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\nfunction isInObject( node, schema ) {\n\treturn node && schema.isObject( node );\n}\n\n"]},"metadata":{},"sourceType":"module"}