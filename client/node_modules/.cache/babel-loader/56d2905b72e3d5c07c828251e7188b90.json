{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class ImageLoadObserver extends Observer {\n  constructor(view) {\n    super(view);\n    /**\n     * List of img DOM elements that are observed by this observer.\n     *\n     * @private\n     * @type {Set.<HTMLElement>}\n     */\n\n    this._observedElements = new Set();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe(domRoot, name) {\n    const viewRoot = this.document.getRoot(name); // When there is a change in one of the view element\n    // we need to check if there are any new `<img/>` elements to observe.\n\n    viewRoot.on('change:children', (evt, node) => {\n      // Wait for the render to be sure that `<img/>` elements are rendered in the DOM root.\n      this.view.once('render', () => this._updateObservedElements(domRoot, node));\n    });\n  }\n  /**\n   * Updates the list of observed `<img/>` elements.\n   *\n   * @private\n   * @param {HTMLElement} domRoot DOM root element.\n   * @param {module:engine/view/element~Element} viewNode View element where children have changed.\n   */\n\n\n  _updateObservedElements(domRoot, viewNode) {\n    if (!viewNode.is('element') || viewNode.is('attributeElement')) {\n      return;\n    }\n\n    const domNode = this.view.domConverter.mapViewToDom(viewNode); // If there is no `domNode` it means that it was removed from the DOM in the meanwhile.\n\n    if (!domNode) {\n      return;\n    }\n\n    for (const domElement of domNode.querySelectorAll('img')) {\n      if (!this._observedElements.has(domElement)) {\n        this.listenTo(domElement, 'load', (evt, domEvt) => this._fireEvents(domEvt));\n\n        this._observedElements.add(domElement);\n      }\n    } // Clean up the list of observed elements from elements that has been removed from the root.\n\n\n    for (const domElement of this._observedElements) {\n      if (!domRoot.contains(domElement)) {\n        this.stopListening(domElement);\n\n        this._observedElements.delete(domElement);\n      }\n    }\n  }\n  /**\n   * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n   * {@link module:engine/view/document~Document#event:imageLoaded}\n   * if observer {@link #isEnabled is enabled}.\n   *\n   * @protected\n   * @param {Event} domEvent The DOM event.\n   */\n\n\n  _fireEvents(domEvent) {\n    if (this.isEnabled) {\n      this.document.fire('layoutChanged');\n      this.document.fire('imageLoaded', domEvent);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._observedElements.clear();\n\n    super.destroy();\n  }\n\n}\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/image/imageloadobserver.js"],"names":["Observer","ImageLoadObserver","constructor","view","_observedElements","Set","observe","domRoot","name","viewRoot","document","getRoot","on","evt","node","once","_updateObservedElements","viewNode","is","domNode","domConverter","mapViewToDom","domElement","querySelectorAll","has","listenTo","domEvt","_fireEvents","add","contains","stopListening","delete","domEvent","isEnabled","fire","destroy","clear"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,uDAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCD,QAAhC,CAAyC;AACvDE,EAAAA,WAAW,CAAEC,IAAF,EAAS;AACnB,UAAOA,IAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAWC,IAAX,EAAkB;AACxB,UAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAAd,CAAuBH,IAAvB,CAAjB,CADwB,CAGxB;AACA;;AACAC,IAAAA,QAAQ,CAACG,EAAT,CAAa,iBAAb,EAAgC,CAAEC,GAAF,EAAOC,IAAP,KAAiB;AAChD;AACA,WAAKX,IAAL,CAAUY,IAAV,CAAgB,QAAhB,EAA0B,MAAM,KAAKC,uBAAL,CAA8BT,OAA9B,EAAuCO,IAAvC,CAAhC;AACA,KAHD;AAIA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,uBAAuB,CAAET,OAAF,EAAWU,QAAX,EAAsB;AAC5C,QAAK,CAACA,QAAQ,CAACC,EAAT,CAAa,SAAb,CAAD,IAA6BD,QAAQ,CAACC,EAAT,CAAa,kBAAb,CAAlC,EAAsE;AACrE;AACA;;AAED,UAAMC,OAAO,GAAG,KAAKhB,IAAL,CAAUiB,YAAV,CAAuBC,YAAvB,CAAqCJ,QAArC,CAAhB,CAL4C,CAO5C;;AACA,QAAK,CAACE,OAAN,EAAgB;AACf;AACA;;AAED,SAAM,MAAMG,UAAZ,IAA0BH,OAAO,CAACI,gBAAR,CAA0B,KAA1B,CAA1B,EAA8D;AAC7D,UAAK,CAAC,KAAKnB,iBAAL,CAAuBoB,GAAvB,CAA4BF,UAA5B,CAAN,EAAiD;AAChD,aAAKG,QAAL,CAAeH,UAAf,EAA2B,MAA3B,EAAmC,CAAET,GAAF,EAAOa,MAAP,KAAmB,KAAKC,WAAL,CAAkBD,MAAlB,CAAtD;;AACA,aAAKtB,iBAAL,CAAuBwB,GAAvB,CAA4BN,UAA5B;AACA;AACD,KAjB2C,CAmB5C;;;AACA,SAAM,MAAMA,UAAZ,IAA0B,KAAKlB,iBAA/B,EAAmD;AAClD,UAAK,CAACG,OAAO,CAACsB,QAAR,CAAkBP,UAAlB,CAAN,EAAuC;AACtC,aAAKQ,aAAL,CAAoBR,UAApB;;AACA,aAAKlB,iBAAL,CAAuB2B,MAAvB,CAA+BT,UAA/B;AACA;AACD;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCK,EAAAA,WAAW,CAAEK,QAAF,EAAa;AACvB,QAAK,KAAKC,SAAV,EAAsB;AACrB,WAAKvB,QAAL,CAAcwB,IAAd,CAAoB,eAApB;AACA,WAAKxB,QAAL,CAAcwB,IAAd,CAAoB,aAApB,EAAmCF,QAAnC;AACA;AACD;AAED;AACD;AACA;;;AACCG,EAAAA,OAAO,GAAG;AACT,SAAK/B,iBAAL,CAAuBgC,KAAvB;;AACA,UAAMD,OAAN;AACA;;AAnFsD;AAsFxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\n\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\n\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\nexport default class ImageLoadObserver extends Observer {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\t/**\n\t\t * List of img DOM elements that are observed by this observer.\n\t\t *\n\t\t * @private\n\t\t * @type {Set.<HTMLElement>}\n\t\t */\n\t\tthis._observedElements = new Set();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tobserve( domRoot, name ) {\n\t\tconst viewRoot = this.document.getRoot( name );\n\n\t\t// When there is a change in one of the view element\n\t\t// we need to check if there are any new `<img/>` elements to observe.\n\t\tviewRoot.on( 'change:children', ( evt, node ) => {\n\t\t\t// Wait for the render to be sure that `<img/>` elements are rendered in the DOM root.\n\t\t\tthis.view.once( 'render', () => this._updateObservedElements( domRoot, node ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Updates the list of observed `<img/>` elements.\n\t *\n\t * @private\n\t * @param {HTMLElement} domRoot DOM root element.\n\t * @param {module:engine/view/element~Element} viewNode View element where children have changed.\n\t */\n\t_updateObservedElements( domRoot, viewNode ) {\n\t\tif ( !viewNode.is( 'element' ) || viewNode.is( 'attributeElement' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst domNode = this.view.domConverter.mapViewToDom( viewNode );\n\n\t\t// If there is no `domNode` it means that it was removed from the DOM in the meanwhile.\n\t\tif ( !domNode ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( const domElement of domNode.querySelectorAll( 'img' ) ) {\n\t\t\tif ( !this._observedElements.has( domElement ) ) {\n\t\t\t\tthis.listenTo( domElement, 'load', ( evt, domEvt ) => this._fireEvents( domEvt ) );\n\t\t\t\tthis._observedElements.add( domElement );\n\t\t\t}\n\t\t}\n\n\t\t// Clean up the list of observed elements from elements that has been removed from the root.\n\t\tfor ( const domElement of this._observedElements ) {\n\t\t\tif ( !domRoot.contains( domElement ) ) {\n\t\t\t\tthis.stopListening( domElement );\n\t\t\t\tthis._observedElements.delete( domElement );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n\t * {@link module:engine/view/document~Document#event:imageLoaded}\n\t * if observer {@link #isEnabled is enabled}.\n\t *\n\t * @protected\n\t * @param {Event} domEvent The DOM event.\n\t */\n\t_fireEvents( domEvent ) {\n\t\tif ( this.isEnabled ) {\n\t\t\tthis.document.fire( 'layoutChanged' );\n\t\t\tthis.document.fire( 'imageLoaded', domEvent );\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdestroy() {\n\t\tthis._observedElements.clear();\n\t\tsuper.destroy();\n\t}\n}\n\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n"]},"metadata":{},"sourceType":"module"}