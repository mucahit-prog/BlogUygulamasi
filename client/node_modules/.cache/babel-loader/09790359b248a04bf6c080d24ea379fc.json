{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor(parentName, position) {\n  let parent = position.parent;\n\n  while (parent) {\n    if (parent.name === parentName) {\n      return parent;\n    }\n\n    parent = parent.parent;\n  }\n}\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\n\nexport function updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n  if (value > defaultValue) {\n    writer.setAttribute(key, value, item);\n  } else {\n    writer.removeAttribute(key, item);\n  }\n}\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\n\nexport function createEmptyTableCell(writer, insertPosition, attributes = {}) {\n  const tableCell = writer.createElement('tableCell', attributes);\n  writer.insertElement('paragraph', tableCell);\n  writer.insert(tableCell, insertPosition);\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/commands/utils.js"],"names":["findAncestor","parentName","position","parent","name","updateNumericAttribute","key","value","item","writer","defaultValue","setAttribute","removeAttribute","createEmptyTableCell","insertPosition","attributes","tableCell","createElement","insertElement","insert"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAT,CAAuBC,UAAvB,EAAmCC,QAAnC,EAA8C;AACpD,MAAIC,MAAM,GAAGD,QAAQ,CAACC,MAAtB;;AAEA,SAAQA,MAAR,EAAiB;AAChB,QAAKA,MAAM,CAACC,IAAP,KAAgBH,UAArB,EAAkC;AACjC,aAAOE,MAAP;AACA;;AAEDA,IAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,sBAAT,CAAiCC,GAAjC,EAAsCC,KAAtC,EAA6CC,IAA7C,EAAmDC,MAAnD,EAA2DC,YAAY,GAAG,CAA1E,EAA8E;AACpF,MAAKH,KAAK,GAAGG,YAAb,EAA4B;AAC3BD,IAAAA,MAAM,CAACE,YAAP,CAAqBL,GAArB,EAA0BC,KAA1B,EAAiCC,IAAjC;AACA,GAFD,MAEO;AACNC,IAAAA,MAAM,CAACG,eAAP,CAAwBN,GAAxB,EAA6BE,IAA7B;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,oBAAT,CAA+BJ,MAA/B,EAAuCK,cAAvC,EAAuDC,UAAU,GAAG,EAApE,EAAyE;AAC/E,QAAMC,SAAS,GAAGP,MAAM,CAACQ,aAAP,CAAsB,WAAtB,EAAmCF,UAAnC,CAAlB;AACAN,EAAAA,MAAM,CAACS,aAAP,CAAsB,WAAtB,EAAmCF,SAAnC;AACAP,EAAAA,MAAM,CAACU,MAAP,CAAeH,SAAf,EAA0BF,cAA1B;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor( parentName, position ) {\n\tlet parent = position.parent;\n\n\twhile ( parent ) {\n\t\tif ( parent.name === parentName ) {\n\t\t\treturn parent;\n\t\t}\n\n\t\tparent = parent.parent;\n\t}\n}\n\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\nexport function updateNumericAttribute( key, value, item, writer, defaultValue = 1 ) {\n\tif ( value > defaultValue ) {\n\t\twriter.setAttribute( key, value, item );\n\t} else {\n\t\twriter.removeAttribute( key, item );\n\t}\n}\n\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\nexport function createEmptyTableCell( writer, insertPosition, attributes = {} ) {\n\tconst tableCell = writer.createElement( 'tableCell', attributes );\n\twriter.insertElement( 'paragraph', tableCell );\n\twriter.insert( tableCell, insertPosition );\n}\n"]},"metadata":{},"sourceType":"module"}