{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\n\nexport default class Text extends Node {\n  /**\n   * Creates a tree view text node.\n   *\n   * @protected\n   * @param {String} data The text's data.\n   */\n  constructor(data) {\n    super();\n    /**\n     * The text content.\n     *\n     * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @member {String} module:engine/view/text~Text#_textData\n     */\n\n    this._textData = data;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\ttext.is( 'text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'view:text' ); // -> true\n   *\t\ttext.is( 'view:node' ); // -> true\n   *\n   *\t\ttext.is( 'model:text' ); // -> false\n   *\t\ttext.is( 'element' ); // -> false\n   *\t\ttext.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'text' || type == 'view:text' || super.is(type);\n  }\n  /**\n   * The text content.\n   *\n   * @readonly\n   * @type {String}\n   */\n\n\n  get data() {\n    return this._textData;\n  }\n  /**\n   * This getter is required when using the addition assignment operator on protected property:\n   *\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst bar = downcastWriter.createText( 'bar' );\n   *\n   *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n   *\t\tconsole.log( foo.data ); // prints: 'foobar'\n   *\n   * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n   *\n   * @protected\n   * @type {String}\n   */\n\n\n  get _data() {\n    return this.data;\n  }\n  /**\n   * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n   *\n   * @protected\n   * @fires change:text\n   * @param {String} data New data for the text node.\n   */\n\n\n  set _data(data) {\n    this._fireChange('text', this);\n\n    this._textData = data;\n  }\n  /**\n   * Checks if this text node is similar to other text node.\n   * Both nodes should have the same data to be considered as similar.\n   *\n   * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherNode) {\n    if (!(otherNode instanceof Text)) {\n      return false;\n    }\n\n    return this === otherNode || this.data === otherNode.data;\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n   */\n\n\n  _clone() {\n    return new Text(this.data);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-engine/src/view/text.js"],"names":["Node","Text","constructor","data","_textData","is","type","_data","_fireChange","isSimilar","otherNode","_clone"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AACtC;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,IAAF,EAAS;AACnB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKC,SAAL,GAAiBD,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,WAA1B,IAAyC,MAAMD,EAAN,CAAUC,IAAV,CAAhD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACS,MAAJH,IAAI,GAAG;AACV,WAAO,KAAKC,SAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU,MAALG,KAAK,GAAG;AACX,WAAO,KAAKJ,IAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACU,MAALI,KAAK,CAAEJ,IAAF,EAAS;AACjB,SAAKK,WAAL,CAAkB,MAAlB,EAA0B,IAA1B;;AAEA,SAAKJ,SAAL,GAAiBD,IAAjB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCM,EAAAA,SAAS,CAAEC,SAAF,EAAc;AACtB,QAAK,EAAGA,SAAS,YAAYT,IAAxB,CAAL,EAAsC;AACrC,aAAO,KAAP;AACA;;AAED,WAAO,SAASS,SAAT,IAAsB,KAAKP,IAAL,KAAcO,SAAS,CAACP,IAArD;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,MAAM,GAAG;AACR,WAAO,IAAIV,IAAJ,CAAU,KAAKE,IAAf,CAAP;AACA;;AA1GqC","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\n\nimport Node from './node';\n\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\nexport default class Text extends Node {\n\t/**\n\t * Creates a tree view text node.\n\t *\n\t * @protected\n\t * @param {String} data The text's data.\n\t */\n\tconstructor( data ) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The text content.\n\t\t *\n\t\t * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t\t *\n\t\t * @protected\n\t\t * @member {String} module:engine/view/text~Text#_textData\n\t\t */\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given type.\n\t *\n\t *\t\ttext.is( 'text' ); // -> true\n\t *\t\ttext.is( 'node' ); // -> true\n\t *\t\ttext.is( 'view:text' ); // -> true\n\t *\t\ttext.is( 'view:node' ); // -> true\n\t *\n\t *\t\ttext.is( 'model:text' ); // -> false\n\t *\t\ttext.is( 'element' ); // -> false\n\t *\t\ttext.is( 'range' ); // -> false\n\t *\n\t * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n\t *\n\t * @param {String} type\n\t * @returns {Boolean}\n\t */\n\tis( type ) {\n\t\treturn type == 'text' || type == 'view:text' || super.is( type );\n\t}\n\n\t/**\n\t * The text content.\n\t *\n\t * @readonly\n\t * @type {String}\n\t */\n\tget data() {\n\t\treturn this._textData;\n\t}\n\n\t/**\n\t * This getter is required when using the addition assignment operator on protected property:\n\t *\n\t *\t\tconst foo = downcastWriter.createText( 'foo' );\n\t *\t\tconst bar = downcastWriter.createText( 'bar' );\n\t *\n\t *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n\t *\t\tconsole.log( foo.data ); // prints: 'foobar'\n\t *\n\t * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n\t *\n\t * @protected\n\t * @type {String}\n\t */\n\tget _data() {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n\t *\n\t * @protected\n\t * @fires change:text\n\t * @param {String} data New data for the text node.\n\t */\n\tset _data( data ) {\n\t\tthis._fireChange( 'text', this );\n\n\t\tthis._textData = data;\n\t}\n\n\t/**\n\t * Checks if this text node is similar to other text node.\n\t * Both nodes should have the same data to be considered as similar.\n\t *\n\t * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n\t * @returns {Boolean}\n\t */\n\tisSimilar( otherNode ) {\n\t\tif ( !( otherNode instanceof Text ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === otherNode || this.data === otherNode.data;\n\t}\n\n\t/**\n\t * Clones this node.\n\t *\n\t * @protected\n\t * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n\t */\n\t_clone() {\n\t\treturn new Text( this.data );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}