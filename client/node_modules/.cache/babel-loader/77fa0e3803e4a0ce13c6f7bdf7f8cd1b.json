{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Checks if a given file is an image.\n *\n * @param {File} file\n * @returns {Boolean}\n */\nexport function isImageType(file) {\n  const types = /^image\\/(jpeg|png|gif|bmp)$/;\n  return types.test(file.type);\n}\n/**\n * Creates a promise which fetches the image local source (base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image which source to fetch.\n * @returns {Promise.<File>} A promise which resolves when image source is fetched and converted to `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing the promise will be rejected.\n */\n\nexport function fetchLocalImage(image) {\n  return new Promise((resolve, reject) => {\n    const imageSrc = image.getAttribute('src'); // Fetch works asynchronously and so does not block browser UI when processing data.\n\n    fetch(imageSrc).then(resource => resource.blob()).then(blob => {\n      const mimeType = getImageMimeType(blob, imageSrc);\n      const ext = mimeType.replace('image/', '');\n      const filename = `image.${ext}`;\n      const file = createFileFromBlob(blob, filename, mimeType);\n      file ? resolve(file) : reject();\n    }).catch(reject);\n  });\n}\n/**\n * Checks whether given node is an image element with local source (base64 or blob).\n *\n * @param {module:engine/view/node~Node} node Node to check.\n * @returns {Boolean}\n */\n\nexport function isLocalImage(node) {\n  if (!node.is('element', 'img') || !node.getAttribute('src')) {\n    return false;\n  }\n\n  return node.getAttribute('src').match(/^data:image\\/\\w+;base64,/g) || node.getAttribute('src').match(/^blob:/g);\n} // Extracts image type based on its blob representation or its source.\n//\n// @param {String} src Image src attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\n\nfunction getImageMimeType(blob, src) {\n  if (blob.type) {\n    return blob.type;\n  } else if (src.match(/data:(image\\/\\w+);base64/)) {\n    return src.match(/data:(image\\/\\w+);base64/)[1].toLowerCase();\n  } else {\n    // Fallback to 'jpeg' as common extension.\n    return 'image/jpeg';\n  }\n} // Creates `File` instance from the given `Blob` instance using specified filename.\n//\n// @param {Blob} blob The `Blob` instance from which file will be created.\n// @param {String} filename Filename used during file creation.\n// @param {String} mimeType File mime type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\n\n\nfunction createFileFromBlob(blob, filename, mimeType) {\n  try {\n    return new File([blob], filename, {\n      type: mimeType\n    });\n  } catch (err) {\n    // Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n    // However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n    // calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n    // be implemented correctly in Edge the code will start working without any changes (see #247).\n    return null;\n  }\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js"],"names":["isImageType","file","types","test","type","fetchLocalImage","image","Promise","resolve","reject","imageSrc","getAttribute","fetch","then","resource","blob","mimeType","getImageMimeType","ext","replace","filename","createFileFromBlob","catch","isLocalImage","node","is","match","src","toLowerCase","File","err"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAT,CAAsBC,IAAtB,EAA6B;AACnC,QAAMC,KAAK,GAAG,6BAAd;AAEA,SAAOA,KAAK,CAACC,IAAN,CAAYF,IAAI,CAACG,IAAjB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAkC;AACxC,SAAO,IAAIC,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KAAuB;AAC1C,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,YAAN,CAAoB,KAApB,CAAjB,CAD0C,CAG1C;;AACAC,IAAAA,KAAK,CAAEF,QAAF,CAAL,CACEG,IADF,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEEF,IAFF,CAEQE,IAAI,IAAI;AACd,YAAMC,QAAQ,GAAGC,gBAAgB,CAAEF,IAAF,EAAQL,QAAR,CAAjC;AACA,YAAMQ,GAAG,GAAGF,QAAQ,CAACG,OAAT,CAAkB,QAAlB,EAA4B,EAA5B,CAAZ;AACA,YAAMC,QAAQ,GAAI,SAASF,GAAK,EAAhC;AACA,YAAMjB,IAAI,GAAGoB,kBAAkB,CAAEN,IAAF,EAAQK,QAAR,EAAkBJ,QAAlB,CAA/B;AAEAf,MAAAA,IAAI,GAAGO,OAAO,CAAEP,IAAF,CAAV,GAAqBQ,MAAM,EAA/B;AACA,KATF,EAUEa,KAVF,CAUSb,MAVT;AAWA,GAfM,CAAP;AAgBA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,YAAT,CAAuBC,IAAvB,EAA8B;AACpC,MAAK,CAACA,IAAI,CAACC,EAAL,CAAS,SAAT,EAAoB,KAApB,CAAD,IAAgC,CAACD,IAAI,CAACb,YAAL,CAAmB,KAAnB,CAAtC,EAAmE;AAClE,WAAO,KAAP;AACA;;AAED,SAAOa,IAAI,CAACb,YAAL,CAAmB,KAAnB,EAA2Be,KAA3B,CAAkC,2BAAlC,KACNF,IAAI,CAACb,YAAL,CAAmB,KAAnB,EAA2Be,KAA3B,CAAkC,SAAlC,CADD;AAEA,C,CAED;AACA;AACA;AACA;AACA;;AACA,SAAST,gBAAT,CAA2BF,IAA3B,EAAiCY,GAAjC,EAAuC;AACtC,MAAKZ,IAAI,CAACX,IAAV,EAAiB;AAChB,WAAOW,IAAI,CAACX,IAAZ;AACA,GAFD,MAEO,IAAKuB,GAAG,CAACD,KAAJ,CAAW,0BAAX,CAAL,EAA+C;AACrD,WAAOC,GAAG,CAACD,KAAJ,CAAW,0BAAX,EAAyC,CAAzC,EAA6CE,WAA7C,EAAP;AACA,GAFM,MAEA;AACN;AACA,WAAO,YAAP;AACA;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,kBAAT,CAA6BN,IAA7B,EAAmCK,QAAnC,EAA6CJ,QAA7C,EAAwD;AACvD,MAAI;AACH,WAAO,IAAIa,IAAJ,CAAU,CAAEd,IAAF,CAAV,EAAoBK,QAApB,EAA8B;AAAEhB,MAAAA,IAAI,EAAEY;AAAR,KAA9B,CAAP;AACA,GAFD,CAEE,OAAQc,GAAR,EAAc;AACf;AACA;AACA;AACA;AACA,WAAO,IAAP;AACA;AACD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Checks if a given file is an image.\n *\n * @param {File} file\n * @returns {Boolean}\n */\nexport function isImageType( file ) {\n\tconst types = /^image\\/(jpeg|png|gif|bmp)$/;\n\n\treturn types.test( file.type );\n}\n\n/**\n * Creates a promise which fetches the image local source (base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image which source to fetch.\n * @returns {Promise.<File>} A promise which resolves when image source is fetched and converted to `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing the promise will be rejected.\n */\nexport function fetchLocalImage( image ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst imageSrc = image.getAttribute( 'src' );\n\n\t\t// Fetch works asynchronously and so does not block browser UI when processing data.\n\t\tfetch( imageSrc )\n\t\t\t.then( resource => resource.blob() )\n\t\t\t.then( blob => {\n\t\t\t\tconst mimeType = getImageMimeType( blob, imageSrc );\n\t\t\t\tconst ext = mimeType.replace( 'image/', '' );\n\t\t\t\tconst filename = `image.${ ext }`;\n\t\t\t\tconst file = createFileFromBlob( blob, filename, mimeType );\n\n\t\t\t\tfile ? resolve( file ) : reject();\n\t\t\t} )\n\t\t\t.catch( reject );\n\t} );\n}\n\n/**\n * Checks whether given node is an image element with local source (base64 or blob).\n *\n * @param {module:engine/view/node~Node} node Node to check.\n * @returns {Boolean}\n */\nexport function isLocalImage( node ) {\n\tif ( !node.is( 'element', 'img' ) || !node.getAttribute( 'src' ) ) {\n\t\treturn false;\n\t}\n\n\treturn node.getAttribute( 'src' ).match( /^data:image\\/\\w+;base64,/g ) ||\n\t\tnode.getAttribute( 'src' ).match( /^blob:/g );\n}\n\n// Extracts image type based on its blob representation or its source.\n//\n// @param {String} src Image src attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\nfunction getImageMimeType( blob, src ) {\n\tif ( blob.type ) {\n\t\treturn blob.type;\n\t} else if ( src.match( /data:(image\\/\\w+);base64/ ) ) {\n\t\treturn src.match( /data:(image\\/\\w+);base64/ )[ 1 ].toLowerCase();\n\t} else {\n\t\t// Fallback to 'jpeg' as common extension.\n\t\treturn 'image/jpeg';\n\t}\n}\n\n// Creates `File` instance from the given `Blob` instance using specified filename.\n//\n// @param {Blob} blob The `Blob` instance from which file will be created.\n// @param {String} filename Filename used during file creation.\n// @param {String} mimeType File mime type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\nfunction createFileFromBlob( blob, filename, mimeType ) {\n\ttry {\n\t\treturn new File( [ blob ], filename, { type: mimeType } );\n\t} catch ( err ) {\n\t\t// Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n\t\t// However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n\t\t// calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n\t\t// be implemented correctly in Edge the code will start working without any changes (see #247).\n\t\treturn null;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}