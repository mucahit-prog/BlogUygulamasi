{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * All errors will be shortened during the minification process in order to reduce the code size.\n * Therefore, all error messages should be documented in the same way as those in {@link module:utils/log}.\n *\n * Read more in the {@link module:utils/log} module.\n *\n * @extends Error\n */\n\nexport default class CKEditorError extends Error {\n  /**\n   * Creates an instance of the CKEditorError class.\n   *\n   * Read more about error logging in the {@link module:utils/log} module.\n   *\n   * @param {String} message The error message in an `error-name: Error message.` format.\n   * During the minification process the \"Error message\" part will be removed to limit the code size\n   * and a link to this error documentation will be added to the `message`.\n   * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n   * to check if the object works as the context.\n   * @param {Object} [data] Additional data describing the error. A stringified version of this object\n   * will be appended to the error message, so the data are quickly visible in the console. The original\n   * data object will also be later available under the {@link #data} property.\n   */\n  constructor(message, context, data) {\n    message = attachLinkToDocumentation(message);\n\n    if (data) {\n      message += ' ' + JSON.stringify(data);\n    }\n\n    super(message);\n    /**\n     * @type {String}\n     */\n\n    this.name = 'CKEditorError';\n    /**\n     * A context of the error by which the Watchdog is able to determine which editor crashed.\n     *\n     * @type {Object|null}\n     */\n\n    this.context = context;\n    /**\n     * The additional error data passed to the constructor. Undefined if none was passed.\n     *\n     * @type {Object|undefined}\n     */\n\n    this.data = data;\n  }\n  /**\n   * Checks if the error is of the `CKEditorError` type.\n   */\n\n\n  is(type) {\n    return type === 'CKEditorError';\n  }\n\n}\n/**\n * Attaches link to the documentation at the end of the error message.\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\n\nexport function attachLinkToDocumentation(message) {\n  const matchedErrorName = message.match(/^([^:]+):/);\n\n  if (!matchedErrorName) {\n    return message;\n  }\n\n  return message + ` Read more: ${DOCUMENTATION_URL}#error-${matchedErrorName[1]}\\n`;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js"],"names":["DOCUMENTATION_URL","CKEditorError","Error","constructor","message","context","data","attachLinkToDocumentation","JSON","stringify","name","is","type","matchedErrorName","match"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAC7B,sFADM;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BC,KAA5B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAAEC,OAAF,EAAWC,OAAX,EAAoBC,IAApB,EAA2B;AACrCF,IAAAA,OAAO,GAAGG,yBAAyB,CAAEH,OAAF,CAAnC;;AAEA,QAAKE,IAAL,EAAY;AACXF,MAAAA,OAAO,IAAI,MAAMI,IAAI,CAACC,SAAL,CAAgBH,IAAhB,CAAjB;AACA;;AAED,UAAOF,OAAP;AAEA;AACF;AACA;;AACE,SAAKM,IAAL,GAAY,eAAZ;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKL,OAAL,GAAeA,OAAf;AAEA;AACF;AACA;AACA;AACA;;AACE,SAAKC,IAAL,GAAYA,IAAZ;AACA;AAED;AACD;AACA;;;AACCK,EAAAA,EAAE,CAAEC,IAAF,EAAS;AACV,WAAOA,IAAI,KAAK,eAAhB;AACA;;AApD+C;AAuDjD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASL,yBAAT,CAAoCH,OAApC,EAA8C;AACpD,QAAMS,gBAAgB,GAAGT,OAAO,CAACU,KAAR,CAAe,WAAf,CAAzB;;AAEA,MAAK,CAACD,gBAAN,EAAyB;AACxB,WAAOT,OAAP;AACA;;AAED,SAAOA,OAAO,GAAI,eAAeJ,iBAAmB,UAAUa,gBAAgB,CAAE,CAAF,CAAO,IAArF;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL =\n\t'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n\n/**\n * The CKEditor error class.\n *\n * All errors will be shortened during the minification process in order to reduce the code size.\n * Therefore, all error messages should be documented in the same way as those in {@link module:utils/log}.\n *\n * Read more in the {@link module:utils/log} module.\n *\n * @extends Error\n */\nexport default class CKEditorError extends Error {\n\t/**\n\t * Creates an instance of the CKEditorError class.\n\t *\n\t * Read more about error logging in the {@link module:utils/log} module.\n\t *\n\t * @param {String} message The error message in an `error-name: Error message.` format.\n\t * During the minification process the \"Error message\" part will be removed to limit the code size\n\t * and a link to this error documentation will be added to the `message`.\n\t * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n\t * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n\t * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n\t * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n\t * to check if the object works as the context.\n\t * @param {Object} [data] Additional data describing the error. A stringified version of this object\n\t * will be appended to the error message, so the data are quickly visible in the console. The original\n\t * data object will also be later available under the {@link #data} property.\n\t */\n\tconstructor( message, context, data ) {\n\t\tmessage = attachLinkToDocumentation( message );\n\n\t\tif ( data ) {\n\t\t\tmessage += ' ' + JSON.stringify( data );\n\t\t}\n\n\t\tsuper( message );\n\n\t\t/**\n\t\t * @type {String}\n\t\t */\n\t\tthis.name = 'CKEditorError';\n\n\t\t/**\n\t\t * A context of the error by which the Watchdog is able to determine which editor crashed.\n\t\t *\n\t\t * @type {Object|null}\n\t\t */\n\t\tthis.context = context;\n\n\t\t/**\n\t\t * The additional error data passed to the constructor. Undefined if none was passed.\n\t\t *\n\t\t * @type {Object|undefined}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\t/**\n\t * Checks if the error is of the `CKEditorError` type.\n\t */\n\tis( type ) {\n\t\treturn type === 'CKEditorError';\n\t}\n}\n\n/**\n * Attaches link to the documentation at the end of the error message.\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\nexport function attachLinkToDocumentation( message ) {\n\tconst matchedErrorName = message.match( /^([^:]+):/ );\n\n\tif ( !matchedErrorName ) {\n\t\treturn message;\n\t}\n\n\treturn message + ` Read more: ${ DOCUMENTATION_URL }#error-${ matchedErrorName[ 1 ] }\\n`;\n}\n"]},"metadata":{},"sourceType":"module"}