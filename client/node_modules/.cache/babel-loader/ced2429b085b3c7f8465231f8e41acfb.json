{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif (!window.CKEDITOR_TRANSLATIONS) {\n  window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\n\n\nexport function add(language, translations) {\n  const dictionary = window.CKEDITOR_TRANSLATIONS[language] || (window.CKEDITOR_TRANSLATIONS[language] = {});\n  Object.assign(dictionary, translations);\n}\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\n\nexport function translate(language, translationKey) {\n  const numberOfLanguages = getNumberOfLanguages();\n\n  if (numberOfLanguages === 1) {\n    // Override the language to the only supported one.\n    // This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n    language = Object.keys(window.CKEDITOR_TRANSLATIONS)[0];\n  }\n\n  if (numberOfLanguages === 0 || !hasTranslation(language, translationKey)) {\n    return translationKey.replace(/ \\[context: [^\\]]+\\]$/, '');\n  }\n\n  const dictionary = window.CKEDITOR_TRANSLATIONS[language]; // In case of missing translations we still need to cut off the `[context: ]` parts.\n\n  return dictionary[translationKey].replace(/ \\[context: [^\\]]+\\]$/, '');\n}\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\n\nexport function _clear() {\n  window.CKEDITOR_TRANSLATIONS = {};\n} // Checks whether the dictionary exists and translation in that dictionary exists.\n\nfunction hasTranslation(language, translationKey) {\n  return language in window.CKEDITOR_TRANSLATIONS && translationKey in window.CKEDITOR_TRANSLATIONS[language];\n}\n\nfunction getNumberOfLanguages() {\n  return Object.keys(window.CKEDITOR_TRANSLATIONS).length;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js"],"names":["window","CKEDITOR_TRANSLATIONS","add","language","translations","dictionary","Object","assign","translate","translationKey","numberOfLanguages","getNumberOfLanguages","keys","hasTranslation","replace","_clear","length"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,IAAK,CAACA,MAAM,CAACC,qBAAb,EAAqC;AACpCD,EAAAA,MAAM,CAACC,qBAAP,GAA+B,EAA/B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,GAAT,CAAcC,QAAd,EAAwBC,YAAxB,EAAuC;AAC7C,QAAMC,UAAU,GAAGL,MAAM,CAACC,qBAAP,CAA8BE,QAA9B,MAA8CH,MAAM,CAACC,qBAAP,CAA8BE,QAA9B,IAA2C,EAAzF,CAAnB;AAEAG,EAAAA,MAAM,CAACC,MAAP,CAAeF,UAAf,EAA2BD,YAA3B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,CAAoBL,QAApB,EAA8BM,cAA9B,EAA+C;AACrD,QAAMC,iBAAiB,GAAGC,oBAAoB,EAA9C;;AAEA,MAAKD,iBAAiB,KAAK,CAA3B,EAA+B;AAC9B;AACA;AACAP,IAAAA,QAAQ,GAAGG,MAAM,CAACM,IAAP,CAAaZ,MAAM,CAACC,qBAApB,EAA6C,CAA7C,CAAX;AACA;;AAED,MAAKS,iBAAiB,KAAK,CAAtB,IAA2B,CAACG,cAAc,CAAEV,QAAF,EAAYM,cAAZ,CAA/C,EAA8E;AAC7E,WAAOA,cAAc,CAACK,OAAf,CAAwB,uBAAxB,EAAiD,EAAjD,CAAP;AACA;;AAED,QAAMT,UAAU,GAAGL,MAAM,CAACC,qBAAP,CAA8BE,QAA9B,CAAnB,CAbqD,CAerD;;AACA,SAAOE,UAAU,CAAEI,cAAF,CAAV,CAA6BK,OAA7B,CAAsC,uBAAtC,EAA+D,EAA/D,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,GAAkB;AACxBf,EAAAA,MAAM,CAACC,qBAAP,GAA+B,EAA/B;AACA,C,CAED;;AACA,SAASY,cAAT,CAAyBV,QAAzB,EAAmCM,cAAnC,EAAoD;AACnD,SACGN,QAAQ,IAAIH,MAAM,CAACC,qBAArB,IACEQ,cAAc,IAAIT,MAAM,CAACC,qBAAP,CAA8BE,QAA9B,CAFrB;AAIA;;AAED,SAASQ,oBAAT,GAAgC;AAC/B,SAAOL,MAAM,CAACM,IAAP,CAAaZ,MAAM,CAACC,qBAApB,EAA4Ce,MAAnD;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif ( !window.CKEDITOR_TRANSLATIONS ) {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\nexport function add( language, translations ) {\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n\n\tObject.assign( dictionary, translations );\n}\n\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\nexport function translate( language, translationKey ) {\n\tconst numberOfLanguages = getNumberOfLanguages();\n\n\tif ( numberOfLanguages === 1 ) {\n\t\t// Override the language to the only supported one.\n\t\t// This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n\t\tlanguage = Object.keys( window.CKEDITOR_TRANSLATIONS )[ 0 ];\n\t}\n\n\tif ( numberOfLanguages === 0 || !hasTranslation( language, translationKey ) ) {\n\t\treturn translationKey.replace( / \\[context: [^\\]]+\\]$/, '' );\n\t}\n\n\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ];\n\n\t// In case of missing translations we still need to cut off the `[context: ]` parts.\n\treturn dictionary[ translationKey ].replace( / \\[context: [^\\]]+\\]$/, '' );\n}\n\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\nexport function _clear() {\n\twindow.CKEDITOR_TRANSLATIONS = {};\n}\n\n// Checks whether the dictionary exists and translation in that dictionary exists.\nfunction hasTranslation( language, translationKey ) {\n\treturn (\n\t\t( language in window.CKEDITOR_TRANSLATIONS ) &&\n\t\t( translationKey in window.CKEDITOR_TRANSLATIONS[ language ] )\n\t);\n}\n\nfunction getNumberOfLanguages() {\n\treturn Object.keys( window.CKEDITOR_TRANSLATIONS ).length;\n}\n"]},"metadata":{},"sourceType":"module"}