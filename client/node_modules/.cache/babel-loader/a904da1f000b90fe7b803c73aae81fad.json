{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils\n */\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\n\nexport function toTableWidget(viewElement, writer) {\n  writer.setCustomProperty('table', true, viewElement);\n  return toWidget(viewElement, writer, {\n    hasSelectionHandler: true\n  });\n}\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isTableWidget(viewElement) {\n  return !!viewElement.getCustomProperty('table') && isWidget(viewElement);\n}\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getSelectedTableWidget(selection) {\n  const viewElement = selection.getSelectedElement();\n\n  if (viewElement && isTableWidget(viewElement)) {\n    return viewElement;\n  }\n\n  return null;\n}\n/**\n * Returns a table widget editing view element if one is among selection's ancestors.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getTableWidgetAncestor(selection) {\n  const parentTable = findAncestor('table', selection.getFirstPosition());\n\n  if (parentTable && isTableWidget(parentTable.parent)) {\n    return parentTable.parent;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/utils.js"],"names":["isWidget","toWidget","findAncestor","toTableWidget","viewElement","writer","setCustomProperty","hasSelectionHandler","isTableWidget","getCustomProperty","getSelectedTableWidget","selection","getSelectedElement","getTableWidgetAncestor","parentTable","getFirstPosition","parent"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,sCAAnC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBC,WAAxB,EAAqCC,MAArC,EAA8C;AACpDA,EAAAA,MAAM,CAACC,iBAAP,CAA0B,OAA1B,EAAmC,IAAnC,EAAyCF,WAAzC;AAEA,SAAOH,QAAQ,CAAEG,WAAF,EAAeC,MAAf,EAAuB;AAAEE,IAAAA,mBAAmB,EAAE;AAAvB,GAAvB,CAAf;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAwBJ,WAAxB,EAAsC;AAC5C,SAAO,CAAC,CAACA,WAAW,CAACK,iBAAZ,CAA+B,OAA/B,CAAF,IAA8CT,QAAQ,CAAEI,WAAF,CAA7D;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,sBAAT,CAAiCC,SAAjC,EAA6C;AACnD,QAAMP,WAAW,GAAGO,SAAS,CAACC,kBAAV,EAApB;;AAEA,MAAKR,WAAW,IAAII,aAAa,CAAEJ,WAAF,CAAjC,EAAmD;AAClD,WAAOA,WAAP;AACA;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,sBAAT,CAAiCF,SAAjC,EAA6C;AACnD,QAAMG,WAAW,GAAGZ,YAAY,CAAE,OAAF,EAAWS,SAAS,CAACI,gBAAV,EAAX,CAAhC;;AAEA,MAAKD,WAAW,IAAIN,aAAa,CAAEM,WAAW,CAACE,MAAd,CAAjC,EAA0D;AACzD,WAAOF,WAAW,CAACE,MAAnB;AACA;;AAED,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils\n */\n\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\nexport function toTableWidget( viewElement, writer ) {\n\twriter.setCustomProperty( 'table', true, viewElement );\n\n\treturn toWidget( viewElement, writer, { hasSelectionHandler: true } );\n}\n\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isTableWidget( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'table' ) && isWidget( viewElement );\n}\n\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getSelectedTableWidget( selection ) {\n\tconst viewElement = selection.getSelectedElement();\n\n\tif ( viewElement && isTableWidget( viewElement ) ) {\n\t\treturn viewElement;\n\t}\n\n\treturn null;\n}\n\n/**\n * Returns a table widget editing view element if one is among selection's ancestors.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\nexport function getTableWidgetAncestor( selection ) {\n\tconst parentTable = findAncestor( 'table', selection.getFirstPosition() );\n\n\tif ( parentTable && isTableWidget( parentTable.parent ) ) {\n\t\treturn parentTable.parent;\n\t}\n\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}