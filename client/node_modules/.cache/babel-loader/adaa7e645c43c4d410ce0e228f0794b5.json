{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement, ensureSafeUrl, getLocalizedDecorators, normalizeDecorators } from './utils';\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport ManualDecorator from './utils/manualdecorator';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport findLinkRange from './findlinkrange';\nimport '../theme/link.css';\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class LinkEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    editor.config.define('link', {\n      addTargetToExternalLinks: false\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale; // Allow link attribute on all inline nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: 'linkHref'\n    });\n    editor.conversion.for('dataDowncast').attributeToElement({\n      model: 'linkHref',\n      view: createLinkElement\n    });\n    editor.conversion.for('editingDowncast').attributeToElement({\n      model: 'linkHref',\n      view: (href, writer) => {\n        return createLinkElement(ensureSafeUrl(href), writer);\n      }\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'a',\n        attributes: {\n          href: true\n        }\n      },\n      model: {\n        key: 'linkHref',\n        value: viewElement => viewElement.getAttribute('href')\n      }\n    }); // Create linking commands.\n\n    editor.commands.add('link', new LinkCommand(editor));\n    editor.commands.add('unlink', new UnlinkCommand(editor));\n    const linkDecorators = getLocalizedDecorators(editor.t, normalizeDecorators(editor.config.get('link.decorators')));\n\n    this._enableAutomaticDecorators(linkDecorators.filter(item => item.mode === DECORATOR_AUTOMATIC));\n\n    this._enableManualDecorators(linkDecorators.filter(item => item.mode === DECORATOR_MANUAL)); // Enable two-step caret movement for `linkHref` attribute.\n\n\n    bindTwoStepCaretToAttribute({\n      view: editor.editing.view,\n      model: editor.model,\n      emitter: this,\n      attribute: 'linkHref',\n      locale\n    }); // Setup highlight over selected link.\n\n    this._setupLinkHighlight();\n  }\n  /**\n   * Processes an array of configured {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}\n   * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n   * for each one of them. Downcast dispatchers are obtained using the\n   * {@link module:link/utils~AutomaticDecorators#getDispatcher} method.\n   *\n   * **Note**: This method also activates the automatic external link decorator if enabled with\n   * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n   *\n   * @private\n   * @param {Array.<module:link/link~LinkDecoratorAutomaticDefinition>} automaticDecoratorDefinitions\n   */\n\n\n  _enableAutomaticDecorators(automaticDecoratorDefinitions) {\n    const editor = this.editor;\n    const automaticDecorators = new AutomaticDecorators(); // Adds a default decorator for external links.\n\n    if (editor.config.get('link.addTargetToExternalLinks')) {\n      automaticDecorators.add({\n        id: 'linkIsExternal',\n        mode: DECORATOR_AUTOMATIC,\n        callback: url => EXTERNAL_LINKS_REGEXP.test(url),\n        attributes: {\n          target: '_blank',\n          rel: 'noopener noreferrer'\n        }\n      });\n    }\n\n    automaticDecorators.add(automaticDecoratorDefinitions);\n\n    if (automaticDecorators.length) {\n      editor.conversion.for('downcast').add(automaticDecorators.getDispatcher());\n    }\n  }\n  /**\n   * Processes an array of configured {@link module:link/link~LinkDecoratorManualDefinition manual decorators},\n   * transforms them into {@link module:link/utils~ManualDecorator} instances and stores them in the\n   * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n   *\n   * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n   * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n   * with adequate model attributes.\n   *\n   * @private\n   * @param {Array.<module:link/link~LinkDecoratorManualDefinition>} manualDecoratorDefinitions\n   */\n\n\n  _enableManualDecorators(manualDecoratorDefinitions) {\n    if (!manualDecoratorDefinitions.length) {\n      return;\n    }\n\n    const editor = this.editor;\n    const command = editor.commands.get('link');\n    const manualDecorators = command.manualDecorators;\n    manualDecoratorDefinitions.forEach(decorator => {\n      editor.model.schema.extend('$text', {\n        allowAttributes: decorator.id\n      }); // Keeps reference to manual decorator to decode its name to attributes during downcast.\n\n      manualDecorators.add(new ManualDecorator(decorator));\n      editor.conversion.for('downcast').attributeToElement({\n        model: decorator.id,\n        view: (manualDecoratorName, writer) => {\n          if (manualDecoratorName) {\n            const attributes = manualDecorators.get(decorator.id).attributes;\n            const element = writer.createAttributeElement('a', attributes, {\n              priority: 5\n            });\n            writer.setCustomProperty('link', true, element);\n            return element;\n          }\n        }\n      });\n      editor.conversion.for('upcast').elementToAttribute({\n        view: {\n          name: 'a',\n          attributes: manualDecorators.get(decorator.id).attributes\n        },\n        model: {\n          key: decorator.id\n        }\n      });\n    });\n  }\n  /**\n   * Adds a visual highlight style to a link in which the selection is anchored.\n   * Together with two-step caret movement, they indicate that the user is typing inside the link.\n   *\n   * Highlight is turned on by adding the `.ck-link_selected` class to the link in the view:\n   *\n   * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n   * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n   * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n   *\n   * This way, adding and removing the highlight does not interfere with conversion.\n   *\n   * @private\n   */\n\n\n  _setupLinkHighlight() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const highlightedLinks = new Set(); // Adding the class.\n\n    view.document.registerPostFixer(writer => {\n      const selection = editor.model.document.selection;\n      let changed = false;\n\n      if (selection.hasAttribute('linkHref')) {\n        const modelRange = findLinkRange(selection.getFirstPosition(), selection.getAttribute('linkHref'), editor.model);\n        const viewRange = editor.editing.mapper.toViewRange(modelRange); // There might be multiple `a` elements in the `viewRange`, for example, when the `a` element is\n        // broken by a UIElement.\n\n        for (const item of viewRange.getItems()) {\n          if (item.is('a') && !item.hasClass(HIGHLIGHT_CLASS)) {\n            writer.addClass(HIGHLIGHT_CLASS, item);\n            highlightedLinks.add(item);\n            changed = true;\n          }\n        }\n      }\n\n      return changed;\n    }); // Removing the class.\n\n    editor.conversion.for('editingDowncast').add(dispatcher => {\n      // Make sure the highlight is removed on every possible event, before conversion is started.\n      dispatcher.on('insert', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('remove', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('attribute', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('selection', removeHighlight, {\n        priority: 'highest'\n      });\n\n      function removeHighlight() {\n        view.change(writer => {\n          for (const item of highlightedLinks.values()) {\n            writer.removeClass(HIGHLIGHT_CLASS, item);\n            highlightedLinks.delete(item);\n          }\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-link/src/linkediting.js"],"names":["Plugin","LinkCommand","UnlinkCommand","createLinkElement","ensureSafeUrl","getLocalizedDecorators","normalizeDecorators","AutomaticDecorators","ManualDecorator","bindTwoStepCaretToAttribute","findLinkRange","HIGHLIGHT_CLASS","DECORATOR_AUTOMATIC","DECORATOR_MANUAL","EXTERNAL_LINKS_REGEXP","LinkEditing","constructor","editor","config","define","addTargetToExternalLinks","init","locale","model","schema","extend","allowAttributes","conversion","for","attributeToElement","view","href","writer","elementToAttribute","name","attributes","key","value","viewElement","getAttribute","commands","add","linkDecorators","t","get","_enableAutomaticDecorators","filter","item","mode","_enableManualDecorators","editing","emitter","attribute","_setupLinkHighlight","automaticDecoratorDefinitions","automaticDecorators","id","callback","url","test","target","rel","length","getDispatcher","manualDecoratorDefinitions","command","manualDecorators","forEach","decorator","manualDecoratorName","element","createAttributeElement","priority","setCustomProperty","highlightedLinks","Set","document","registerPostFixer","selection","changed","hasAttribute","modelRange","getFirstPosition","viewRange","mapper","toViewRange","getItems","is","hasClass","addClass","dispatcher","on","removeHighlight","change","values","removeClass","delete"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement, ensureSafeUrl, getLocalizedDecorators, normalizeDecorators } from './utils';\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport ManualDecorator from './utils/manualdecorator';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport findLinkRange from './findlinkrange';\nimport '../theme/link.css';\n\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.config.define( 'link', {\n\t\t\taddTargetToExternalLinks: false\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst locale = editor.locale;\n\n\t\t// Allow link attribute on all inline nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: 'linkHref' } );\n\n\t\teditor.conversion.for( 'dataDowncast' )\n\t\t\t.attributeToElement( { model: 'linkHref', view: createLinkElement } );\n\n\t\teditor.conversion.for( 'editingDowncast' )\n\t\t\t.attributeToElement( { model: 'linkHref', view: ( href, writer ) => {\n\t\t\t\treturn createLinkElement( ensureSafeUrl( href ), writer );\n\t\t\t} } );\n\n\t\teditor.conversion.for( 'upcast' )\n\t\t\t.elementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: 'linkHref',\n\t\t\t\t\tvalue: viewElement => viewElement.getAttribute( 'href' )\n\t\t\t\t}\n\t\t\t} );\n\n\t\t// Create linking commands.\n\t\teditor.commands.add( 'link', new LinkCommand( editor ) );\n\t\teditor.commands.add( 'unlink', new UnlinkCommand( editor ) );\n\n\t\tconst linkDecorators = getLocalizedDecorators( editor.t, normalizeDecorators( editor.config.get( 'link.decorators' ) ) );\n\n\t\tthis._enableAutomaticDecorators( linkDecorators.filter( item => item.mode === DECORATOR_AUTOMATIC ) );\n\t\tthis._enableManualDecorators( linkDecorators.filter( item => item.mode === DECORATOR_MANUAL ) );\n\n\t\t// Enable two-step caret movement for `linkHref` attribute.\n\t\tbindTwoStepCaretToAttribute( {\n\t\t\tview: editor.editing.view,\n\t\t\tmodel: editor.model,\n\t\t\temitter: this,\n\t\t\tattribute: 'linkHref',\n\t\t\tlocale\n\t\t} );\n\n\t\t// Setup highlight over selected link.\n\t\tthis._setupLinkHighlight();\n\t}\n\n\t/**\n\t * Processes an array of configured {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}\n\t * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n\t * for each one of them. Downcast dispatchers are obtained using the\n\t * {@link module:link/utils~AutomaticDecorators#getDispatcher} method.\n\t *\n\t * **Note**: This method also activates the automatic external link decorator if enabled with\n\t * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n\t *\n\t * @private\n\t * @param {Array.<module:link/link~LinkDecoratorAutomaticDefinition>} automaticDecoratorDefinitions\n\t */\n\t_enableAutomaticDecorators( automaticDecoratorDefinitions ) {\n\t\tconst editor = this.editor;\n\t\tconst automaticDecorators = new AutomaticDecorators();\n\n\t\t// Adds a default decorator for external links.\n\t\tif ( editor.config.get( 'link.addTargetToExternalLinks' ) ) {\n\t\t\tautomaticDecorators.add( {\n\t\t\t\tid: 'linkIsExternal',\n\t\t\t\tmode: DECORATOR_AUTOMATIC,\n\t\t\t\tcallback: url => EXTERNAL_LINKS_REGEXP.test( url ),\n\t\t\t\tattributes: {\n\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\trel: 'noopener noreferrer'\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\tautomaticDecorators.add( automaticDecoratorDefinitions );\n\n\t\tif ( automaticDecorators.length ) {\n\t\t\teditor.conversion.for( 'downcast' ).add( automaticDecorators.getDispatcher() );\n\t\t}\n\t}\n\n\t/**\n\t * Processes an array of configured {@link module:link/link~LinkDecoratorManualDefinition manual decorators},\n\t * transforms them into {@link module:link/utils~ManualDecorator} instances and stores them in the\n\t * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n\t *\n\t * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n\t * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n\t * with adequate model attributes.\n\t *\n\t * @private\n\t * @param {Array.<module:link/link~LinkDecoratorManualDefinition>} manualDecoratorDefinitions\n\t */\n\t_enableManualDecorators( manualDecoratorDefinitions ) {\n\t\tif ( !manualDecoratorDefinitions.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = this.editor;\n\t\tconst command = editor.commands.get( 'link' );\n\t\tconst manualDecorators = command.manualDecorators;\n\n\t\tmanualDecoratorDefinitions.forEach( decorator => {\n\t\t\teditor.model.schema.extend( '$text', { allowAttributes: decorator.id } );\n\n\t\t\t// Keeps reference to manual decorator to decode its name to attributes during downcast.\n\t\t\tmanualDecorators.add( new ManualDecorator( decorator ) );\n\n\t\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\t\t\tmodel: decorator.id,\n\t\t\t\tview: ( manualDecoratorName, writer ) => {\n\t\t\t\t\tif ( manualDecoratorName ) {\n\t\t\t\t\t\tconst attributes = manualDecorators.get( decorator.id ).attributes;\n\t\t\t\t\t\tconst element = writer.createAttributeElement( 'a', attributes, { priority: 5 } );\n\t\t\t\t\t\twriter.setCustomProperty( 'link', true, element );\n\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t} } );\n\n\t\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\t\t\tview: {\n\t\t\t\t\tname: 'a',\n\t\t\t\t\tattributes: manualDecorators.get( decorator.id ).attributes\n\t\t\t\t},\n\t\t\t\tmodel: {\n\t\t\t\t\tkey: decorator.id\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Adds a visual highlight style to a link in which the selection is anchored.\n\t * Together with two-step caret movement, they indicate that the user is typing inside the link.\n\t *\n\t * Highlight is turned on by adding the `.ck-link_selected` class to the link in the view:\n\t *\n\t * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n\t * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n\t * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n\t *\n\t * This way, adding and removing the highlight does not interfere with conversion.\n\t *\n\t * @private\n\t */\n\t_setupLinkHighlight() {\n\t\tconst editor = this.editor;\n\t\tconst view = editor.editing.view;\n\t\tconst highlightedLinks = new Set();\n\n\t\t// Adding the class.\n\t\tview.document.registerPostFixer( writer => {\n\t\t\tconst selection = editor.model.document.selection;\n\t\t\tlet changed = false;\n\n\t\t\tif ( selection.hasAttribute( 'linkHref' ) ) {\n\t\t\t\tconst modelRange = findLinkRange( selection.getFirstPosition(), selection.getAttribute( 'linkHref' ), editor.model );\n\t\t\t\tconst viewRange = editor.editing.mapper.toViewRange( modelRange );\n\n\t\t\t\t// There might be multiple `a` elements in the `viewRange`, for example, when the `a` element is\n\t\t\t\t// broken by a UIElement.\n\t\t\t\tfor ( const item of viewRange.getItems() ) {\n\t\t\t\t\tif ( item.is( 'a' ) && !item.hasClass( HIGHLIGHT_CLASS ) ) {\n\t\t\t\t\t\twriter.addClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.add( item );\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changed;\n\t\t} );\n\n\t\t// Removing the class.\n\t\teditor.conversion.for( 'editingDowncast' ).add( dispatcher => {\n\t\t\t// Make sure the highlight is removed on every possible event, before conversion is started.\n\t\t\tdispatcher.on( 'insert', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'remove', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'attribute', removeHighlight, { priority: 'highest' } );\n\t\t\tdispatcher.on( 'selection', removeHighlight, { priority: 'highest' } );\n\n\t\t\tfunction removeHighlight() {\n\t\t\t\tview.change( writer => {\n\t\t\t\t\tfor ( const item of highlightedLinks.values() ) {\n\t\t\t\t\t\twriter.removeClass( HIGHLIGHT_CLASS, item );\n\t\t\t\t\t\thighlightedLinks.delete( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}