{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from '../image/utils';\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * Image upload command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `'imageUpload'`.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'imageUpload', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageUpload', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageUploadCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.isEnabled = isImageAllowed(this.editor.model);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options Options for the executed command.\n   * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n   */\n\n\n  execute(options) {\n    const editor = this.editor;\n    const model = editor.model;\n    const fileRepository = editor.plugins.get(FileRepository);\n    model.change(writer => {\n      const filesToUpload = Array.isArray(options.file) ? options.file : [options.file];\n\n      for (const file of filesToUpload) {\n        uploadImage(writer, model, fileRepository, file);\n      }\n    });\n  }\n\n} // Handles uploading single file.\n//\n// @param {module:engine/model/writer~writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {File} file\n\nfunction uploadImage(writer, model, fileRepository, file) {\n  const loader = fileRepository.createLoader(file); // Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\n  if (!loader) {\n    return;\n  }\n\n  insertImage(writer, model, {\n    uploadId: loader.id\n  });\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadcommand.js"],"names":["FileRepository","Command","insertImage","isImageAllowed","ImageUploadCommand","refresh","isEnabled","editor","model","execute","options","fileRepository","plugins","get","change","writer","filesToUpload","Array","isArray","file","uploadImage","loader","createLoader","uploadId","id"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,cAAP,MAA2B,+CAA3B;AACA,OAAOC,OAAP,MAAoB,sCAApB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,gBAA5C;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,kBAAN,SAAiCH,OAAjC,CAAyC;AACvD;AACD;AACA;AACCI,EAAAA,OAAO,GAAG;AACT,SAAKC,SAAL,GAAiBH,cAAc,CAAE,KAAKI,MAAL,CAAYC,KAAd,CAA/B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAAEC,OAAF,EAAY;AAClB,UAAMH,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AAEA,UAAMG,cAAc,GAAGJ,MAAM,CAACK,OAAP,CAAeC,GAAf,CAAoBb,cAApB,CAAvB;AAEAQ,IAAAA,KAAK,CAACM,MAAN,CAAcC,MAAM,IAAI;AACvB,YAAMC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAeR,OAAO,CAACS,IAAvB,IAAgCT,OAAO,CAACS,IAAxC,GAA+C,CAAET,OAAO,CAACS,IAAV,CAArE;;AAEA,WAAM,MAAMA,IAAZ,IAAoBH,aAApB,EAAoC;AACnCI,QAAAA,WAAW,CAAEL,MAAF,EAAUP,KAAV,EAAiBG,cAAjB,EAAiCQ,IAAjC,CAAX;AACA;AACD,KAND;AAOA;;AA5BsD,C,CA+BxD;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAsBL,MAAtB,EAA8BP,KAA9B,EAAqCG,cAArC,EAAqDQ,IAArD,EAA4D;AAC3D,QAAME,MAAM,GAAGV,cAAc,CAACW,YAAf,CAA6BH,IAA7B,CAAf,CAD2D,CAG3D;;AACA,MAAK,CAACE,MAAN,EAAe;AACd;AACA;;AAEDnB,EAAAA,WAAW,CAAEa,MAAF,EAAUP,KAAV,EAAiB;AAAEe,IAAAA,QAAQ,EAAEF,MAAM,CAACG;AAAnB,GAAjB,CAAX;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from '../image/utils';\n\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * Image upload command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `'imageUpload'`.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'imageUpload', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageUpload', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\nexport default class ImageUploadCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tthis.isEnabled = isImageAllowed( this.editor.model );\n\t}\n\n\t/**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t * @param {Object} options Options for the executed command.\n\t * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n\t */\n\texecute( options ) {\n\t\tconst editor = this.editor;\n\t\tconst model = editor.model;\n\n\t\tconst fileRepository = editor.plugins.get( FileRepository );\n\n\t\tmodel.change( writer => {\n\t\t\tconst filesToUpload = Array.isArray( options.file ) ? options.file : [ options.file ];\n\n\t\t\tfor ( const file of filesToUpload ) {\n\t\t\t\tuploadImage( writer, model, fileRepository, file );\n\t\t\t}\n\t\t} );\n\t}\n}\n\n// Handles uploading single file.\n//\n// @param {module:engine/model/writer~writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {File} file\nfunction uploadImage( writer, model, fileRepository, file ) {\n\tconst loader = fileRepository.createLoader( file );\n\n\t// Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\tif ( !loader ) {\n\t\treturn;\n\t}\n\n\tinsertImage( writer, model, { uploadId: loader.id } );\n}\n"]},"metadata":{},"sourceType":"module"}