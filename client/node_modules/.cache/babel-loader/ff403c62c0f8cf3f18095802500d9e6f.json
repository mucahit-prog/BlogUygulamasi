{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\n\nexport default class ButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const ariaLabelUid = uid(); // Implement the Button interface.\n\n    this.set('class');\n    this.set('labelStyle');\n    this.set('icon');\n    this.set('isEnabled', true);\n    this.set('isOn', false);\n    this.set('isVisible', true);\n    this.set('keystroke');\n    this.set('label');\n    this.set('tabindex', -1);\n    this.set('tooltip');\n    this.set('tooltipPosition', 's');\n    this.set('type', 'button');\n    this.set('withText', false);\n    /**\n     * Collection of the child views inside of the button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n     *\n     * @readonly\n     * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n     */\n\n    this.tooltipView = this._createTooltipView();\n    /**\n     * Label of the button view. It is configurable using the {@link #label label attribute}.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #labelView\n     */\n\n    this.labelView = this._createLabelView(ariaLabelUid);\n    /**\n     * The icon view of the button. Will be added to {@link #children} when the\n     * {@link #icon icon attribute} is defined.\n     *\n     * @readonly\n     * @member {module:ui/icon/iconview~IconView} #iconView\n     */\n\n    this.iconView = new IconView();\n    this.iconView.extendTemplate({\n      attributes: {\n        class: 'ck-button__icon'\n      }\n    });\n    /**\n     * Tooltip of the button bound to the template.\n     *\n     * @see #tooltip\n     * @see #_getTooltipString\n     * @private\n     * @observable\n     * @member {Boolean} #_tooltipString\n     */\n\n    this.bind('_tooltipString').to(this, 'tooltip', this, 'label', this, 'keystroke', this._getTooltipString.bind(this));\n    this.setTemplate({\n      tag: 'button',\n      attributes: {\n        class: ['ck', 'ck-button', bind.to('class'), bind.if('isEnabled', 'ck-disabled', value => !value), bind.if('isVisible', 'ck-hidden', value => !value), bind.to('isOn', value => value ? 'ck-on' : 'ck-off'), bind.if('withText', 'ck-button_with-text')],\n        type: bind.to('type', value => value ? value : 'button'),\n        tabindex: bind.to('tabindex'),\n        'aria-labelledby': `ck-editor__aria-label_${ariaLabelUid}`,\n        'aria-disabled': bind.if('isEnabled', true, value => !value),\n        'aria-pressed': bind.if('isOn', true)\n      },\n      children: this.children,\n      on: {\n        mousedown: bind.to(evt => {\n          evt.preventDefault();\n        }),\n        click: bind.to(evt => {\n          // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n          // Though, shouldn't this condition be moved to the button controller?\n          if (this.isEnabled) {\n            this.fire('execute');\n          } else {\n            // Prevent the default when button is disabled, to block e.g.\n            // automatic form submitting. See ckeditor/ckeditor5-link#74.\n            evt.preventDefault();\n          }\n        })\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    if (this.icon) {\n      this.iconView.bind('content').to(this, 'icon');\n      this.children.add(this.iconView);\n    }\n\n    this.children.add(this.tooltipView);\n    this.children.add(this.labelView);\n  }\n  /**\n   * Focuses the {@link #element} of the button.\n   */\n\n\n  focus() {\n    this.element.focus();\n  }\n  /**\n   * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/tooltip/tooltipview~TooltipView}\n   */\n\n\n  _createTooltipView() {\n    const tooltipView = new TooltipView();\n    tooltipView.bind('text').to(this, '_tooltipString');\n    tooltipView.bind('position').to(this, 'tooltipPosition');\n    return tooltipView;\n  }\n  /**\n   * Creates a label view instance and binds it with button attributes.\n   *\n   * @private\n   * @param {String} ariaLabelUid The aria label UID.\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createLabelView(ariaLabelUid) {\n    const labelView = new View();\n    const bind = this.bindTemplate;\n    labelView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-button__label'],\n        style: bind.to('labelStyle'),\n        id: `ck-editor__aria-label_${ariaLabelUid}`\n      },\n      children: [{\n        text: this.bindTemplate.to('label')\n      }]\n    });\n    return labelView;\n  }\n  /**\n   * Gets the text for the {@link #tooltipView} from the combination of\n   * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n   *\n   * @private\n   * @see #tooltip\n   * @see #_tooltipString\n   * @param {Boolean|String|Function} tooltip Button tooltip.\n   * @param {String} label Button label.\n   * @param {String} keystroke Button keystroke.\n   * @returns {String}\n   */\n\n\n  _getTooltipString(tooltip, label, keystroke) {\n    if (tooltip) {\n      if (typeof tooltip == 'string') {\n        return tooltip;\n      } else {\n        if (keystroke) {\n          keystroke = getEnvKeystrokeText(keystroke);\n        }\n\n        if (tooltip instanceof Function) {\n          return tooltip(label, keystroke);\n        } else {\n          return `${label}${keystroke ? ` (${keystroke})` : ''}`;\n        }\n      }\n    }\n\n    return '';\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js"],"names":["View","IconView","TooltipView","uid","getEnvKeystrokeText","ButtonView","constructor","locale","bind","bindTemplate","ariaLabelUid","set","children","createCollection","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","extendTemplate","attributes","class","to","_getTooltipString","setTemplate","tag","if","value","type","tabindex","on","mousedown","evt","preventDefault","click","isEnabled","fire","render","icon","add","focus","element","style","id","text","tooltip","label","keystroke","Function"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,OAAOC,GAAP,MAAgB,mCAAhB;AACA,SAASC,mBAAT,QAAoC,wCAApC;AAEA,OAAO,0CAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,UAAN,SAAyBL,IAAzB,CAA8B;AAC5C;AACD;AACA;AACCM,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP;AAEA,UAAMC,IAAI,GAAG,KAAKC,YAAlB;AACA,UAAMC,YAAY,GAAGP,GAAG,EAAxB,CAJqB,CAMrB;;AACA,SAAKQ,GAAL,CAAU,OAAV;AACA,SAAKA,GAAL,CAAU,YAAV;AACA,SAAKA,GAAL,CAAU,MAAV;AACA,SAAKA,GAAL,CAAU,WAAV,EAAuB,IAAvB;AACA,SAAKA,GAAL,CAAU,MAAV,EAAkB,KAAlB;AACA,SAAKA,GAAL,CAAU,WAAV,EAAuB,IAAvB;AACA,SAAKA,GAAL,CAAU,WAAV;AACA,SAAKA,GAAL,CAAU,OAAV;AACA,SAAKA,GAAL,CAAU,UAAV,EAAsB,CAAC,CAAvB;AACA,SAAKA,GAAL,CAAU,SAAV;AACA,SAAKA,GAAL,CAAU,iBAAV,EAA6B,GAA7B;AACA,SAAKA,GAAL,CAAU,MAAV,EAAkB,QAAlB;AACA,SAAKA,GAAL,CAAU,UAAV,EAAsB,KAAtB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,QAAL,GAAgB,KAAKC,gBAAL,EAAhB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,WAAL,GAAmB,KAAKC,kBAAL,EAAnB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKC,SAAL,GAAiB,KAAKC,gBAAL,CAAuBP,YAAvB,CAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKQ,QAAL,GAAgB,IAAIjB,QAAJ,EAAhB;AAEA,SAAKiB,QAAL,CAAcC,cAAd,CAA8B;AAC7BC,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE;AADI;AADiB,KAA9B;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAKb,IAAL,CAAW,gBAAX,EAA8Bc,EAA9B,CACC,IADD,EACO,SADP,EAEC,IAFD,EAEO,OAFP,EAGC,IAHD,EAGO,WAHP,EAIC,KAAKC,iBAAL,CAAuBf,IAAvB,CAA6B,IAA7B,CAJD;AAOA,SAAKgB,WAAL,CAAkB;AACjBC,MAAAA,GAAG,EAAE,QADY;AAGjBL,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,WAFM,EAGNb,IAAI,CAACc,EAAL,CAAS,OAAT,CAHM,EAINd,IAAI,CAACkB,EAAL,CAAS,WAAT,EAAsB,aAAtB,EAAqCC,KAAK,IAAI,CAACA,KAA/C,CAJM,EAKNnB,IAAI,CAACkB,EAAL,CAAS,WAAT,EAAsB,WAAtB,EAAmCC,KAAK,IAAI,CAACA,KAA7C,CALM,EAMNnB,IAAI,CAACc,EAAL,CAAS,MAAT,EAAiBK,KAAK,IAAIA,KAAK,GAAG,OAAH,GAAa,QAA5C,CANM,EAONnB,IAAI,CAACkB,EAAL,CAAS,UAAT,EAAqB,qBAArB,CAPM,CADI;AAUXE,QAAAA,IAAI,EAAEpB,IAAI,CAACc,EAAL,CAAS,MAAT,EAAiBK,KAAK,IAAIA,KAAK,GAAGA,KAAH,GAAW,QAA1C,CAVK;AAWXE,QAAAA,QAAQ,EAAErB,IAAI,CAACc,EAAL,CAAS,UAAT,CAXC;AAYX,2BAAoB,yBAAyBZ,YAAc,EAZhD;AAaX,yBAAiBF,IAAI,CAACkB,EAAL,CAAS,WAAT,EAAsB,IAAtB,EAA4BC,KAAK,IAAI,CAACA,KAAtC,CAbN;AAcX,wBAAgBnB,IAAI,CAACkB,EAAL,CAAS,MAAT,EAAiB,IAAjB;AAdL,OAHK;AAoBjBd,MAAAA,QAAQ,EAAE,KAAKA,QApBE;AAsBjBkB,MAAAA,EAAE,EAAE;AACHC,QAAAA,SAAS,EAAEvB,IAAI,CAACc,EAAL,CAASU,GAAG,IAAI;AAC1BA,UAAAA,GAAG,CAACC,cAAJ;AACA,SAFU,CADR;AAKHC,QAAAA,KAAK,EAAE1B,IAAI,CAACc,EAAL,CAASU,GAAG,IAAI;AACtB;AACA;AACA,cAAK,KAAKG,SAAV,EAAsB;AACrB,iBAAKC,IAAL,CAAW,SAAX;AACA,WAFD,MAEO;AACN;AACA;AACAJ,YAAAA,GAAG,CAACC,cAAJ;AACA;AACD,SAVM;AALJ;AAtBa,KAAlB;AAwCA;AAED;AACD;AACA;;;AACCI,EAAAA,MAAM,GAAG;AACR,UAAMA,MAAN;;AAEA,QAAK,KAAKC,IAAV,EAAiB;AAChB,WAAKpB,QAAL,CAAcV,IAAd,CAAoB,SAApB,EAAgCc,EAAhC,CAAoC,IAApC,EAA0C,MAA1C;AACA,WAAKV,QAAL,CAAc2B,GAAd,CAAmB,KAAKrB,QAAxB;AACA;;AAED,SAAKN,QAAL,CAAc2B,GAAd,CAAmB,KAAKzB,WAAxB;AACA,SAAKF,QAAL,CAAc2B,GAAd,CAAmB,KAAKvB,SAAxB;AACA;AAED;AACD;AACA;;;AACCwB,EAAAA,KAAK,GAAG;AACP,SAAKC,OAAL,CAAaD,KAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCzB,EAAAA,kBAAkB,GAAG;AACpB,UAAMD,WAAW,GAAG,IAAIZ,WAAJ,EAApB;AAEAY,IAAAA,WAAW,CAACN,IAAZ,CAAkB,MAAlB,EAA2Bc,EAA3B,CAA+B,IAA/B,EAAqC,gBAArC;AACAR,IAAAA,WAAW,CAACN,IAAZ,CAAkB,UAAlB,EAA+Bc,EAA/B,CAAmC,IAAnC,EAAyC,iBAAzC;AAEA,WAAOR,WAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,gBAAgB,CAAEP,YAAF,EAAiB;AAChC,UAAMM,SAAS,GAAG,IAAIhB,IAAJ,EAAlB;AACA,UAAMQ,IAAI,GAAG,KAAKC,YAAlB;AAEAO,IAAAA,SAAS,CAACQ,WAAV,CAAuB;AACtBC,MAAAA,GAAG,EAAE,MADiB;AAGtBL,MAAAA,UAAU,EAAE;AACXC,QAAAA,KAAK,EAAE,CACN,IADM,EAEN,kBAFM,CADI;AAKXqB,QAAAA,KAAK,EAAElC,IAAI,CAACc,EAAL,CAAS,YAAT,CALI;AAMXqB,QAAAA,EAAE,EAAG,yBAAyBjC,YAAc;AANjC,OAHU;AAYtBE,MAAAA,QAAQ,EAAE,CACT;AACCgC,QAAAA,IAAI,EAAE,KAAKnC,YAAL,CAAkBa,EAAlB,CAAsB,OAAtB;AADP,OADS;AAZY,KAAvB;AAmBA,WAAON,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCO,EAAAA,iBAAiB,CAAEsB,OAAF,EAAWC,KAAX,EAAkBC,SAAlB,EAA8B;AAC9C,QAAKF,OAAL,EAAe;AACd,UAAK,OAAOA,OAAP,IAAkB,QAAvB,EAAkC;AACjC,eAAOA,OAAP;AACA,OAFD,MAEO;AACN,YAAKE,SAAL,EAAiB;AAChBA,UAAAA,SAAS,GAAG3C,mBAAmB,CAAE2C,SAAF,CAA/B;AACA;;AAED,YAAKF,OAAO,YAAYG,QAAxB,EAAmC;AAClC,iBAAOH,OAAO,CAAEC,KAAF,EAASC,SAAT,CAAd;AACA,SAFD,MAEO;AACN,iBAAQ,GAAGD,KAAO,GAAGC,SAAS,GAAI,KAAKA,SAAW,GAApB,GAAyB,EAAI,EAA3D;AACA;AACD;AACD;;AAED,WAAO,EAAP;AACA;;AA/N2C","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\n\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\n\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\n\nimport '../../theme/components/button/button.css';\n\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\nexport default class ButtonView extends View {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\tconst bind = this.bindTemplate;\n\t\tconst ariaLabelUid = uid();\n\n\t\t// Implement the Button interface.\n\t\tthis.set( 'class' );\n\t\tthis.set( 'labelStyle' );\n\t\tthis.set( 'icon' );\n\t\tthis.set( 'isEnabled', true );\n\t\tthis.set( 'isOn', false );\n\t\tthis.set( 'isVisible', true );\n\t\tthis.set( 'keystroke' );\n\t\tthis.set( 'label' );\n\t\tthis.set( 'tabindex', -1 );\n\t\tthis.set( 'tooltip' );\n\t\tthis.set( 'tooltipPosition', 's' );\n\t\tthis.set( 'type', 'button' );\n\t\tthis.set( 'withText', false );\n\n\t\t/**\n\t\t * Collection of the child views inside of the button {@link #element}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/viewcollection~ViewCollection}\n\t\t */\n\t\tthis.children = this.createCollection();\n\n\t\t/**\n\t\t * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n\t\t */\n\t\tthis.tooltipView = this._createTooltipView();\n\n\t\t/**\n\t\t * Label of the button view. It is configurable using the {@link #label label attribute}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/view~View} #labelView\n\t\t */\n\t\tthis.labelView = this._createLabelView( ariaLabelUid );\n\n\t\t/**\n\t\t * The icon view of the button. Will be added to {@link #children} when the\n\t\t * {@link #icon icon attribute} is defined.\n\t\t *\n\t\t * @readonly\n\t\t * @member {module:ui/icon/iconview~IconView} #iconView\n\t\t */\n\t\tthis.iconView = new IconView();\n\n\t\tthis.iconView.extendTemplate( {\n\t\t\tattributes: {\n\t\t\t\tclass: 'ck-button__icon'\n\t\t\t}\n\t\t} );\n\n\t\t/**\n\t\t * Tooltip of the button bound to the template.\n\t\t *\n\t\t * @see #tooltip\n\t\t * @see #_getTooltipString\n\t\t * @private\n\t\t * @observable\n\t\t * @member {Boolean} #_tooltipString\n\t\t */\n\t\tthis.bind( '_tooltipString' ).to(\n\t\t\tthis, 'tooltip',\n\t\t\tthis, 'label',\n\t\t\tthis, 'keystroke',\n\t\t\tthis._getTooltipString.bind( this )\n\t\t);\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'button',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button',\n\t\t\t\t\tbind.to( 'class' ),\n\t\t\t\t\tbind.if( 'isEnabled', 'ck-disabled', value => !value ),\n\t\t\t\t\tbind.if( 'isVisible', 'ck-hidden', value => !value ),\n\t\t\t\t\tbind.to( 'isOn', value => value ? 'ck-on' : 'ck-off' ),\n\t\t\t\t\tbind.if( 'withText', 'ck-button_with-text' )\n\t\t\t\t],\n\t\t\t\ttype: bind.to( 'type', value => value ? value : 'button' ),\n\t\t\t\ttabindex: bind.to( 'tabindex' ),\n\t\t\t\t'aria-labelledby': `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t\t'aria-disabled': bind.if( 'isEnabled', true, value => !value ),\n\t\t\t\t'aria-pressed': bind.if( 'isOn', true )\n\t\t\t},\n\n\t\t\tchildren: this.children,\n\n\t\t\ton: {\n\t\t\t\tmousedown: bind.to( evt => {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t} ),\n\n\t\t\t\tclick: bind.to( evt => {\n\t\t\t\t\t// We can't make the button disabled using the disabled attribute, because it won't be focusable.\n\t\t\t\t\t// Though, shouldn't this condition be moved to the button controller?\n\t\t\t\t\tif ( this.isEnabled ) {\n\t\t\t\t\t\tthis.fire( 'execute' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prevent the default when button is disabled, to block e.g.\n\t\t\t\t\t\t// automatic form submitting. See ckeditor/ckeditor5-link#74.\n\t\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trender() {\n\t\tsuper.render();\n\n\t\tif ( this.icon ) {\n\t\t\tthis.iconView.bind( 'content' ).to( this, 'icon' );\n\t\t\tthis.children.add( this.iconView );\n\t\t}\n\n\t\tthis.children.add( this.tooltipView );\n\t\tthis.children.add( this.labelView );\n\t}\n\n\t/**\n\t * Focuses the {@link #element} of the button.\n\t */\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n\n\t/**\n\t * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n\t * attributes.\n\t *\n\t * @private\n\t * @returns {module:ui/tooltip/tooltipview~TooltipView}\n\t */\n\t_createTooltipView() {\n\t\tconst tooltipView = new TooltipView();\n\n\t\ttooltipView.bind( 'text' ).to( this, '_tooltipString' );\n\t\ttooltipView.bind( 'position' ).to( this, 'tooltipPosition' );\n\n\t\treturn tooltipView;\n\t}\n\n\t/**\n\t * Creates a label view instance and binds it with button attributes.\n\t *\n\t * @private\n\t * @param {String} ariaLabelUid The aria label UID.\n\t * @returns {module:ui/view~View}\n\t */\n\t_createLabelView( ariaLabelUid ) {\n\t\tconst labelView = new View();\n\t\tconst bind = this.bindTemplate;\n\n\t\tlabelView.setTemplate( {\n\t\t\ttag: 'span',\n\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck',\n\t\t\t\t\t'ck-button__label'\n\t\t\t\t],\n\t\t\t\tstyle: bind.to( 'labelStyle' ),\n\t\t\t\tid: `ck-editor__aria-label_${ ariaLabelUid }`,\n\t\t\t},\n\n\t\t\tchildren: [\n\t\t\t\t{\n\t\t\t\t\ttext: this.bindTemplate.to( 'label' )\n\t\t\t\t}\n\t\t\t]\n\t\t} );\n\n\t\treturn labelView;\n\t}\n\n\t/**\n\t * Gets the text for the {@link #tooltipView} from the combination of\n\t * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n\t *\n\t * @private\n\t * @see #tooltip\n\t * @see #_tooltipString\n\t * @param {Boolean|String|Function} tooltip Button tooltip.\n\t * @param {String} label Button label.\n\t * @param {String} keystroke Button keystroke.\n\t * @returns {String}\n\t */\n\t_getTooltipString( tooltip, label, keystroke ) {\n\t\tif ( tooltip ) {\n\t\t\tif ( typeof tooltip == 'string' ) {\n\t\t\t\treturn tooltip;\n\t\t\t} else {\n\t\t\t\tif ( keystroke ) {\n\t\t\t\t\tkeystroke = getEnvKeystrokeText( keystroke );\n\t\t\t\t}\n\n\t\t\t\tif ( tooltip instanceof Function ) {\n\t\t\t\t\treturn tooltip( label, keystroke );\n\t\t\t\t} else {\n\t\t\t\t\treturn `${ label }${ keystroke ? ` (${ keystroke })` : '' }`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}