{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends {module:core/plugin~Plugin}\n */\n\nexport default class ImageStyleEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageStyleEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const data = editor.data;\n    const editing = editor.editing; // Define default configuration.\n\n    editor.config.define('image.styles', ['full', 'side']); // Get configuration.\n\n    const styles = normalizeImageStyles(editor.config.get('image.styles')); // Allow imageStyle attribute in image.\n    // We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\n    schema.extend('image', {\n      allowAttributes: 'imageStyle'\n    }); // Converters for imageStyle attribute from model to view.\n\n    const modelToViewConverter = modelToViewStyleAttribute(styles);\n    editing.downcastDispatcher.on('attribute:imageStyle:image', modelToViewConverter);\n    data.downcastDispatcher.on('attribute:imageStyle:image', modelToViewConverter); // Converter for figure element from view to model.\n\n    data.upcastDispatcher.on('element:figure', viewToModelStyleAttribute(styles), {\n      priority: 'low'\n    }); // Register imageStyle command.\n\n    editor.commands.add('imageStyle', new ImageStyleCommand(editor, styles));\n  }\n\n}\n/**\n * The image style format descriptor.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n *\n * @property {String} name The unique name of the style. It will be used to:\n *\n * * Store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element.\n * * As a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for each of the styles (`'imageStyle:{name}'`) in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n *\n * @property {String} icon One of the following to be used when creating the style's button:\n *\n * * An SVG icon source (as an XML string).\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n *\n * @property {String} title The style's title.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n */","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleediting.js"],"names":["Plugin","ImageStyleCommand","viewToModelStyleAttribute","modelToViewStyleAttribute","normalizeImageStyles","ImageStyleEditing","pluginName","init","editor","schema","model","data","editing","config","define","styles","get","extend","allowAttributes","modelToViewConverter","downcastDispatcher","on","upcastDispatcher","priority","commands","add"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,cAArE;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCL,MAAhC,CAAuC;AACrD;AACD;AACA;AACsB,aAAVM,UAAU,GAAG;AACvB,WAAO,mBAAP;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,MAAM,GAAGD,MAAM,CAACE,KAAP,CAAaD,MAA5B;AACA,UAAME,IAAI,GAAGH,MAAM,CAACG,IAApB;AACA,UAAMC,OAAO,GAAGJ,MAAM,CAACI,OAAvB,CAJM,CAMN;;AACAJ,IAAAA,MAAM,CAACK,MAAP,CAAcC,MAAd,CAAsB,cAAtB,EAAsC,CAAE,MAAF,EAAU,MAAV,CAAtC,EAPM,CASN;;AACA,UAAMC,MAAM,GAAGX,oBAAoB,CAAEI,MAAM,CAACK,MAAP,CAAcG,GAAd,CAAmB,cAAnB,CAAF,CAAnC,CAVM,CAYN;AACA;;AACAP,IAAAA,MAAM,CAACQ,MAAP,CAAe,OAAf,EAAwB;AAAEC,MAAAA,eAAe,EAAE;AAAnB,KAAxB,EAdM,CAgBN;;AACA,UAAMC,oBAAoB,GAAGhB,yBAAyB,CAAEY,MAAF,CAAtD;AACAH,IAAAA,OAAO,CAACQ,kBAAR,CAA2BC,EAA3B,CAA+B,4BAA/B,EAA6DF,oBAA7D;AACAR,IAAAA,IAAI,CAACS,kBAAL,CAAwBC,EAAxB,CAA4B,4BAA5B,EAA0DF,oBAA1D,EAnBM,CAqBN;;AACAR,IAAAA,IAAI,CAACW,gBAAL,CAAsBD,EAAtB,CAA0B,gBAA1B,EAA4CnB,yBAAyB,CAAEa,MAAF,CAArE,EAAiF;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAjF,EAtBM,CAwBN;;AACAf,IAAAA,MAAM,CAACgB,QAAP,CAAgBC,GAAhB,CAAqB,YAArB,EAAmC,IAAIxB,iBAAJ,CAAuBO,MAAvB,EAA+BO,MAA/B,CAAnC;AACA;;AArCoD;AAwCtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends {module:core/plugin~Plugin}\n */\nexport default class ImageStyleEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleEditing';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\t\tconst data = editor.data;\n\t\tconst editing = editor.editing;\n\n\t\t// Define default configuration.\n\t\teditor.config.define( 'image.styles', [ 'full', 'side' ] );\n\n\t\t// Get configuration.\n\t\tconst styles = normalizeImageStyles( editor.config.get( 'image.styles' ) );\n\n\t\t// Allow imageStyle attribute in image.\n\t\t// We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\t\tschema.extend( 'image', { allowAttributes: 'imageStyle' } );\n\n\t\t// Converters for imageStyle attribute from model to view.\n\t\tconst modelToViewConverter = modelToViewStyleAttribute( styles );\n\t\tediting.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\t\tdata.downcastDispatcher.on( 'attribute:imageStyle:image', modelToViewConverter );\n\n\t\t// Converter for figure element from view to model.\n\t\tdata.upcastDispatcher.on( 'element:figure', viewToModelStyleAttribute( styles ), { priority: 'low' } );\n\n\t\t// Register imageStyle command.\n\t\teditor.commands.add( 'imageStyle', new ImageStyleCommand( editor, styles ) );\n\t}\n}\n\n/**\n * The image style format descriptor.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n *\n * @property {String} name The unique name of the style. It will be used to:\n *\n * * Store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element.\n * * As a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for each of the styles (`'imageStyle:{name}'`) in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n *\n * @property {String} icon One of the following to be used when creating the style's button:\n *\n * * An SVG icon source (as an XML string).\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n *\n * @property {String} title The style's title.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n */\n"]},"metadata":{},"sourceType":"module"}