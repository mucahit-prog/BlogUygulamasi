{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module remove-format/removeformatcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The remove format command.\n *\n * It is used by the {@link module:remove-format/removeformat~RemoveFormat remove format feature}\n * to clear the formatting in the selection.\n *\n *\t\teditor.execute( 'removeFormat' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class RemoveFormatCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    this.isEnabled = !!first(this._getFormattingItems(model.document.selection, model.schema));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    model.change(writer => {\n      for (const item of this._getFormattingItems(model.document.selection, schema)) {\n        if (item.is('selection')) {\n          for (const attributeName of this._getFormattingAttributes(item, schema)) {\n            writer.removeSelectionAttribute(attributeName);\n          }\n        } else {\n          // Workaround for items with multiple removable attributes. See\n          // https://github.com/ckeditor/ckeditor5-remove-format/pull/1#pullrequestreview-220515609\n          const itemRange = writer.createRangeOn(item);\n\n          for (const attributeName of this._getFormattingAttributes(item, schema)) {\n            writer.removeAttribute(attributeName, itemRange);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Returns an iterable of items in a selection (including the selection itself) that have formatting model\n   * attributes to be removed by the feature.\n   *\n   * @protected\n   * @param {module:engine/model/documentselection~DocumentSelection} selection\n   * @param {module:engine/model/schema~Schema} schema The schema describing the item.\n   * @returns {Iterable.<module:engine/model/item~Item>|Iterable.<module:engine/model/documentselection~DocumentSelection>}\n   */\n\n\n  *_getFormattingItems(selection, schema) {\n    const itemHasRemovableFormatting = item => {\n      return !!first(this._getFormattingAttributes(item, schema));\n    };\n\n    for (const curRange of selection.getRanges()) {\n      for (const item of curRange.getItems()) {\n        if (itemHasRemovableFormatting(item)) {\n          yield item;\n        }\n      }\n    } // Finally the selection might be formatted as well, so make sure to check it.\n\n\n    if (itemHasRemovableFormatting(selection)) {\n      yield selection;\n    }\n  }\n  /**\n   * Returns an iterable of formatting attributes of a given model item.\n   *\n   * **Note:** Formatting items have the `isFormatting` property set to `true`.\n   *\n   * @protected\n   * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} item\n   * @param {module:engine/model/schema~Schema} schema The schema describing the item.\n   * @returns {Iterable.<String>} The names of formatting attributes found in a given item.\n   */\n\n\n  *_getFormattingAttributes(item, schema) {\n    for (const [attributeName] of item.getAttributes()) {\n      const attributeProperties = schema.getAttributeProperties(attributeName);\n\n      if (attributeProperties && attributeProperties.isFormatting) {\n        yield attributeName;\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-remove-format/src/removeformatcommand.js"],"names":["Command","first","RemoveFormatCommand","refresh","model","editor","isEnabled","_getFormattingItems","document","selection","schema","execute","change","writer","item","is","attributeName","_getFormattingAttributes","removeSelectionAttribute","itemRange","createRangeOn","removeAttribute","itemHasRemovableFormatting","curRange","getRanges","getItems","getAttributes","attributeProperties","getAttributeProperties","isFormatting"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,sCAApB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,mBAAN,SAAkCF,OAAlC,CAA0C;AACxD;AACD;AACA;AACCG,EAAAA,OAAO,GAAG;AACT,UAAMC,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AAEA,SAAKE,SAAL,GAAiB,CAAC,CAACL,KAAK,CAAE,KAAKM,mBAAL,CAA0BH,KAAK,CAACI,QAAN,CAAeC,SAAzC,EAAoDL,KAAK,CAACM,MAA1D,CAAF,CAAxB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,OAAO,GAAG;AACT,UAAMP,KAAK,GAAG,KAAKC,MAAL,CAAYD,KAA1B;AACA,UAAMM,MAAM,GAAGN,KAAK,CAACM,MAArB;AAEAN,IAAAA,KAAK,CAACQ,MAAN,CAAcC,MAAM,IAAI;AACvB,WAAM,MAAMC,IAAZ,IAAoB,KAAKP,mBAAL,CAA0BH,KAAK,CAACI,QAAN,CAAeC,SAAzC,EAAoDC,MAApD,CAApB,EAAmF;AAClF,YAAKI,IAAI,CAACC,EAAL,CAAS,WAAT,CAAL,EAA8B;AAC7B,eAAM,MAAMC,aAAZ,IAA6B,KAAKC,wBAAL,CAA+BH,IAA/B,EAAqCJ,MAArC,CAA7B,EAA6E;AAC5EG,YAAAA,MAAM,CAACK,wBAAP,CAAiCF,aAAjC;AACA;AACD,SAJD,MAIO;AACN;AACA;AACA,gBAAMG,SAAS,GAAGN,MAAM,CAACO,aAAP,CAAsBN,IAAtB,CAAlB;;AAEA,eAAM,MAAME,aAAZ,IAA6B,KAAKC,wBAAL,CAA+BH,IAA/B,EAAqCJ,MAArC,CAA7B,EAA6E;AAC5EG,YAAAA,MAAM,CAACQ,eAAP,CAAwBL,aAAxB,EAAuCG,SAAvC;AACA;AACD;AACD;AACD,KAhBD;AAiBA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,GAAnBZ,mBAAmB,CAAEE,SAAF,EAAaC,MAAb,EAAsB;AAC1C,UAAMY,0BAA0B,GAAGR,IAAI,IAAI;AAC1C,aAAO,CAAC,CAACb,KAAK,CAAE,KAAKgB,wBAAL,CAA+BH,IAA/B,EAAqCJ,MAArC,CAAF,CAAd;AACA,KAFD;;AAIA,SAAM,MAAMa,QAAZ,IAAwBd,SAAS,CAACe,SAAV,EAAxB,EAAgD;AAC/C,WAAM,MAAMV,IAAZ,IAAoBS,QAAQ,CAACE,QAAT,EAApB,EAA0C;AACzC,YAAKH,0BAA0B,CAAER,IAAF,CAA/B,EAA0C;AACzC,gBAAMA,IAAN;AACA;AACD;AACD,KAXyC,CAa1C;;;AACA,QAAKQ,0BAA0B,CAAEb,SAAF,CAA/B,EAA+C;AAC9C,YAAMA,SAAN;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC2B,GAAxBQ,wBAAwB,CAAEH,IAAF,EAAQJ,MAAR,EAAiB;AAC1C,SAAM,MAAM,CAAEM,aAAF,CAAZ,IAAiCF,IAAI,CAACY,aAAL,EAAjC,EAAwD;AACvD,YAAMC,mBAAmB,GAAGjB,MAAM,CAACkB,sBAAP,CAA+BZ,aAA/B,CAA5B;;AAEA,UAAKW,mBAAmB,IAAIA,mBAAmB,CAACE,YAAhD,EAA+D;AAC9D,cAAMb,aAAN;AACA;AACD;AACD;;AAlFuD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module remove-format/removeformatcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n\n/**\n * The remove format command.\n *\n * It is used by the {@link module:remove-format/removeformat~RemoveFormat remove format feature}\n * to clear the formatting in the selection.\n *\n *\t\teditor.execute( 'removeFormat' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveFormatCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\n\t\tthis.isEnabled = !!first( this._getFormattingItems( model.document.selection, model.schema ) );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst schema = model.schema;\n\n\t\tmodel.change( writer => {\n\t\t\tfor ( const item of this._getFormattingItems( model.document.selection, schema ) ) {\n\t\t\t\tif ( item.is( 'selection' ) ) {\n\t\t\t\t\tfor ( const attributeName of this._getFormattingAttributes( item, schema ) ) {\n\t\t\t\t\t\twriter.removeSelectionAttribute( attributeName );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Workaround for items with multiple removable attributes. See\n\t\t\t\t\t// https://github.com/ckeditor/ckeditor5-remove-format/pull/1#pullrequestreview-220515609\n\t\t\t\t\tconst itemRange = writer.createRangeOn( item );\n\n\t\t\t\t\tfor ( const attributeName of this._getFormattingAttributes( item, schema ) ) {\n\t\t\t\t\t\twriter.removeAttribute( attributeName, itemRange );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t * Returns an iterable of items in a selection (including the selection itself) that have formatting model\n\t * attributes to be removed by the feature.\n\t *\n\t * @protected\n\t * @param {module:engine/model/documentselection~DocumentSelection} selection\n\t * @param {module:engine/model/schema~Schema} schema The schema describing the item.\n\t * @returns {Iterable.<module:engine/model/item~Item>|Iterable.<module:engine/model/documentselection~DocumentSelection>}\n\t */\n\t* _getFormattingItems( selection, schema ) {\n\t\tconst itemHasRemovableFormatting = item => {\n\t\t\treturn !!first( this._getFormattingAttributes( item, schema ) );\n\t\t};\n\n\t\tfor ( const curRange of selection.getRanges() ) {\n\t\t\tfor ( const item of curRange.getItems() ) {\n\t\t\t\tif ( itemHasRemovableFormatting( item ) ) {\n\t\t\t\t\tyield item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Finally the selection might be formatted as well, so make sure to check it.\n\t\tif ( itemHasRemovableFormatting( selection ) ) {\n\t\t\tyield selection;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterable of formatting attributes of a given model item.\n\t *\n\t * **Note:** Formatting items have the `isFormatting` property set to `true`.\n\t *\n\t * @protected\n\t * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} item\n\t * @param {module:engine/model/schema~Schema} schema The schema describing the item.\n\t * @returns {Iterable.<String>} The names of formatting attributes found in a given item.\n\t */\n\t* _getFormattingAttributes( item, schema ) {\n\t\tfor ( const [ attributeName ] of item.getAttributes() ) {\n\t\t\tconst attributeProperties = schema.getAttributeProperties( attributeName );\n\n\t\t\tif ( attributeProperties && attributeProperties.isFormatting ) {\n\t\t\t\tyield attributeName;\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}