{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\n *\n * @param {module:engine/view/view~View} view\n * @param {String} placeholderText The text to be displayed when the caption is empty.\n * @returns {Function}\n */\n\nexport function captionElementCreator(view, placeholderText) {\n  return writer => {\n    const editable = writer.createEditableElement('figcaption');\n    writer.setCustomProperty('imageCaption', true, editable);\n    enablePlaceholder({\n      view,\n      element: editable,\n      text: placeholderText\n    });\n    return toWidgetEditable(editable, writer);\n  };\n}\n/**\n * Returns `true` if a given view element is the image caption editable.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isCaption(viewElement) {\n  return !!viewElement.getCustomProperty('imageCaption');\n}\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\n\nexport function getCaptionFromImage(imageModelElement) {\n  for (const node of imageModelElement.getChildren()) {\n    if (!!node && node.is('caption')) {\n      return node;\n    }\n  }\n\n  return null;\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\n\nexport function matchImageCaption(element) {\n  const parent = element.parent; // Convert only captions for images.\n\n  if (element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass('image')) {\n    return {\n      name: true\n    };\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/imagecaption/utils.js"],"names":["enablePlaceholder","toWidgetEditable","captionElementCreator","view","placeholderText","writer","editable","createEditableElement","setCustomProperty","element","text","isCaption","viewElement","getCustomProperty","getCaptionFromImage","imageModelElement","node","getChildren","is","matchImageCaption","parent","name","hasClass"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,iBAAT,QAAkC,iDAAlC;AACA,SAASC,gBAAT,QAAiC,sCAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAAgCC,IAAhC,EAAsCC,eAAtC,EAAwD;AAC9D,SAAOC,MAAM,IAAI;AAChB,UAAMC,QAAQ,GAAGD,MAAM,CAACE,qBAAP,CAA8B,YAA9B,CAAjB;AACAF,IAAAA,MAAM,CAACG,iBAAP,CAA0B,cAA1B,EAA0C,IAA1C,EAAgDF,QAAhD;AAEAN,IAAAA,iBAAiB,CAAE;AAClBG,MAAAA,IADkB;AAElBM,MAAAA,OAAO,EAAEH,QAFS;AAGlBI,MAAAA,IAAI,EAAEN;AAHY,KAAF,CAAjB;AAMA,WAAOH,gBAAgB,CAAEK,QAAF,EAAYD,MAAZ,CAAvB;AACA,GAXD;AAYA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,SAAT,CAAoBC,WAApB,EAAkC;AACxC,SAAO,CAAC,CAACA,WAAW,CAACC,iBAAZ,CAA+B,cAA/B,CAAT;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA8BC,iBAA9B,EAAkD;AACxD,OAAM,MAAMC,IAAZ,IAAoBD,iBAAiB,CAACE,WAAlB,EAApB,EAAsD;AACrD,QAAK,CAAC,CAACD,IAAF,IAAUA,IAAI,CAACE,EAAL,CAAS,SAAT,CAAf,EAAsC;AACrC,aAAOF,IAAP;AACA;AACD;;AAED,SAAO,IAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,iBAAT,CAA4BV,OAA5B,EAAsC;AAC5C,QAAMW,MAAM,GAAGX,OAAO,CAACW,MAAvB,CAD4C,CAG5C;;AACA,MAAKX,OAAO,CAACY,IAAR,IAAgB,YAAhB,IAAgCD,MAAhC,IAA0CA,MAAM,CAACC,IAAP,IAAe,QAAzD,IAAqED,MAAM,CAACE,QAAP,CAAiB,OAAjB,CAA1E,EAAuG;AACtG,WAAO;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAP;AACA;;AAED,SAAO,IAAP;AACA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\n\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\n\n/**\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\n *\n * @param {module:engine/view/view~View} view\n * @param {String} placeholderText The text to be displayed when the caption is empty.\n * @returns {Function}\n */\nexport function captionElementCreator( view, placeholderText ) {\n\treturn writer => {\n\t\tconst editable = writer.createEditableElement( 'figcaption' );\n\t\twriter.setCustomProperty( 'imageCaption', true, editable );\n\n\t\tenablePlaceholder( {\n\t\t\tview,\n\t\t\telement: editable,\n\t\t\ttext: placeholderText\n\t\t} );\n\n\t\treturn toWidgetEditable( editable, writer );\n\t};\n}\n\n/**\n * Returns `true` if a given view element is the image caption editable.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\nexport function isCaption( viewElement ) {\n\treturn !!viewElement.getCustomProperty( 'imageCaption' );\n}\n\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\nexport function getCaptionFromImage( imageModelElement ) {\n\tfor ( const node of imageModelElement.getChildren() ) {\n\t\tif ( !!node && node.is( 'caption' ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\nexport function matchImageCaption( element ) {\n\tconst parent = element.parent;\n\n\t// Convert only captions for images.\n\tif ( element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass( 'image' ) ) {\n\t\treturn { name: true };\n\t}\n\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}