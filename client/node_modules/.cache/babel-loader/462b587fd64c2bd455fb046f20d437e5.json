{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { normalizeImageStyles } from './utils';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyleUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageStyleUI';\n  }\n  /**\n   * Returns the default localized style titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:image/imagestyle/utils~defaultStyles} are available:\n   *\n   * * `'Full size image'`,\n   * * `'Side image'`,\n   * * `'Left aligned image'`,\n   * * `'Centered image'`,\n   * * `'Right aligned image'`\n   *\n   * @returns {Object.<String,String>}\n   */\n\n\n  get localizedDefaultStylesTitles() {\n    const t = this.editor.t;\n    return {\n      'Full size image': t('Full size image'),\n      'Side image': t('Side image'),\n      'Left aligned image': t('Left aligned image'),\n      'Centered image': t('Centered image'),\n      'Right aligned image': t('Right aligned image')\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const configuredStyles = editor.config.get('image.styles');\n    const translatedStyles = translateStyles(normalizeImageStyles(configuredStyles), this.localizedDefaultStylesTitles);\n\n    for (const style of translatedStyles) {\n      this._createButton(style);\n    }\n  }\n  /**\n   * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n   *\n   * @private\n   * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n   */\n\n\n  _createButton(style) {\n    const editor = this.editor;\n    const componentName = `imageStyle:${style.name}`;\n    editor.ui.componentFactory.add(componentName, locale => {\n      const command = editor.commands.get('imageStyle');\n      const view = new ButtonView(locale);\n      view.set({\n        label: style.title,\n        icon: style.icon,\n        tooltip: true\n      });\n      view.bind('isEnabled').to(command, 'isEnabled');\n      view.bind('isOn').to(command, 'value', value => value === style.name);\n      this.listenTo(view, 'execute', () => editor.execute('imageStyle', {\n        value: style.name\n      }));\n      return view;\n    });\n  }\n\n}\n/**\n * Returns the translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\n\nfunction translateStyles(styles, titles) {\n  for (const style of styles) {\n    // Localize the titles of the styles, if a title corresponds with\n    // a localized default provided by the plugin.\n    if (titles[style.title]) {\n      style.title = titles[style.title];\n    }\n  }\n\n  return styles;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleui.js"],"names":["Plugin","ButtonView","normalizeImageStyles","ImageStyleUI","pluginName","localizedDefaultStylesTitles","t","editor","init","configuredStyles","config","get","translatedStyles","translateStyles","style","_createButton","componentName","name","ui","componentFactory","add","locale","command","commands","view","set","label","title","icon","tooltip","bind","to","value","listenTo","execute","styles","titles"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n\nimport { normalizeImageStyles } from './utils';\n\nimport '../../theme/imagestyle.css';\n\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tstatic get pluginName() {\n\t\treturn 'ImageStyleUI';\n\t}\n\n\t/**\n\t * Returns the default localized style titles provided by the plugin.\n\t *\n\t * The following localized titles corresponding with\n\t * {@link module:image/imagestyle/utils~defaultStyles} are available:\n\t *\n\t * * `'Full size image'`,\n\t * * `'Side image'`,\n\t * * `'Left aligned image'`,\n\t * * `'Centered image'`,\n\t * * `'Right aligned image'`\n\t *\n\t * @returns {Object.<String,String>}\n\t */\n\tget localizedDefaultStylesTitles() {\n\t\tconst t = this.editor.t;\n\n\t\treturn {\n\t\t\t'Full size image': t( 'Full size image' ),\n\t\t\t'Side image': t( 'Side image' ),\n\t\t\t'Left aligned image': t( 'Left aligned image' ),\n\t\t\t'Centered image': t( 'Centered image' ),\n\t\t\t'Right aligned image': t( 'Right aligned image' )\n\t\t};\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst configuredStyles = editor.config.get( 'image.styles' );\n\n\t\tconst translatedStyles = translateStyles( normalizeImageStyles( configuredStyles ), this.localizedDefaultStylesTitles );\n\n\t\tfor ( const style of translatedStyles ) {\n\t\t\tthis._createButton( style );\n\t\t}\n\t}\n\n\t/**\n\t * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n\t *\n\t * @private\n\t * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n\t */\n\t_createButton( style ) {\n\t\tconst editor = this.editor;\n\n\t\tconst componentName = `imageStyle:${ style.name }`;\n\n\t\teditor.ui.componentFactory.add( componentName, locale => {\n\t\t\tconst command = editor.commands.get( 'imageStyle' );\n\t\t\tconst view = new ButtonView( locale );\n\n\t\t\tview.set( {\n\t\t\t\tlabel: style.title,\n\t\t\t\ticon: style.icon,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\tview.bind( 'isEnabled' ).to( command, 'isEnabled' );\n\t\t\tview.bind( 'isOn' ).to( command, 'value', value => value === style.name );\n\n\t\t\tthis.listenTo( view, 'execute', () => editor.execute( 'imageStyle', { value: style.name } ) );\n\n\t\t\treturn view;\n\t\t} );\n\t}\n}\n\n/**\n * Returns the translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nfunction translateStyles( styles, titles ) {\n\tfor ( const style of styles ) {\n\t\t// Localize the titles of the styles, if a title corresponds with\n\t\t// a localized default provided by the plugin.\n\t\tif ( titles[ style.title ] ) {\n\t\t\tstyle.title = titles[ style.title ];\n\t\t}\n\t}\n\n\treturn styles;\n}\n"]},"metadata":{},"sourceType":"module"}