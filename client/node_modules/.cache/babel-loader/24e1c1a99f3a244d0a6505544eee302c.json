{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\nimport log from '@ckeditor/ckeditor5-utils/src/log';\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n/**\n * Default image styles provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `full` is a full–width image without any CSS class,\n * * `side` is a side image styled with the `image-style-side` CSS class.\n *\n * There are also 3 styles focused on formatting:\n *\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `alignCenter` centers the image using the `image-style-align-center` class,\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\n\nconst defaultStyles = {\n  // This option is equal to the situation when no style is applied.\n  full: {\n    name: 'full',\n    title: 'Full size image',\n    icon: fullWidthIcon,\n    isDefault: true\n  },\n  // This represents a side image.\n  side: {\n    name: 'side',\n    title: 'Side image',\n    icon: rightIcon,\n    className: 'image-style-side'\n  },\n  // This style represents an image aligned to the left.\n  alignLeft: {\n    name: 'alignLeft',\n    title: 'Left aligned image',\n    icon: leftIcon,\n    className: 'image-style-align-left'\n  },\n  // This style represents a centered image.\n  alignCenter: {\n    name: 'alignCenter',\n    title: 'Centered image',\n    icon: centerIcon,\n    className: 'image-style-align-center'\n  },\n  // This style represents an image aligned to the right.\n  alignRight: {\n    name: 'alignRight',\n    title: 'Right aligned image',\n    icon: rightIcon,\n    className: 'image-style-align-right'\n  }\n};\n/**\n * Default image style icons provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\n\nconst defaultIcons = {\n  full: fullWidthIcon,\n  left: leftIcon,\n  right: rightIcon,\n  center: centerIcon\n};\n/**\n * Returns a {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\n\nexport function normalizeImageStyles(configuredStyles = []) {\n  return configuredStyles.map(_normalizeStyle);\n} // Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n\nfunction _normalizeStyle(style) {\n  // Just the name of the style has been passed.\n  if (typeof style == 'string') {\n    const styleName = style; // If it's one of the defaults, just use it.\n\n    if (defaultStyles[styleName]) {\n      // Clone the style to avoid overriding defaults.\n      style = Object.assign({}, defaultStyles[styleName]);\n    } // If it's just a name but none of the defaults, warn because probably it's a mistake.\n    else {\n        log.warn('image-style-not-found: There is no such image style of given name.', {\n          name: styleName\n        }); // Normalize the style anyway to prevent errors.\n\n        style = {\n          name: styleName\n        };\n      }\n  } // If an object style has been passed and if the name matches one of the defaults,\n  // extend it with defaults – the user wants to customize a default style.\n  // Note: Don't override the user–defined style object, clone it instead.\n  else if (defaultStyles[style.name]) {\n      const defaultStyle = defaultStyles[style.name];\n      const extendedStyle = Object.assign({}, style);\n\n      for (const prop in defaultStyle) {\n        if (!style.hasOwnProperty(prop)) {\n          extendedStyle[prop] = defaultStyle[prop];\n        }\n      }\n\n      style = extendedStyle;\n    } // If an icon is defined as a string and correspond with a name\n  // in default icons, use the default icon provided by the plugin.\n\n\n  if (typeof style.icon == 'string' && defaultIcons[style.icon]) {\n    style.icon = defaultIcons[style.icon];\n  }\n\n  return style;\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulaması/client/node_modules/@ckeditor/ckeditor5-image/src/imagestyle/utils.js"],"names":["log","fullWidthIcon","leftIcon","centerIcon","rightIcon","defaultStyles","full","name","title","icon","isDefault","side","className","alignLeft","alignCenter","alignRight","defaultIcons","left","right","center","normalizeImageStyles","configuredStyles","map","_normalizeStyle","style","styleName","Object","assign","warn","defaultStyle","extendedStyle","prop","hasOwnProperty"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\nimport log from '@ckeditor/ckeditor5-utils/src/log';\n\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n\n/**\n * Default image styles provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `full` is a full–width image without any CSS class,\n * * `side` is a side image styled with the `image-style-side` CSS class.\n *\n * There are also 3 styles focused on formatting:\n *\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `alignCenter` centers the image using the `image-style-align-center` class,\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\nconst defaultStyles = {\n\t// This option is equal to the situation when no style is applied.\n\tfull: {\n\t\tname: 'full',\n\t\ttitle: 'Full size image',\n\t\ticon: fullWidthIcon,\n\t\tisDefault: true\n\t},\n\n\t// This represents a side image.\n\tside: {\n\t\tname: 'side',\n\t\ttitle: 'Side image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-side'\n\t},\n\n\t// This style represents an image aligned to the left.\n\talignLeft: {\n\t\tname: 'alignLeft',\n\t\ttitle: 'Left aligned image',\n\t\ticon: leftIcon,\n\t\tclassName: 'image-style-align-left'\n\t},\n\n\t// This style represents a centered image.\n\talignCenter: {\n\t\tname: 'alignCenter',\n\t\ttitle: 'Centered image',\n\t\ticon: centerIcon,\n\t\tclassName: 'image-style-align-center'\n\t},\n\n\t// This style represents an image aligned to the right.\n\talignRight: {\n\t\tname: 'alignRight',\n\t\ttitle: 'Right aligned image',\n\t\ticon: rightIcon,\n\t\tclassName: 'image-style-align-right'\n\t}\n};\n\n/**\n * Default image style icons provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\nconst defaultIcons = {\n\tfull: fullWidthIcon,\n\tleft: leftIcon,\n\tright: rightIcon,\n\tcenter: centerIcon\n};\n\n/**\n * Returns a {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nexport function normalizeImageStyles( configuredStyles = [] ) {\n\treturn configuredStyles.map( _normalizeStyle );\n}\n\n// Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\nfunction _normalizeStyle( style ) {\n\t// Just the name of the style has been passed.\n\tif ( typeof style == 'string' ) {\n\t\tconst styleName = style;\n\n\t\t// If it's one of the defaults, just use it.\n\t\tif ( defaultStyles[ styleName ] ) {\n\t\t\t// Clone the style to avoid overriding defaults.\n\t\t\tstyle = Object.assign( {}, defaultStyles[ styleName ] );\n\t\t}\n\t\t// If it's just a name but none of the defaults, warn because probably it's a mistake.\n\t\telse {\n\t\t\tlog.warn(\n\t\t\t\t'image-style-not-found: There is no such image style of given name.',\n\t\t\t\t{ name: styleName }\n\t\t\t);\n\n\t\t\t// Normalize the style anyway to prevent errors.\n\t\t\tstyle = {\n\t\t\t\tname: styleName\n\t\t\t};\n\t\t}\n\t}\n\t// If an object style has been passed and if the name matches one of the defaults,\n\t// extend it with defaults – the user wants to customize a default style.\n\t// Note: Don't override the user–defined style object, clone it instead.\n\telse if ( defaultStyles[ style.name ] ) {\n\t\tconst defaultStyle = defaultStyles[ style.name ];\n\t\tconst extendedStyle = Object.assign( {}, style );\n\n\t\tfor ( const prop in defaultStyle ) {\n\t\t\tif ( !style.hasOwnProperty( prop ) ) {\n\t\t\t\textendedStyle[ prop ] = defaultStyle[ prop ];\n\t\t\t}\n\t\t}\n\n\t\tstyle = extendedStyle;\n\t}\n\n\t// If an icon is defined as a string and correspond with a name\n\t// in default icons, use the default icon provided by the plugin.\n\tif ( typeof style.icon == 'string' && defaultIcons[ style.icon ] ) {\n\t\tstyle.icon = defaultIcons[ style.icon ];\n\t}\n\n\treturn style;\n}\n"]},"metadata":{},"sourceType":"module"}