{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/utils\n */\n\n/**\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontsize~FontSizeOption} format.\n *\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\n */\nexport function normalizeOptions(configuredOptions) {\n  // Convert options to objects.\n  return configuredOptions.map(getOptionDefinition) // Filter out undefined values that `getOptionDefinition` might return.\n  .filter(option => !!option);\n} // Default named presets map.\n\nconst namedPresets = {\n  tiny: {\n    title: 'Tiny',\n    model: 'tiny',\n    view: {\n      name: 'span',\n      classes: 'text-tiny',\n      priority: 7\n    }\n  },\n  small: {\n    title: 'Small',\n    model: 'small',\n    view: {\n      name: 'span',\n      classes: 'text-small',\n      priority: 7\n    }\n  },\n  big: {\n    title: 'Big',\n    model: 'big',\n    view: {\n      name: 'span',\n      classes: 'text-big',\n      priority: 7\n    }\n  },\n  huge: {\n    title: 'Huge',\n    model: 'huge',\n    view: {\n      name: 'span',\n      classes: 'text-huge',\n      priority: 7\n    }\n  }\n}; // Returns an option definition either from preset or creates one from number shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Number|Object} item\n// @returns {undefined|module:font/fontsize~FontSizeOption}\n\nfunction getOptionDefinition(option) {\n  // Treat any object as full item definition provided by user in configuration.\n  if (typeof option === 'object') {\n    return option;\n  } // Item is a named preset.\n\n\n  if (namedPresets[option]) {\n    return namedPresets[option];\n  } // 'Default' font size. It will be used to remove the fontSize attribute.\n\n\n  if (option === 'default') {\n    return {\n      model: undefined,\n      title: 'Default'\n    };\n  } // At this stage we probably have numerical value to generate a preset so parse it's value.\n\n\n  const sizePreset = parseFloat(option); // Discard any faulty values.\n\n  if (isNaN(sizePreset)) {\n    return;\n  } // Return font size definition from size value.\n\n\n  return generatePixelPreset(sizePreset);\n} // Creates a predefined preset for pixel size.\n//\n// @param {Number} size Font size in pixels.\n// @returns {module:font/fontsize~FontSizeOption}\n\n\nfunction generatePixelPreset(size) {\n  const sizeName = String(size);\n  return {\n    title: sizeName,\n    model: size,\n    view: {\n      name: 'span',\n      styles: {\n        'font-size': `${size}px`\n      },\n      priority: 7\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-font/src/fontsize/utils.js"],"names":["normalizeOptions","configuredOptions","map","getOptionDefinition","filter","option","namedPresets","tiny","title","model","view","name","classes","priority","small","big","huge","undefined","sizePreset","parseFloat","isNaN","generatePixelPreset","size","sizeName","String","styles"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA2BC,iBAA3B,EAA+C;AACrD;AACA,SAAOA,iBAAiB,CACtBC,GADK,CACAC,mBADA,EAEN;AAFM,GAGLC,MAHK,CAGGC,MAAM,IAAI,CAAC,CAACA,MAHf,CAAP;AAIA,C,CAED;;AACA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE;AACLC,IAAAA,KAAK,EAAE,MADF;AAELC,IAAAA,KAAK,EAAE,MAFF;AAGLC,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,OAAO,EAAE,WAFJ;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAHD,GADc;AAUpBC,EAAAA,KAAK,EAAE;AACNN,IAAAA,KAAK,EAAE,OADD;AAENC,IAAAA,KAAK,EAAE,OAFD;AAGNC,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,OAAO,EAAE,YAFJ;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAHA,GAVa;AAmBpBE,EAAAA,GAAG,EAAE;AACJP,IAAAA,KAAK,EAAE,KADH;AAEJC,IAAAA,KAAK,EAAE,KAFH;AAGJC,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,OAAO,EAAE,UAFJ;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAHF,GAnBe;AA4BpBG,EAAAA,IAAI,EAAE;AACLR,IAAAA,KAAK,EAAE,MADF;AAELC,IAAAA,KAAK,EAAE,MAFF;AAGLC,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,OAAO,EAAE,WAFJ;AAGLC,MAAAA,QAAQ,EAAE;AAHL;AAHD;AA5Bc,CAArB,C,CAuCA;AACA;AACA;AACA;AACA;;AACA,SAASV,mBAAT,CAA8BE,MAA9B,EAAuC;AACtC;AACA,MAAK,OAAOA,MAAP,KAAkB,QAAvB,EAAkC;AACjC,WAAOA,MAAP;AACA,GAJqC,CAMtC;;;AACA,MAAKC,YAAY,CAAED,MAAF,CAAjB,EAA8B;AAC7B,WAAOC,YAAY,CAAED,MAAF,CAAnB;AACA,GATqC,CAWtC;;;AACA,MAAKA,MAAM,KAAK,SAAhB,EAA4B;AAC3B,WAAO;AACNI,MAAAA,KAAK,EAAEQ,SADD;AAENT,MAAAA,KAAK,EAAE;AAFD,KAAP;AAIA,GAjBqC,CAmBtC;;;AACA,QAAMU,UAAU,GAAGC,UAAU,CAAEd,MAAF,CAA7B,CApBsC,CAsBtC;;AACA,MAAKe,KAAK,CAAEF,UAAF,CAAV,EAA2B;AAC1B;AACA,GAzBqC,CA2BtC;;;AACA,SAAOG,mBAAmB,CAAEH,UAAF,CAA1B;AACA,C,CAED;AACA;AACA;AACA;;;AACA,SAASG,mBAAT,CAA8BC,IAA9B,EAAqC;AACpC,QAAMC,QAAQ,GAAGC,MAAM,CAAEF,IAAF,CAAvB;AAEA,SAAO;AACNd,IAAAA,KAAK,EAAEe,QADD;AAENd,IAAAA,KAAK,EAAEa,IAFD;AAGNZ,IAAAA,IAAI,EAAE;AACLC,MAAAA,IAAI,EAAE,MADD;AAELc,MAAAA,MAAM,EAAE;AACP,qBAAc,GAAGH,IAAM;AADhB,OAFH;AAKLT,MAAAA,QAAQ,EAAE;AALL;AAHA,GAAP;AAWA","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/utils\n */\n\n/**\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontsize~FontSizeOption} format.\n *\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\n */\nexport function normalizeOptions( configuredOptions ) {\n\t// Convert options to objects.\n\treturn configuredOptions\n\t\t.map( getOptionDefinition )\n\t\t// Filter out undefined values that `getOptionDefinition` might return.\n\t\t.filter( option => !!option );\n}\n\n// Default named presets map.\nconst namedPresets = {\n\ttiny: {\n\t\ttitle: 'Tiny',\n\t\tmodel: 'tiny',\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tclasses: 'text-tiny',\n\t\t\tpriority: 7\n\t\t}\n\t},\n\tsmall: {\n\t\ttitle: 'Small',\n\t\tmodel: 'small',\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tclasses: 'text-small',\n\t\t\tpriority: 7\n\t\t}\n\t},\n\tbig: {\n\t\ttitle: 'Big',\n\t\tmodel: 'big',\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tclasses: 'text-big',\n\t\t\tpriority: 7\n\t\t}\n\t},\n\thuge: {\n\t\ttitle: 'Huge',\n\t\tmodel: 'huge',\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tclasses: 'text-huge',\n\t\t\tpriority: 7\n\t\t}\n\t}\n};\n\n// Returns an option definition either from preset or creates one from number shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Number|Object} item\n// @returns {undefined|module:font/fontsize~FontSizeOption}\nfunction getOptionDefinition( option ) {\n\t// Treat any object as full item definition provided by user in configuration.\n\tif ( typeof option === 'object' ) {\n\t\treturn option;\n\t}\n\n\t// Item is a named preset.\n\tif ( namedPresets[ option ] ) {\n\t\treturn namedPresets[ option ];\n\t}\n\n\t// 'Default' font size. It will be used to remove the fontSize attribute.\n\tif ( option === 'default' ) {\n\t\treturn {\n\t\t\tmodel: undefined,\n\t\t\ttitle: 'Default'\n\t\t};\n\t}\n\n\t// At this stage we probably have numerical value to generate a preset so parse it's value.\n\tconst sizePreset = parseFloat( option );\n\n\t// Discard any faulty values.\n\tif ( isNaN( sizePreset ) ) {\n\t\treturn;\n\t}\n\n\t// Return font size definition from size value.\n\treturn generatePixelPreset( sizePreset );\n}\n\n// Creates a predefined preset for pixel size.\n//\n// @param {Number} size Font size in pixels.\n// @returns {module:font/fontsize~FontSizeOption}\nfunction generatePixelPreset( size ) {\n\tconst sizeName = String( size );\n\n\treturn {\n\t\ttitle: sizeName,\n\t\tmodel: size,\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tstyles: {\n\t\t\t\t'font-size': `${ size }px`\n\t\t\t},\n\t\t\tpriority: 7\n\t\t}\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}