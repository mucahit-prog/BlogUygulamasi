{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontFamilyEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor); // Define default configuration using font families shortcuts.\n\n    editor.config.define(FONT_FAMILY, {\n      options: ['default', 'Arial, Helvetica, sans-serif', 'Courier New, Courier, monospace', 'Georgia, serif', 'Lucida Sans Unicode, Lucida Grande, sans-serif', 'Tahoma, Geneva, sans-serif', 'Times New Roman, Times, serif', 'Trebuchet MS, Helvetica, sans-serif', 'Verdana, Geneva, sans-serif']\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow fontFamily attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_FAMILY\n    });\n    editor.model.schema.setAttributeProperties(FONT_FAMILY, {\n      isFormatting: true,\n      copyOnEnter: true\n    }); // Get configured font family options without \"default\" option.\n\n    const options = normalizeOptions(editor.config.get('fontFamily.options')).filter(item => item.model);\n    const definition = buildDefinition(FONT_FAMILY, options); // Set-up the two-way conversion.\n\n    editor.conversion.attributeToElement(definition);\n    editor.commands.add(FONT_FAMILY, new FontFamilyCommand(editor));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyediting.js"],"names":["Plugin","FontFamilyCommand","normalizeOptions","buildDefinition","FONT_FAMILY","FontFamilyEditing","constructor","editor","config","define","options","init","model","schema","extend","allowAttributes","setAttributeProperties","isFormatting","copyOnEnter","get","filter","item","definition","conversion","attributeToElement","commands","add"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,qCAAnB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,UAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,iBAAN,SAAgCL,MAAhC,CAAuC;AACrD;AACD;AACA;AACCM,EAAAA,WAAW,CAAEC,MAAF,EAAW;AACrB,UAAOA,MAAP,EADqB,CAGrB;;AACAA,IAAAA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAsBL,WAAtB,EAAmC;AAClCM,MAAAA,OAAO,EAAE,CACR,SADQ,EAER,8BAFQ,EAGR,iCAHQ,EAIR,gBAJQ,EAKR,gDALQ,EAMR,4BANQ,EAOR,+BAPQ,EAQR,qCARQ,EASR,6BATQ;AADyB,KAAnC;AAaA;AAED;AACD;AACA;;;AACCC,EAAAA,IAAI,GAAG;AACN,UAAMJ,MAAM,GAAG,KAAKA,MAApB,CADM,CAGN;;AACAA,IAAAA,MAAM,CAACK,KAAP,CAAaC,MAAb,CAAoBC,MAApB,CAA4B,OAA5B,EAAqC;AAAEC,MAAAA,eAAe,EAAEX;AAAnB,KAArC;AACAG,IAAAA,MAAM,CAACK,KAAP,CAAaC,MAAb,CAAoBG,sBAApB,CAA4CZ,WAA5C,EAAyD;AACxDa,MAAAA,YAAY,EAAE,IAD0C;AAExDC,MAAAA,WAAW,EAAE;AAF2C,KAAzD,EALM,CAUN;;AACA,UAAMR,OAAO,GAAGR,gBAAgB,CAAEK,MAAM,CAACC,MAAP,CAAcW,GAAd,CAAmB,oBAAnB,CAAF,CAAhB,CAA8DC,MAA9D,CAAsEC,IAAI,IAAIA,IAAI,CAACT,KAAnF,CAAhB;AACA,UAAMU,UAAU,GAAGnB,eAAe,CAAEC,WAAF,EAAeM,OAAf,CAAlC,CAZM,CAcN;;AACAH,IAAAA,MAAM,CAACgB,UAAP,CAAkBC,kBAAlB,CAAsCF,UAAtC;AAEAf,IAAAA,MAAM,CAACkB,QAAP,CAAgBC,GAAhB,CAAqBtB,WAArB,EAAkC,IAAIH,iBAAJ,CAAuBM,MAAvB,CAAlC;AACA;;AA5CoD","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyediting\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontFamilyEditing extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\t// Define default configuration using font families shortcuts.\n\t\teditor.config.define( FONT_FAMILY, {\n\t\t\toptions: [\n\t\t\t\t'default',\n\t\t\t\t'Arial, Helvetica, sans-serif',\n\t\t\t\t'Courier New, Courier, monospace',\n\t\t\t\t'Georgia, serif',\n\t\t\t\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\n\t\t\t\t'Tahoma, Geneva, sans-serif',\n\t\t\t\t'Times New Roman, Times, serif',\n\t\t\t\t'Trebuchet MS, Helvetica, sans-serif',\n\t\t\t\t'Verdana, Geneva, sans-serif'\n\t\t\t]\n\t\t} );\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Allow fontFamily attribute on text nodes.\n\t\teditor.model.schema.extend( '$text', { allowAttributes: FONT_FAMILY } );\n\t\teditor.model.schema.setAttributeProperties( FONT_FAMILY, {\n\t\t\tisFormatting: true,\n\t\t\tcopyOnEnter: true\n\t\t} );\n\n\t\t// Get configured font family options without \"default\" option.\n\t\tconst options = normalizeOptions( editor.config.get( 'fontFamily.options' ) ).filter( item => item.model );\n\t\tconst definition = buildDefinition( FONT_FAMILY, options );\n\n\t\t// Set-up the two-way conversion.\n\t\teditor.conversion.attributeToElement( definition );\n\n\t\teditor.commands.add( FONT_FAMILY, new FontFamilyCommand( editor ) );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}