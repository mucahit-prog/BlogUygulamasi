{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class RemoveRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const tableCell = findAncestor('tableCell', doc.selection.getFirstPosition());\n    this.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const firstPosition = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', firstPosition);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const currentRow = table.getChildIndex(tableRow);\n    const headingRows = table.getAttribute('headingRows') || 0;\n    model.change(writer => {\n      if (headingRows && currentRow <= headingRows) {\n        updateNumericAttribute('headingRows', headingRows - 1, table, writer, 0);\n      }\n\n      const tableMap = [...new TableWalker(table, {\n        endRow: currentRow\n      })];\n      const cellsToMove = new Map(); // Get cells from removed row that are spanned over multiple rows.\n\n      tableMap.filter(({\n        row,\n        rowspan\n      }) => row === currentRow && rowspan > 1).forEach(({\n        column,\n        cell,\n        rowspan\n      }) => cellsToMove.set(column, {\n        cell,\n        rowspanToSet: rowspan - 1\n      })); // Reduce rowspan on cells that are above removed row and overlaps removed row.\n\n      tableMap.filter(({\n        row,\n        rowspan\n      }) => row <= currentRow - 1 && row + rowspan > currentRow).forEach(({\n        cell,\n        rowspan\n      }) => updateNumericAttribute('rowspan', rowspan - 1, cell, writer)); // Move cells to another row.\n\n      const targetRow = currentRow + 1;\n      const tableWalker = new TableWalker(table, {\n        includeSpanned: true,\n        startRow: targetRow,\n        endRow: targetRow\n      });\n      let previousCell;\n\n      for (const {\n        row,\n        column,\n        cell\n      } of [...tableWalker]) {\n        if (cellsToMove.has(column)) {\n          const {\n            cell: cellToMove,\n            rowspanToSet\n          } = cellsToMove.get(column);\n          const targetPosition = previousCell ? writer.createPositionAfter(previousCell) : writer.createPositionAt(table.getChild(row), 0);\n          writer.move(writer.createRangeOn(cellToMove), targetPosition);\n          updateNumericAttribute('rowspan', rowspanToSet, cellToMove, writer);\n          previousCell = cellToMove;\n        } else {\n          previousCell = cell;\n        }\n      }\n\n      writer.remove(tableRow);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js"],"names":["Command","TableWalker","findAncestor","updateNumericAttribute","RemoveRowCommand","refresh","model","editor","doc","document","tableCell","selection","getFirstPosition","isEnabled","parent","childCount","execute","firstPosition","tableRow","table","currentRow","getChildIndex","headingRows","getAttribute","change","writer","tableMap","endRow","cellsToMove","Map","filter","row","rowspan","forEach","column","cell","set","rowspanToSet","targetRow","tableWalker","includeSpanned","startRow","previousCell","has","cellToMove","get","targetPosition","createPositionAfter","createPositionAt","getChild","move","createRangeOn","remove"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\n\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\nexport default class RemoveRowCommand extends Command {\n\t/**\n\t * @inheritDoc\n\t */\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst doc = model.document;\n\n\t\tconst tableCell = findAncestor( 'tableCell', doc.selection.getFirstPosition() );\n\n\t\tthis.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\texecute() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst firstPosition = selection.getFirstPosition();\n\t\tconst tableCell = findAncestor( 'tableCell', firstPosition );\n\t\tconst tableRow = tableCell.parent;\n\t\tconst table = tableRow.parent;\n\n\t\tconst currentRow = table.getChildIndex( tableRow );\n\t\tconst headingRows = table.getAttribute( 'headingRows' ) || 0;\n\n\t\tmodel.change( writer => {\n\t\t\tif ( headingRows && currentRow <= headingRows ) {\n\t\t\t\tupdateNumericAttribute( 'headingRows', headingRows - 1, table, writer, 0 );\n\t\t\t}\n\n\t\t\tconst tableMap = [ ...new TableWalker( table, { endRow: currentRow } ) ];\n\n\t\t\tconst cellsToMove = new Map();\n\n\t\t\t// Get cells from removed row that are spanned over multiple rows.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row === currentRow && rowspan > 1 )\n\t\t\t\t.forEach( ( { column, cell, rowspan } ) => cellsToMove.set( column, { cell, rowspanToSet: rowspan - 1 } ) );\n\n\t\t\t// Reduce rowspan on cells that are above removed row and overlaps removed row.\n\t\t\ttableMap\n\t\t\t\t.filter( ( { row, rowspan } ) => row <= currentRow - 1 && row + rowspan > currentRow )\n\t\t\t\t.forEach( ( { cell, rowspan } ) => updateNumericAttribute( 'rowspan', rowspan - 1, cell, writer ) );\n\n\t\t\t// Move cells to another row.\n\t\t\tconst targetRow = currentRow + 1;\n\t\t\tconst tableWalker = new TableWalker( table, { includeSpanned: true, startRow: targetRow, endRow: targetRow } );\n\n\t\t\tlet previousCell;\n\n\t\t\tfor ( const { row, column, cell } of [ ...tableWalker ] ) {\n\t\t\t\tif ( cellsToMove.has( column ) ) {\n\t\t\t\t\tconst { cell: cellToMove, rowspanToSet } = cellsToMove.get( column );\n\t\t\t\t\tconst targetPosition = previousCell ?\n\t\t\t\t\t\twriter.createPositionAfter( previousCell ) :\n\t\t\t\t\t\twriter.createPositionAt( table.getChild( row ), 0 );\n\n\t\t\t\t\twriter.move( writer.createRangeOn( cellToMove ), targetPosition );\n\t\t\t\t\tupdateNumericAttribute( 'rowspan', rowspanToSet, cellToMove, writer );\n\n\t\t\t\t\tpreviousCell = cellToMove;\n\t\t\t\t} else {\n\t\t\t\t\tpreviousCell = cell;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twriter.remove( tableRow );\n\t\t} );\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}