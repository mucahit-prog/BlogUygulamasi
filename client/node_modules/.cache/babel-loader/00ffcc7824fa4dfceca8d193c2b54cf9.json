{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { addListToDropdown, createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableUI extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  init() {\n    const editor = this.editor;\n    const t = this.editor.t;\n    editor.ui.componentFactory.add('insertTable', locale => {\n      const command = editor.commands.get('insertTable');\n      const dropdownView = createDropdown(locale);\n      dropdownView.bind('isEnabled').to(command); // Decorate dropdown's button.\n\n      dropdownView.buttonView.set({\n        icon: tableIcon,\n        label: t('Insert table'),\n        tooltip: true\n      }); // Prepare custom view for dropdown's panel.\n\n      const insertTableView = new InsertTableView(locale);\n      dropdownView.panelView.children.add(insertTableView);\n      insertTableView.delegate('execute').to(dropdownView);\n      dropdownView.buttonView.on('open', () => {\n        // Reset the chooser before showing it to the user.\n        insertTableView.rows = 0;\n        insertTableView.columns = 0;\n      });\n      dropdownView.on('execute', () => {\n        editor.execute('insertTable', {\n          rows: insertTableView.rows,\n          columns: insertTableView.columns\n        });\n        editor.editing.view.focus();\n      });\n      return dropdownView;\n    });\n    editor.ui.componentFactory.add('tableColumn', locale => {\n      const options = [{\n        type: 'switchbutton',\n        model: {\n          commandName: 'setTableColumnHeader',\n          label: t('Header column'),\n          bindIsOn: true\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableColumnLeft',\n          label: t('Insert column left')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableColumnRight',\n          label: t('Insert column right')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'removeTableColumn',\n          label: t('Delete column')\n        }\n      }];\n      return this._prepareDropdown(t('Column'), tableColumnIcon, options, locale);\n    });\n    editor.ui.componentFactory.add('tableRow', locale => {\n      const options = [{\n        type: 'switchbutton',\n        model: {\n          commandName: 'setTableRowHeader',\n          label: t('Header row'),\n          bindIsOn: true\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableRowBelow',\n          label: t('Insert row below')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'insertTableRowAbove',\n          label: t('Insert row above')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'removeTableRow',\n          label: t('Delete row')\n        }\n      }];\n      return this._prepareDropdown(t('Row'), tableRowIcon, options, locale);\n    });\n    editor.ui.componentFactory.add('mergeTableCells', locale => {\n      const options = [{\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellUp',\n          label: t('Merge cell up')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellRight',\n          label: t('Merge cell right')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellDown',\n          label: t('Merge cell down')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'mergeTableCellLeft',\n          label: t('Merge cell left')\n        }\n      }, {\n        type: 'separator'\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'splitTableCellVertically',\n          label: t('Split cell vertically')\n        }\n      }, {\n        type: 'button',\n        model: {\n          commandName: 'splitTableCellHorizontally',\n          label: t('Split cell horizontally')\n        }\n      }];\n      return this._prepareDropdown(t('Merge cells'), tableMergeCellIcon, options, locale);\n    });\n  }\n  /**\n   * Creates a dropdown view from the set of options.\n   *\n   * @private\n   * @param {String} label The dropdown button label.\n   * @param {String} icon An icon for the dropdown button.\n   * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n   * @param {module:utils/locale~Locale} locale\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n\n\n  _prepareDropdown(label, icon, options, locale) {\n    const editor = this.editor;\n    const dropdownView = createDropdown(locale);\n    const commands = []; // Prepare dropdown list items for list dropdown.\n\n    const itemDefinitions = new Collection();\n\n    for (const option of options) {\n      addListOption(option, editor, commands, itemDefinitions);\n    }\n\n    addListToDropdown(dropdownView, itemDefinitions); // Decorate dropdown's button.\n\n    dropdownView.buttonView.set({\n      label,\n      icon,\n      tooltip: true\n    }); // Make dropdown button disabled when all options are disabled.\n\n    dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n      return areEnabled.some(isEnabled => isEnabled);\n    });\n    this.listenTo(dropdownView, 'execute', evt => {\n      editor.execute(evt.source.commandName);\n      editor.editing.view.focus();\n    });\n    return dropdownView;\n  }\n\n} // Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\n\nfunction addListOption(option, editor, commands, itemDefinitions) {\n  const model = option.model = new Model(option.model);\n  const {\n    commandName,\n    bindIsOn\n  } = option.model;\n\n  if (option.type !== 'separator') {\n    const command = editor.commands.get(commandName);\n    commands.push(command);\n    model.set({\n      commandName\n    });\n    model.bind('isEnabled').to(command);\n\n    if (bindIsOn) {\n      model.bind('isOn').to(command, 'value');\n    }\n  }\n\n  model.set({\n    withText: true\n  });\n  itemDefinitions.add(option);\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-table/src/tableui.js"],"names":["Plugin","addListToDropdown","createDropdown","Model","Collection","InsertTableView","tableIcon","tableColumnIcon","tableRowIcon","tableMergeCellIcon","TableUI","init","editor","t","ui","componentFactory","add","locale","command","commands","get","dropdownView","bind","to","buttonView","set","icon","label","tooltip","insertTableView","panelView","children","delegate","on","rows","columns","execute","editing","view","focus","options","type","model","commandName","bindIsOn","_prepareDropdown","itemDefinitions","option","addListOption","toMany","areEnabled","some","isEnabled","listenTo","evt","source","push","withText"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableui\n */\n\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { addListToDropdown, createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n\nimport InsertTableView from './ui/inserttableview';\n\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n\t/**\n\t * @inheritDoc\n\t */\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst t = this.editor.t;\n\n\t\teditor.ui.componentFactory.add( 'insertTable', locale => {\n\t\t\tconst command = editor.commands.get( 'insertTable' );\n\t\t\tconst dropdownView = createDropdown( locale );\n\n\t\t\tdropdownView.bind( 'isEnabled' ).to( command );\n\n\t\t\t// Decorate dropdown's button.\n\t\t\tdropdownView.buttonView.set( {\n\t\t\t\ticon: tableIcon,\n\t\t\t\tlabel: t( 'Insert table' ),\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\t// Prepare custom view for dropdown's panel.\n\t\t\tconst insertTableView = new InsertTableView( locale );\n\t\t\tdropdownView.panelView.children.add( insertTableView );\n\n\t\t\tinsertTableView.delegate( 'execute' ).to( dropdownView );\n\n\t\t\tdropdownView.buttonView.on( 'open', () => {\n\t\t\t\t// Reset the chooser before showing it to the user.\n\t\t\t\tinsertTableView.rows = 0;\n\t\t\t\tinsertTableView.columns = 0;\n\t\t\t} );\n\n\t\t\tdropdownView.on( 'execute', () => {\n\t\t\t\teditor.execute( 'insertTable', { rows: insertTableView.rows, columns: insertTableView.columns } );\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn dropdownView;\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableColumn', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableColumnHeader',\n\t\t\t\t\t\tlabel: t( 'Header column' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableColumnLeft',\n\t\t\t\t\t\tlabel: t( 'Insert column left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableColumnRight',\n\t\t\t\t\t\tlabel: t( 'Insert column right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableColumn',\n\t\t\t\t\t\tlabel: t( 'Delete column' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareDropdown( t( 'Column' ), tableColumnIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'tableRow', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'switchbutton',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'setTableRowHeader',\n\t\t\t\t\t\tlabel: t( 'Header row' ),\n\t\t\t\t\t\tbindIsOn: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowBelow',\n\t\t\t\t\t\tlabel: t( 'Insert row below' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'insertTableRowAbove',\n\t\t\t\t\t\tlabel: t( 'Insert row above' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'removeTableRow',\n\t\t\t\t\t\tlabel: t( 'Delete row' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareDropdown( t( 'Row' ), tableRowIcon, options, locale );\n\t\t} );\n\n\t\teditor.ui.componentFactory.add( 'mergeTableCells', locale => {\n\t\t\tconst options = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellUp',\n\t\t\t\t\t\tlabel: t( 'Merge cell up' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellRight',\n\t\t\t\t\t\tlabel: t( 'Merge cell right' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellDown',\n\t\t\t\t\t\tlabel: t( 'Merge cell down' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'mergeTableCellLeft',\n\t\t\t\t\t\tlabel: t( 'Merge cell left' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ type: 'separator' },\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellVertically',\n\t\t\t\t\t\tlabel: t( 'Split cell vertically' )\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tmodel: {\n\t\t\t\t\t\tcommandName: 'splitTableCellHorizontally',\n\t\t\t\t\t\tlabel: t( 'Split cell horizontally' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\treturn this._prepareDropdown( t( 'Merge cells' ), tableMergeCellIcon, options, locale );\n\t\t} );\n\t}\n\n\t/**\n\t * Creates a dropdown view from the set of options.\n\t *\n\t * @private\n\t * @param {String} label The dropdown button label.\n\t * @param {String} icon An icon for the dropdown button.\n\t * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n\t * @param {module:utils/locale~Locale} locale\n\t * @returns {module:ui/dropdown/dropdownview~DropdownView}\n\t */\n\t_prepareDropdown( label, icon, options, locale ) {\n\t\tconst editor = this.editor;\n\n\t\tconst dropdownView = createDropdown( locale );\n\t\tconst commands = [];\n\n\t\t// Prepare dropdown list items for list dropdown.\n\t\tconst itemDefinitions = new Collection();\n\n\t\tfor ( const option of options ) {\n\t\t\taddListOption( option, editor, commands, itemDefinitions );\n\t\t}\n\n\t\taddListToDropdown( dropdownView, itemDefinitions );\n\n\t\t// Decorate dropdown's button.\n\t\tdropdownView.buttonView.set( {\n\t\t\tlabel,\n\t\t\ticon,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// Make dropdown button disabled when all options are disabled.\n\t\tdropdownView.bind( 'isEnabled' ).toMany( commands, 'isEnabled', ( ...areEnabled ) => {\n\t\t\treturn areEnabled.some( isEnabled => isEnabled );\n\t\t} );\n\n\t\tthis.listenTo( dropdownView, 'execute', evt => {\n\t\t\teditor.execute( evt.source.commandName );\n\t\t\teditor.editing.view.focus();\n\t\t} );\n\n\t\treturn dropdownView;\n\t}\n}\n\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\nfunction addListOption( option, editor, commands, itemDefinitions ) {\n\tconst model = option.model = new Model( option.model );\n\tconst { commandName, bindIsOn } = option.model;\n\n\tif ( option.type !== 'separator' ) {\n\t\tconst command = editor.commands.get( commandName );\n\n\t\tcommands.push( command );\n\n\t\tmodel.set( { commandName } );\n\n\t\tmodel.bind( 'isEnabled' ).to( command );\n\n\t\tif ( bindIsOn ) {\n\t\t\tmodel.bind( 'isOn' ).to( command, 'value' );\n\t\t}\n\t}\n\n\tmodel.set( {\n\t\twithText: true\n\t} );\n\n\titemDefinitions.add( option );\n}\n"]},"metadata":{},"sourceType":"module"}