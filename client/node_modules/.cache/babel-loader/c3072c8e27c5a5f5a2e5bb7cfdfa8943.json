{"ast":null,"code":"/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\n\nexport default class RootElement extends Element {\n  /**\n   * Creates root element.\n   *\n   * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n   * @param {String} name Node name.\n   * @param {String} [rootName='main'] Unique root name used to identify this root\n   * element by {@link module:engine/model/document~Document}.\n   */\n  constructor(doc, name, rootName = 'main') {\n    super(name);\n    /**\n     * Document that is an owner of this root.\n     *\n     * @private\n     * @member {module:engine/model/document~Document}\n     */\n\n    this._doc = doc;\n    /**\n     * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.rootName = rootName;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this root element.\n   *\n   * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n\n\n  get document() {\n    return this._doc;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trootElement.is( 'rootElement' ); // -> true\n   *\t\trootElement.is( 'element' ); // -> true\n   *\t\trootElement.is( 'node' ); // -> true\n   *\t\trootElement.is( 'model:rootElement' ); // -> true\n   *\t\trootElement.is( 'model:element' ); // -> true\n   *\t\trootElement.is( 'model:node' ); // -> true\n   *\n   *\t\trootElement.is( 'view:element' ); // -> false\n   *\t\trootElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/model/element~Element#name name}:\n   *\n   *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n   *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n   *\t\ttext.is( '$root' ); -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name) {\n    const cutType = type.replace('model:', '');\n\n    if (!name) {\n      return cutType == 'rootElement' || super.is(type);\n    } else {\n      return cutType == 'rootElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Converts `RootElement` instance to `String` containing it's name.\n   *\n   * @returns {String} `RootElement` instance converted to `String`.\n   */\n\n\n  toJSON() {\n    return this.rootName;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Valanis/Desktop/React-Docs-Practice/BlogUygulamasÄ±/client/node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js"],"names":["Element","RootElement","constructor","doc","name","rootName","_doc","document","is","type","cutType","replace","toJSON"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AAEA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BD,OAA1B,CAAkC;AAChD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAAEC,GAAF,EAAOC,IAAP,EAAaC,QAAQ,GAAG,MAAxB,EAAiC;AAC3C,UAAOD,IAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,IAAL,GAAYH,GAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAKE,QAAL,GAAgBA,QAAhB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACa,MAARE,QAAQ,GAAG;AACd,WAAO,KAAKD,IAAZ;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCE,EAAAA,EAAE,CAAEC,IAAF,EAAQL,IAAR,EAAe;AAChB,UAAMM,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAc,QAAd,EAAwB,EAAxB,CAAhB;;AACA,QAAK,CAACP,IAAN,EAAa;AACZ,aAAOM,OAAO,IAAI,aAAX,IAA4B,MAAMF,EAAN,CAAUC,IAAV,CAAnC;AACA,KAFD,MAEO;AACN,aAASC,OAAO,IAAI,aAAX,IAA4BN,IAAI,IAAI,KAAKA,IAA3C,IAAqD,MAAMI,EAAN,CAAUC,IAAV,EAAgBL,IAAhB,CAA5D;AACA;AACD;AAED;AACD;AACA;AACA;AACA;;;AACCQ,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKP,QAAZ;AACA;;AApF+C","sourcesContent":["/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\n\nimport Element from './element';\n\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\nexport default class RootElement extends Element {\n\t/**\n\t * Creates root element.\n\t *\n\t * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n\t * @param {String} name Node name.\n\t * @param {String} [rootName='main'] Unique root name used to identify this root\n\t * element by {@link module:engine/model/document~Document}.\n\t */\n\tconstructor( doc, name, rootName = 'main' ) {\n\t\tsuper( name );\n\n\t\t/**\n\t\t * Document that is an owner of this root.\n\t\t *\n\t\t * @private\n\t\t * @member {module:engine/model/document~Document}\n\t\t */\n\t\tthis._doc = doc;\n\n\t\t/**\n\t\t * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n\t\t *\n\t\t * @readonly\n\t\t * @member {String}\n\t\t */\n\t\tthis.rootName = rootName;\n\t}\n\n\t/**\n\t * {@link module:engine/model/document~Document Document} that owns this root element.\n\t *\n\t * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n\t *\n\t * @readonly\n\t * @type {module:engine/model/document~Document|null}\n\t */\n\tget document() {\n\t\treturn this._doc;\n\t}\n\n\t/**\n\t * Checks whether this object is of the given.\n\t *\n\t *\t\trootElement.is( 'rootElement' ); // -> true\n\t *\t\trootElement.is( 'element' ); // -> true\n\t *\t\trootElement.is( 'node' ); // -> true\n\t *\t\trootElement.is( 'model:rootElement' ); // -> true\n\t *\t\trootElement.is( 'model:element' ); // -> true\n\t *\t\trootElement.is( 'model:node' ); // -> true\n\t *\n\t *\t\trootElement.is( 'view:element' ); // -> false\n\t *\t\trootElement.is( 'documentFragment' ); // -> false\n\t *\n\t * Assuming that the object being checked is an element, you can also check its\n\t * {@link module:engine/model/element~Element#name name}:\n\t *\n\t *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n\t *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n\t *\t\ttext.is( '$root' ); -> false\n\t *\n\t * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n\t *\n\t * @param {String} type Type to check when `name` parameter is present.\n\t * Otherwise, it acts like the `name` parameter.\n\t * @param {String} [name] Element name.\n\t * @returns {Boolean}\n\t */\n\tis( type, name ) {\n\t\tconst cutType = type.replace( 'model:', '' );\n\t\tif ( !name ) {\n\t\t\treturn cutType == 'rootElement' || super.is( type );\n\t\t} else {\n\t\t\treturn ( cutType == 'rootElement' && name == this.name ) || super.is( type, name );\n\t\t}\n\t}\n\n\t/**\n\t * Converts `RootElement` instance to `String` containing it's name.\n\t *\n\t * @returns {String} `RootElement` instance converted to `String`.\n\t */\n\ttoJSON() {\n\t\treturn this.rootName;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}