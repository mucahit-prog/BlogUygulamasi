"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = UploadAdapterPlugin;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var UploadAdapter =
/*#__PURE__*/
function () {
  function UploadAdapter(loader, options) {
    (0, _classCallCheck2["default"])(this, UploadAdapter);
    // The file loader instance to use during the upload.
    this.loader = loader;
    this.options = _objectSpread({
      url: '',
      fileName: 'file',
      headers: {}
    }, options);
  } // Starts the upload process.


  (0, _createClass2["default"])(UploadAdapter, [{
    key: "upload",
    value: function upload() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this._initRequest();

        _this._initListeners(resolve, reject);

        _this._sendRequest(reject);
      });
    } // Aborts the upload process.

  }, {
    key: "abort",
    value: function abort() {
      if (this.xhr) {
        this.xhr.abort();
      }
    } // Initializes the XMLHttpRequest object using the URL passed to the constructor.

  }, {
    key: "_initRequest",
    value: function _initRequest() {
      var _this2 = this;

      this.xhr = new XMLHttpRequest(); // Note that your request may look different. It is up to you and your editor
      // integration to choose the right communication channel. This example uses
      // a POST request with JSON as a data structure but your configuration
      // could be different.

      var _this$options = this.options,
          url = _this$options.url,
          headers = _this$options.headers;
      this.xhr.open('POST', url, true);
      Object.keys(headers).forEach(function (key) {
        _this2.xhr.setRequestHeader(key, headers[key]);
      });
      this.xhr.responseType = 'json';
    } // Initializes XMLHttpRequest listeners.

  }, {
    key: "_initListeners",
    value: function _initListeners(resolve, reject) {
      var xhr = this.xhr;
      var loader = this.loader;
      var genericErrorText = "Couldn't upload file: ".concat(loader.file.name, ".");
      xhr.addEventListener('error', function () {
        return reject(genericErrorText);
      });
      xhr.addEventListener('abort', function () {
        return reject();
      });
      xhr.addEventListener('load', function () {
        var response = xhr.response; // This example assumes the XHR server's "response" object will come with
        // an "error" which has its own "message" that can be passed to reject()
        // in the upload promise.
        //
        // Your integration may handle upload errors in a different way so make sure
        // it is done properly. The reject() function must be called when the upload fails.

        if (!response || response.error) {
          return reject(response && response.error ? response.error.message : genericErrorText);
        } // If the upload is successful, resolve the upload promise with an object containing
        // at least the "default" URL, pointing to the image on the server.
        // This URL will be used to display the image in the content. Learn more in the
        // UploadAdapter#upload documentation.


        return resolve({
          "default": response.data
        });
      }); // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
      // properties which are used e.g. to display the upload progress bar in the editor
      // user interface.

      if (xhr.upload) {
        xhr.upload.addEventListener('progress', function (evt) {
          if (evt.lengthComputable) {
            loader.uploadTotal = evt.total;
            loader.uploaded = evt.loaded;
          }
        });
      }
    } // Prepares the data and sends the request.

  }, {
    key: "_sendRequest",
    value: function _sendRequest(reject) {
      var _this3 = this;

      this.loader.file.then(function (file) {
        // Prepare the form data.
        var data = new FormData();
        data.append(_this3.options.fileName, file); // Important note: This is the right place to implement security mechanisms
        // like authentication and CSRF protection. For instance, you can use
        // XMLHttpRequest.setRequestHeader() to set the request headers containing
        // the CSRF token generated earlier by your application.
        // Send the request.

        _this3.xhr.send(data);
      })["catch"](reject);
    }
  }]);
  return UploadAdapter;
}();

function UploadAdapterPlugin(editor) {
  var options = editor.config.get('uploadConfig');

  editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {
    return (// Configure the URL to the upload script in your back-end here!
      new UploadAdapter(loader, options)
    );
  };
} // Usage:
// ClassicEditor
//   .create(document.querySelector('#editor'), {
//     extraPlugins: [UploadAdapterPlugin],
//     // ...
//   })
//   .catch((error) => ( {
//     console.log(error);
//   });